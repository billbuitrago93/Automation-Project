/* 
 * Payment Request
 *
 * A payment request is a request for payment (partial or full) of an invoice. This API provides methods to create or update a payment request, or view a payment request by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.PaymentRequestModels
{
    /// <summary>
    /// LineItem
    /// </summary>
    [DataContract]
    public partial class LineItem : IEquatable<LineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="allocations">allocations.</param>
        /// <param name="allocationStatus">Current amount of allocation performed on the Request Line Item (accepted values: None, Partial, Full)..</param>
        /// <param name="amountWithoutVat">The net amount of the line item (excluding VAT)..</param>
        /// <param name="approvedLineItemAmount">The approved amount of the line item..</param>
        /// <param name="custom1">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom10">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom11">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom12">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom13">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom14">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom15">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom16">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom17">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom18">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom19">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom2">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom20">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom3">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom4">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom5">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom6">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom7">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom8">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom9">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="deliverySlipNumber">The delivery slip number associated with receiving receipt..</param>
        /// <param name="description">Brief overview of the good or service ordered..</param>
        /// <param name="expenseTypeCode">A code which indicates the Expense Type for the Line Item..</param>
        /// <param name="isMatched">Indication that the Payment Request Line Item is associated to a Purchase Order Line Item (this is a true/false)..</param>
        /// <param name="lineItemId">The identifier of the payment request line item. The ID is only guaranteed to be unique for a given payment request..</param>
        /// <param name="lineItemIsTestUser">Indication that the Allocation record was created by a test user (this is a true/false)..</param>
        /// <param name="matchedPurchaseOrderLineItemId">The identifier of the purchase order line item to which the payment request line item is matched (if any)..</param>
        /// <param name="purchaseOrderNumber">The identifier of the purchase order containing the line item to which the payment request line item is matched (if any)..</param>
        /// <param name="quantity">Total number of goods or services ordered..</param>
        /// <param name="requestedLineItemAmount">The requested amount of the line item..</param>
        /// <param name="requestLineItemNumber">The relative location of the Line Item in relation to other Line Items in the Payment Request..</param>
        /// <param name="shipFromPostalCode">The postal code the good or service was shipped from..</param>
        /// <param name="shipToPostalCode">The postal code the good or service will be shipped to..</param>
        /// <param name="supplierPartId">The unique identifier provided by the supplier that is associated with the good or service..</param>
        /// <param name="tax">The tax associated with the line item..</param>
        /// <param name="taxCode">The Tax Code  assigned for the Line Item, based on the Tax Setting..</param>
        /// <param name="taxCode2">The Tax Code 2 assigned for the Line Item, based on the Tax Setting..</param>
        /// <param name="taxCode3">The Tax Code 3 assigned for the Line Item, based on the Tax Setting..</param>
        /// <param name="taxCode4">The Tax Code 4 assigned for the Line Item, based on the Tax Setting..</param>
        /// <param name="totalPrice">The total amount of the line item..</param>
        /// <param name="unitOfMeasure">The code for the measurement unit used to quantify the good or service. Use GET /invoice/localizeddata to look up codes and descriptions..</param>
        /// <param name="unitPrice">The cost for a single unit of the line item good or service..</param>
        /// <param name="vatAmount">The amount of VAT 1 included in the line item total..</param>
        /// <param name="vatAmountFour">The amount of VAT 4 included in the line item total..</param>
        /// <param name="vatAmountThree">The amount of VAT 3 included in the line item total..</param>
        /// <param name="vatAmountTwo">The amount of VAT 2 included in the line item total..</param>
        /// <param name="vatRate">The VAT rate 1 applied to the net line item total..</param>
        /// <param name="vatRateFour">The VAT rate 4 applied to the net line item total..</param>
        /// <param name="vatRateThree">The VAT rate 3 applied to the net line item total..</param>
        /// <param name="vatRateTwo">The VAT rate 2 applied to the net line item total..</param>
        public LineItem(List<Allocation> allocations = default(List<Allocation>), string allocationStatus = default(string), string amountWithoutVat = default(string), string approvedLineItemAmount = default(string), string custom1 = default(string), string custom10 = default(string), string custom11 = default(string), string custom12 = default(string), string custom13 = default(string), string custom14 = default(string), string custom15 = default(string), string custom16 = default(string), string custom17 = default(string), string custom18 = default(string), string custom19 = default(string), string custom2 = default(string), string custom20 = default(string), string custom3 = default(string), string custom4 = default(string), string custom5 = default(string), string custom6 = default(string), string custom7 = default(string), string custom8 = default(string), string custom9 = default(string), string deliverySlipNumber = default(string), string description = default(string), string expenseTypeCode = default(string), string isMatched = default(string), string lineItemId = default(string), string lineItemIsTestUser = default(string), string matchedPurchaseOrderLineItemId = default(string), string purchaseOrderNumber = default(string), string quantity = default(string), string requestedLineItemAmount = default(string), string requestLineItemNumber = default(string), string shipFromPostalCode = default(string), string shipToPostalCode = default(string), string supplierPartId = default(string), string tax = default(string), string taxCode = default(string), string taxCode2 = default(string), string taxCode3 = default(string), string taxCode4 = default(string), string totalPrice = default(string), string unitOfMeasure = default(string), string unitPrice = default(string), string vatAmount = default(string), string vatAmountFour = default(string), string vatAmountThree = default(string), string vatAmountTwo = default(string), string vatRate = default(string), string vatRateFour = default(string), string vatRateThree = default(string), string vatRateTwo = default(string))
        {
            this.Allocations = allocations;
            this.AllocationStatus = allocationStatus;
            this.AmountWithoutVat = amountWithoutVat;
            this.ApprovedLineItemAmount = approvedLineItemAmount;
            this.Custom1 = custom1;
            this.Custom10 = custom10;
            this.Custom11 = custom11;
            this.Custom12 = custom12;
            this.Custom13 = custom13;
            this.Custom14 = custom14;
            this.Custom15 = custom15;
            this.Custom16 = custom16;
            this.Custom17 = custom17;
            this.Custom18 = custom18;
            this.Custom19 = custom19;
            this.Custom2 = custom2;
            this.Custom20 = custom20;
            this.Custom3 = custom3;
            this.Custom4 = custom4;
            this.Custom5 = custom5;
            this.Custom6 = custom6;
            this.Custom7 = custom7;
            this.Custom8 = custom8;
            this.Custom9 = custom9;
            this.DeliverySlipNumber = deliverySlipNumber;
            this.Description = description;
            this.ExpenseTypeCode = expenseTypeCode;
            this.IsMatched = isMatched;
            this.LineItemId = lineItemId;
            this.LineItemIsTestUser = lineItemIsTestUser;
            this.MatchedPurchaseOrderLineItemId = matchedPurchaseOrderLineItemId;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.Quantity = quantity;
            this.RequestedLineItemAmount = requestedLineItemAmount;
            this.RequestLineItemNumber = requestLineItemNumber;
            this.ShipFromPostalCode = shipFromPostalCode;
            this.ShipToPostalCode = shipToPostalCode;
            this.SupplierPartId = supplierPartId;
            this.Tax = tax;
            this.TaxCode = taxCode;
            this.TaxCode2 = taxCode2;
            this.TaxCode3 = taxCode3;
            this.TaxCode4 = taxCode4;
            this.TotalPrice = totalPrice;
            this.UnitOfMeasure = unitOfMeasure;
            this.UnitPrice = unitPrice;
            this.VatAmount = vatAmount;
            this.VatAmountFour = vatAmountFour;
            this.VatAmountThree = vatAmountThree;
            this.VatAmountTwo = vatAmountTwo;
            this.VatRate = vatRate;
            this.VatRateFour = vatRateFour;
            this.VatRateThree = vatRateThree;
            this.VatRateTwo = vatRateTwo;
        }

        /// <summary>
        /// Gets or Sets Allocations
        /// </summary>
        [DataMember(Name = "Allocations", EmitDefaultValue = false)]
        public List<Allocation> Allocations { get; set; }

        /// <summary>
        /// Current amount of allocation performed on the Request Line Item (accepted values: None, Partial, Full).
        /// </summary>
        /// <value>Current amount of allocation performed on the Request Line Item (accepted values: None, Partial, Full).</value>
        [DataMember(Name = "AllocationStatus", EmitDefaultValue = false)]
        public string AllocationStatus { get; set; }

        /// <summary>
        /// The net amount of the line item (excluding VAT).
        /// </summary>
        /// <value>The net amount of the line item (excluding VAT).</value>
        [DataMember(Name = "AmountWithoutVat", EmitDefaultValue = false)]
        public string AmountWithoutVat { get; set; }

        /// <summary>
        /// The approved amount of the line item.
        /// </summary>
        /// <value>The approved amount of the line item.</value>
        [DataMember(Name = "ApprovedLineItemAmount", EmitDefaultValue = false)]
        public string ApprovedLineItemAmount { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom1", EmitDefaultValue = false)]
        public string Custom1 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom10", EmitDefaultValue = false)]
        public string Custom10 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom11", EmitDefaultValue = false)]
        public string Custom11 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom12", EmitDefaultValue = false)]
        public string Custom12 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom13", EmitDefaultValue = false)]
        public string Custom13 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom14", EmitDefaultValue = false)]
        public string Custom14 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom15", EmitDefaultValue = false)]
        public string Custom15 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom16", EmitDefaultValue = false)]
        public string Custom16 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom17", EmitDefaultValue = false)]
        public string Custom17 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom18", EmitDefaultValue = false)]
        public string Custom18 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom19", EmitDefaultValue = false)]
        public string Custom19 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom2", EmitDefaultValue = false)]
        public string Custom2 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom20", EmitDefaultValue = false)]
        public string Custom20 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom3", EmitDefaultValue = false)]
        public string Custom3 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom4", EmitDefaultValue = false)]
        public string Custom4 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom5", EmitDefaultValue = false)]
        public string Custom5 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom6", EmitDefaultValue = false)]
        public string Custom6 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom7", EmitDefaultValue = false)]
        public string Custom7 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom8", EmitDefaultValue = false)]
        public string Custom8 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom9", EmitDefaultValue = false)]
        public string Custom9 { get; set; }

        /// <summary>
        /// The delivery slip number associated with receiving receipt.
        /// </summary>
        /// <value>The delivery slip number associated with receiving receipt.</value>
        [DataMember(Name = "DeliverySlipNumber", EmitDefaultValue = false)]
        public string DeliverySlipNumber { get; set; }

        /// <summary>
        /// Brief overview of the good or service ordered.
        /// </summary>
        /// <value>Brief overview of the good or service ordered.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A code which indicates the Expense Type for the Line Item.
        /// </summary>
        /// <value>A code which indicates the Expense Type for the Line Item.</value>
        [DataMember(Name = "ExpenseTypeCode", EmitDefaultValue = false)]
        public string ExpenseTypeCode { get; set; }

        /// <summary>
        /// Indication that the Payment Request Line Item is associated to a Purchase Order Line Item (this is a true/false).
        /// </summary>
        /// <value>Indication that the Payment Request Line Item is associated to a Purchase Order Line Item (this is a true/false).</value>
        [DataMember(Name = "IsMatched", EmitDefaultValue = false)]
        public string IsMatched { get; set; }

        /// <summary>
        /// The identifier of the payment request line item. The ID is only guaranteed to be unique for a given payment request.
        /// </summary>
        /// <value>The identifier of the payment request line item. The ID is only guaranteed to be unique for a given payment request.</value>
        [DataMember(Name = "LineItemId", EmitDefaultValue = false)]
        public string LineItemId { get; set; }

        /// <summary>
        /// Indication that the Allocation record was created by a test user (this is a true/false).
        /// </summary>
        /// <value>Indication that the Allocation record was created by a test user (this is a true/false).</value>
        [DataMember(Name = "LineItemIsTestUser", EmitDefaultValue = false)]
        public string LineItemIsTestUser { get; set; }

        /// <summary>
        /// The identifier of the purchase order line item to which the payment request line item is matched (if any).
        /// </summary>
        /// <value>The identifier of the purchase order line item to which the payment request line item is matched (if any).</value>
        [DataMember(Name = "MatchedPurchaseOrderLineItemId", EmitDefaultValue = false)]
        public string MatchedPurchaseOrderLineItemId { get; set; }

        /// <summary>
        /// The identifier of the purchase order containing the line item to which the payment request line item is matched (if any).
        /// </summary>
        /// <value>The identifier of the purchase order containing the line item to which the payment request line item is matched (if any).</value>
        [DataMember(Name = "PurchaseOrderNumber", EmitDefaultValue = false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Total number of goods or services ordered.
        /// </summary>
        /// <value>Total number of goods or services ordered.</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// The requested amount of the line item.
        /// </summary>
        /// <value>The requested amount of the line item.</value>
        [DataMember(Name = "RequestedLineItemAmount", EmitDefaultValue = false)]
        public string RequestedLineItemAmount { get; set; }

        /// <summary>
        /// The relative location of the Line Item in relation to other Line Items in the Payment Request.
        /// </summary>
        /// <value>The relative location of the Line Item in relation to other Line Items in the Payment Request.</value>
        [DataMember(Name = "RequestLineItemNumber", EmitDefaultValue = false)]
        public string RequestLineItemNumber { get; set; }

        /// <summary>
        /// The postal code the good or service was shipped from.
        /// </summary>
        /// <value>The postal code the good or service was shipped from.</value>
        [DataMember(Name = "ShipFromPostalCode", EmitDefaultValue = false)]
        public string ShipFromPostalCode { get; set; }

        /// <summary>
        /// The postal code the good or service will be shipped to.
        /// </summary>
        /// <value>The postal code the good or service will be shipped to.</value>
        [DataMember(Name = "ShipToPostalCode", EmitDefaultValue = false)]
        public string ShipToPostalCode { get; set; }

        /// <summary>
        /// The unique identifier provided by the supplier that is associated with the good or service.
        /// </summary>
        /// <value>The unique identifier provided by the supplier that is associated with the good or service.</value>
        [DataMember(Name = "SupplierPartId", EmitDefaultValue = false)]
        public string SupplierPartId { get; set; }

        /// <summary>
        /// The tax associated with the line item.
        /// </summary>
        /// <value>The tax associated with the line item.</value>
        [DataMember(Name = "Tax", EmitDefaultValue = false)]
        public string Tax { get; set; }

        /// <summary>
        /// The Tax Code  assigned for the Line Item, based on the Tax Setting.
        /// </summary>
        /// <value>The Tax Code  assigned for the Line Item, based on the Tax Setting.</value>
        [DataMember(Name = "TaxCode", EmitDefaultValue = false)]
        public string TaxCode { get; set; }

        /// <summary>
        /// The Tax Code 2 assigned for the Line Item, based on the Tax Setting.
        /// </summary>
        /// <value>The Tax Code 2 assigned for the Line Item, based on the Tax Setting.</value>
        [DataMember(Name = "TaxCode2", EmitDefaultValue = false)]
        public string TaxCode2 { get; set; }

        /// <summary>
        /// The Tax Code 3 assigned for the Line Item, based on the Tax Setting.
        /// </summary>
        /// <value>The Tax Code 3 assigned for the Line Item, based on the Tax Setting.</value>
        [DataMember(Name = "TaxCode3", EmitDefaultValue = false)]
        public string TaxCode3 { get; set; }

        /// <summary>
        /// The Tax Code 4 assigned for the Line Item, based on the Tax Setting.
        /// </summary>
        /// <value>The Tax Code 4 assigned for the Line Item, based on the Tax Setting.</value>
        [DataMember(Name = "TaxCode4", EmitDefaultValue = false)]
        public string TaxCode4 { get; set; }

        /// <summary>
        /// The total amount of the line item.
        /// </summary>
        /// <value>The total amount of the line item.</value>
        [DataMember(Name = "TotalPrice", EmitDefaultValue = false)]
        public string TotalPrice { get; set; }

        /// <summary>
        /// The code for the measurement unit used to quantify the good or service. Use GET /invoice/localizeddata to look up codes and descriptions.
        /// </summary>
        /// <value>The code for the measurement unit used to quantify the good or service. Use GET /invoice/localizeddata to look up codes and descriptions.</value>
        [DataMember(Name = "UnitOfMeasure", EmitDefaultValue = false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The cost for a single unit of the line item good or service.
        /// </summary>
        /// <value>The cost for a single unit of the line item good or service.</value>
        [DataMember(Name = "UnitPrice", EmitDefaultValue = false)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// The amount of VAT 1 included in the line item total.
        /// </summary>
        /// <value>The amount of VAT 1 included in the line item total.</value>
        [DataMember(Name = "VatAmount", EmitDefaultValue = false)]
        public string VatAmount { get; set; }

        /// <summary>
        /// The amount of VAT 4 included in the line item total.
        /// </summary>
        /// <value>The amount of VAT 4 included in the line item total.</value>
        [DataMember(Name = "VatAmountFour", EmitDefaultValue = false)]
        public string VatAmountFour { get; set; }

        /// <summary>
        /// The amount of VAT 3 included in the line item total.
        /// </summary>
        /// <value>The amount of VAT 3 included in the line item total.</value>
        [DataMember(Name = "VatAmountThree", EmitDefaultValue = false)]
        public string VatAmountThree { get; set; }

        /// <summary>
        /// The amount of VAT 2 included in the line item total.
        /// </summary>
        /// <value>The amount of VAT 2 included in the line item total.</value>
        [DataMember(Name = "VatAmountTwo", EmitDefaultValue = false)]
        public string VatAmountTwo { get; set; }

        /// <summary>
        /// The VAT rate 1 applied to the net line item total.
        /// </summary>
        /// <value>The VAT rate 1 applied to the net line item total.</value>
        [DataMember(Name = "VatRate", EmitDefaultValue = false)]
        public string VatRate { get; set; }

        /// <summary>
        /// The VAT rate 4 applied to the net line item total.
        /// </summary>
        /// <value>The VAT rate 4 applied to the net line item total.</value>
        [DataMember(Name = "VatRateFour", EmitDefaultValue = false)]
        public string VatRateFour { get; set; }

        /// <summary>
        /// The VAT rate 3 applied to the net line item total.
        /// </summary>
        /// <value>The VAT rate 3 applied to the net line item total.</value>
        [DataMember(Name = "VatRateThree", EmitDefaultValue = false)]
        public string VatRateThree { get; set; }

        /// <summary>
        /// The VAT rate 2 applied to the net line item total.
        /// </summary>
        /// <value>The VAT rate 2 applied to the net line item total.</value>
        [DataMember(Name = "VatRateTwo", EmitDefaultValue = false)]
        public string VatRateTwo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  Allocations: ").Append(Allocations).Append("\n");
            sb.Append("  AllocationStatus: ").Append(AllocationStatus).Append("\n");
            sb.Append("  AmountWithoutVat: ").Append(AmountWithoutVat).Append("\n");
            sb.Append("  ApprovedLineItemAmount: ").Append(ApprovedLineItemAmount).Append("\n");
            sb.Append("  Custom1: ").Append(Custom1).Append("\n");
            sb.Append("  Custom10: ").Append(Custom10).Append("\n");
            sb.Append("  Custom11: ").Append(Custom11).Append("\n");
            sb.Append("  Custom12: ").Append(Custom12).Append("\n");
            sb.Append("  Custom13: ").Append(Custom13).Append("\n");
            sb.Append("  Custom14: ").Append(Custom14).Append("\n");
            sb.Append("  Custom15: ").Append(Custom15).Append("\n");
            sb.Append("  Custom16: ").Append(Custom16).Append("\n");
            sb.Append("  Custom17: ").Append(Custom17).Append("\n");
            sb.Append("  Custom18: ").Append(Custom18).Append("\n");
            sb.Append("  Custom19: ").Append(Custom19).Append("\n");
            sb.Append("  Custom2: ").Append(Custom2).Append("\n");
            sb.Append("  Custom20: ").Append(Custom20).Append("\n");
            sb.Append("  Custom3: ").Append(Custom3).Append("\n");
            sb.Append("  Custom4: ").Append(Custom4).Append("\n");
            sb.Append("  Custom5: ").Append(Custom5).Append("\n");
            sb.Append("  Custom6: ").Append(Custom6).Append("\n");
            sb.Append("  Custom7: ").Append(Custom7).Append("\n");
            sb.Append("  Custom8: ").Append(Custom8).Append("\n");
            sb.Append("  Custom9: ").Append(Custom9).Append("\n");
            sb.Append("  DeliverySlipNumber: ").Append(DeliverySlipNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpenseTypeCode: ").Append(ExpenseTypeCode).Append("\n");
            sb.Append("  IsMatched: ").Append(IsMatched).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  LineItemIsTestUser: ").Append(LineItemIsTestUser).Append("\n");
            sb.Append("  MatchedPurchaseOrderLineItemId: ").Append(MatchedPurchaseOrderLineItemId).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RequestedLineItemAmount: ").Append(RequestedLineItemAmount).Append("\n");
            sb.Append("  RequestLineItemNumber: ").Append(RequestLineItemNumber).Append("\n");
            sb.Append("  ShipFromPostalCode: ").Append(ShipFromPostalCode).Append("\n");
            sb.Append("  ShipToPostalCode: ").Append(ShipToPostalCode).Append("\n");
            sb.Append("  SupplierPartId: ").Append(SupplierPartId).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxCode2: ").Append(TaxCode2).Append("\n");
            sb.Append("  TaxCode3: ").Append(TaxCode3).Append("\n");
            sb.Append("  TaxCode4: ").Append(TaxCode4).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  VatAmountFour: ").Append(VatAmountFour).Append("\n");
            sb.Append("  VatAmountThree: ").Append(VatAmountThree).Append("\n");
            sb.Append("  VatAmountTwo: ").Append(VatAmountTwo).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  VatRateFour: ").Append(VatRateFour).Append("\n");
            sb.Append("  VatRateThree: ").Append(VatRateThree).Append("\n");
            sb.Append("  VatRateTwo: ").Append(VatRateTwo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineItem);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Allocations == input.Allocations ||
                    (this.Allocations != null &&
                    this.Allocations.Equals(input.Allocations))
                ) &&
                (
                    this.AllocationStatus == input.AllocationStatus ||
                    (this.AllocationStatus != null &&
                    this.AllocationStatus.Equals(input.AllocationStatus))
                ) &&
                (
                    this.AmountWithoutVat == input.AmountWithoutVat ||
                    (this.AmountWithoutVat != null &&
                    this.AmountWithoutVat.Equals(input.AmountWithoutVat))
                ) &&
                (
                    this.ApprovedLineItemAmount == input.ApprovedLineItemAmount ||
                    (this.ApprovedLineItemAmount != null &&
                    this.ApprovedLineItemAmount.Equals(input.ApprovedLineItemAmount))
                ) &&
                (
                    this.Custom1 == input.Custom1 ||
                    (this.Custom1 != null &&
                    this.Custom1.Equals(input.Custom1))
                ) &&
                (
                    this.Custom10 == input.Custom10 ||
                    (this.Custom10 != null &&
                    this.Custom10.Equals(input.Custom10))
                ) &&
                (
                    this.Custom11 == input.Custom11 ||
                    (this.Custom11 != null &&
                    this.Custom11.Equals(input.Custom11))
                ) &&
                (
                    this.Custom12 == input.Custom12 ||
                    (this.Custom12 != null &&
                    this.Custom12.Equals(input.Custom12))
                ) &&
                (
                    this.Custom13 == input.Custom13 ||
                    (this.Custom13 != null &&
                    this.Custom13.Equals(input.Custom13))
                ) &&
                (
                    this.Custom14 == input.Custom14 ||
                    (this.Custom14 != null &&
                    this.Custom14.Equals(input.Custom14))
                ) &&
                (
                    this.Custom15 == input.Custom15 ||
                    (this.Custom15 != null &&
                    this.Custom15.Equals(input.Custom15))
                ) &&
                (
                    this.Custom16 == input.Custom16 ||
                    (this.Custom16 != null &&
                    this.Custom16.Equals(input.Custom16))
                ) &&
                (
                    this.Custom17 == input.Custom17 ||
                    (this.Custom17 != null &&
                    this.Custom17.Equals(input.Custom17))
                ) &&
                (
                    this.Custom18 == input.Custom18 ||
                    (this.Custom18 != null &&
                    this.Custom18.Equals(input.Custom18))
                ) &&
                (
                    this.Custom19 == input.Custom19 ||
                    (this.Custom19 != null &&
                    this.Custom19.Equals(input.Custom19))
                ) &&
                (
                    this.Custom2 == input.Custom2 ||
                    (this.Custom2 != null &&
                    this.Custom2.Equals(input.Custom2))
                ) &&
                (
                    this.Custom20 == input.Custom20 ||
                    (this.Custom20 != null &&
                    this.Custom20.Equals(input.Custom20))
                ) &&
                (
                    this.Custom3 == input.Custom3 ||
                    (this.Custom3 != null &&
                    this.Custom3.Equals(input.Custom3))
                ) &&
                (
                    this.Custom4 == input.Custom4 ||
                    (this.Custom4 != null &&
                    this.Custom4.Equals(input.Custom4))
                ) &&
                (
                    this.Custom5 == input.Custom5 ||
                    (this.Custom5 != null &&
                    this.Custom5.Equals(input.Custom5))
                ) &&
                (
                    this.Custom6 == input.Custom6 ||
                    (this.Custom6 != null &&
                    this.Custom6.Equals(input.Custom6))
                ) &&
                (
                    this.Custom7 == input.Custom7 ||
                    (this.Custom7 != null &&
                    this.Custom7.Equals(input.Custom7))
                ) &&
                (
                    this.Custom8 == input.Custom8 ||
                    (this.Custom8 != null &&
                    this.Custom8.Equals(input.Custom8))
                ) &&
                (
                    this.Custom9 == input.Custom9 ||
                    (this.Custom9 != null &&
                    this.Custom9.Equals(input.Custom9))
                ) &&
                (
                    this.DeliverySlipNumber == input.DeliverySlipNumber ||
                    (this.DeliverySlipNumber != null &&
                    this.DeliverySlipNumber.Equals(input.DeliverySlipNumber))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.ExpenseTypeCode == input.ExpenseTypeCode ||
                    (this.ExpenseTypeCode != null &&
                    this.ExpenseTypeCode.Equals(input.ExpenseTypeCode))
                ) &&
                (
                    this.IsMatched == input.IsMatched ||
                    (this.IsMatched != null &&
                    this.IsMatched.Equals(input.IsMatched))
                ) &&
                (
                    this.LineItemId == input.LineItemId ||
                    (this.LineItemId != null &&
                    this.LineItemId.Equals(input.LineItemId))
                ) &&
                (
                    this.LineItemIsTestUser == input.LineItemIsTestUser ||
                    (this.LineItemIsTestUser != null &&
                    this.LineItemIsTestUser.Equals(input.LineItemIsTestUser))
                ) &&
                (
                    this.MatchedPurchaseOrderLineItemId == input.MatchedPurchaseOrderLineItemId ||
                    (this.MatchedPurchaseOrderLineItemId != null &&
                    this.MatchedPurchaseOrderLineItemId.Equals(input.MatchedPurchaseOrderLineItemId))
                ) &&
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.RequestedLineItemAmount == input.RequestedLineItemAmount ||
                    (this.RequestedLineItemAmount != null &&
                    this.RequestedLineItemAmount.Equals(input.RequestedLineItemAmount))
                ) &&
                (
                    this.RequestLineItemNumber == input.RequestLineItemNumber ||
                    (this.RequestLineItemNumber != null &&
                    this.RequestLineItemNumber.Equals(input.RequestLineItemNumber))
                ) &&
                (
                    this.ShipFromPostalCode == input.ShipFromPostalCode ||
                    (this.ShipFromPostalCode != null &&
                    this.ShipFromPostalCode.Equals(input.ShipFromPostalCode))
                ) &&
                (
                    this.ShipToPostalCode == input.ShipToPostalCode ||
                    (this.ShipToPostalCode != null &&
                    this.ShipToPostalCode.Equals(input.ShipToPostalCode))
                ) &&
                (
                    this.SupplierPartId == input.SupplierPartId ||
                    (this.SupplierPartId != null &&
                    this.SupplierPartId.Equals(input.SupplierPartId))
                ) &&
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) &&
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) &&
                (
                    this.TaxCode2 == input.TaxCode2 ||
                    (this.TaxCode2 != null &&
                    this.TaxCode2.Equals(input.TaxCode2))
                ) &&
                (
                    this.TaxCode3 == input.TaxCode3 ||
                    (this.TaxCode3 != null &&
                    this.TaxCode3.Equals(input.TaxCode3))
                ) &&
                (
                    this.TaxCode4 == input.TaxCode4 ||
                    (this.TaxCode4 != null &&
                    this.TaxCode4.Equals(input.TaxCode4))
                ) &&
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) &&
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) &&
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) &&
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) &&
                (
                    this.VatAmountFour == input.VatAmountFour ||
                    (this.VatAmountFour != null &&
                    this.VatAmountFour.Equals(input.VatAmountFour))
                ) &&
                (
                    this.VatAmountThree == input.VatAmountThree ||
                    (this.VatAmountThree != null &&
                    this.VatAmountThree.Equals(input.VatAmountThree))
                ) &&
                (
                    this.VatAmountTwo == input.VatAmountTwo ||
                    (this.VatAmountTwo != null &&
                    this.VatAmountTwo.Equals(input.VatAmountTwo))
                ) &&
                (
                    this.VatRate == input.VatRate ||
                    (this.VatRate != null &&
                    this.VatRate.Equals(input.VatRate))
                ) &&
                (
                    this.VatRateFour == input.VatRateFour ||
                    (this.VatRateFour != null &&
                    this.VatRateFour.Equals(input.VatRateFour))
                ) &&
                (
                    this.VatRateThree == input.VatRateThree ||
                    (this.VatRateThree != null &&
                    this.VatRateThree.Equals(input.VatRateThree))
                ) &&
                (
                    this.VatRateTwo == input.VatRateTwo ||
                    (this.VatRateTwo != null &&
                    this.VatRateTwo.Equals(input.VatRateTwo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Allocations != null)
                    hashCode = hashCode * 59 + this.Allocations.GetHashCode();
                if (this.AllocationStatus != null)
                    hashCode = hashCode * 59 + this.AllocationStatus.GetHashCode();
                if (this.AmountWithoutVat != null)
                    hashCode = hashCode * 59 + this.AmountWithoutVat.GetHashCode();
                if (this.ApprovedLineItemAmount != null)
                    hashCode = hashCode * 59 + this.ApprovedLineItemAmount.GetHashCode();
                if (this.Custom1 != null)
                    hashCode = hashCode * 59 + this.Custom1.GetHashCode();
                if (this.Custom10 != null)
                    hashCode = hashCode * 59 + this.Custom10.GetHashCode();
                if (this.Custom11 != null)
                    hashCode = hashCode * 59 + this.Custom11.GetHashCode();
                if (this.Custom12 != null)
                    hashCode = hashCode * 59 + this.Custom12.GetHashCode();
                if (this.Custom13 != null)
                    hashCode = hashCode * 59 + this.Custom13.GetHashCode();
                if (this.Custom14 != null)
                    hashCode = hashCode * 59 + this.Custom14.GetHashCode();
                if (this.Custom15 != null)
                    hashCode = hashCode * 59 + this.Custom15.GetHashCode();
                if (this.Custom16 != null)
                    hashCode = hashCode * 59 + this.Custom16.GetHashCode();
                if (this.Custom17 != null)
                    hashCode = hashCode * 59 + this.Custom17.GetHashCode();
                if (this.Custom18 != null)
                    hashCode = hashCode * 59 + this.Custom18.GetHashCode();
                if (this.Custom19 != null)
                    hashCode = hashCode * 59 + this.Custom19.GetHashCode();
                if (this.Custom2 != null)
                    hashCode = hashCode * 59 + this.Custom2.GetHashCode();
                if (this.Custom20 != null)
                    hashCode = hashCode * 59 + this.Custom20.GetHashCode();
                if (this.Custom3 != null)
                    hashCode = hashCode * 59 + this.Custom3.GetHashCode();
                if (this.Custom4 != null)
                    hashCode = hashCode * 59 + this.Custom4.GetHashCode();
                if (this.Custom5 != null)
                    hashCode = hashCode * 59 + this.Custom5.GetHashCode();
                if (this.Custom6 != null)
                    hashCode = hashCode * 59 + this.Custom6.GetHashCode();
                if (this.Custom7 != null)
                    hashCode = hashCode * 59 + this.Custom7.GetHashCode();
                if (this.Custom8 != null)
                    hashCode = hashCode * 59 + this.Custom8.GetHashCode();
                if (this.Custom9 != null)
                    hashCode = hashCode * 59 + this.Custom9.GetHashCode();
                if (this.DeliverySlipNumber != null)
                    hashCode = hashCode * 59 + this.DeliverySlipNumber.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExpenseTypeCode != null)
                    hashCode = hashCode * 59 + this.ExpenseTypeCode.GetHashCode();
                if (this.IsMatched != null)
                    hashCode = hashCode * 59 + this.IsMatched.GetHashCode();
                if (this.LineItemId != null)
                    hashCode = hashCode * 59 + this.LineItemId.GetHashCode();
                if (this.LineItemIsTestUser != null)
                    hashCode = hashCode * 59 + this.LineItemIsTestUser.GetHashCode();
                if (this.MatchedPurchaseOrderLineItemId != null)
                    hashCode = hashCode * 59 + this.MatchedPurchaseOrderLineItemId.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RequestedLineItemAmount != null)
                    hashCode = hashCode * 59 + this.RequestedLineItemAmount.GetHashCode();
                if (this.RequestLineItemNumber != null)
                    hashCode = hashCode * 59 + this.RequestLineItemNumber.GetHashCode();
                if (this.ShipFromPostalCode != null)
                    hashCode = hashCode * 59 + this.ShipFromPostalCode.GetHashCode();
                if (this.ShipToPostalCode != null)
                    hashCode = hashCode * 59 + this.ShipToPostalCode.GetHashCode();
                if (this.SupplierPartId != null)
                    hashCode = hashCode * 59 + this.SupplierPartId.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.TaxCode != null)
                    hashCode = hashCode * 59 + this.TaxCode.GetHashCode();
                if (this.TaxCode2 != null)
                    hashCode = hashCode * 59 + this.TaxCode2.GetHashCode();
                if (this.TaxCode3 != null)
                    hashCode = hashCode * 59 + this.TaxCode3.GetHashCode();
                if (this.TaxCode4 != null)
                    hashCode = hashCode * 59 + this.TaxCode4.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.VatAmount != null)
                    hashCode = hashCode * 59 + this.VatAmount.GetHashCode();
                if (this.VatAmountFour != null)
                    hashCode = hashCode * 59 + this.VatAmountFour.GetHashCode();
                if (this.VatAmountThree != null)
                    hashCode = hashCode * 59 + this.VatAmountThree.GetHashCode();
                if (this.VatAmountTwo != null)
                    hashCode = hashCode * 59 + this.VatAmountTwo.GetHashCode();
                if (this.VatRate != null)
                    hashCode = hashCode * 59 + this.VatRate.GetHashCode();
                if (this.VatRateFour != null)
                    hashCode = hashCode * 59 + this.VatRateFour.GetHashCode();
                if (this.VatRateThree != null)
                    hashCode = hashCode * 59 + this.VatRateThree.GetHashCode();
                if (this.VatRateTwo != null)
                    hashCode = hashCode * 59 + this.VatRateTwo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
