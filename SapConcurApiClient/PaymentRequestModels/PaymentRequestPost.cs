/* 
 * Payment Request
 *
 * A payment request is a request for payment (partial or full) of an invoice. This API provides methods to create or update a payment request, or view a payment request by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.PaymentRequestModels
{
    /// <summary>
    /// PaymentRequestPost
    /// </summary>
    [DataContract]
    public partial class PaymentRequestPost : IEquatable<PaymentRequestPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestPost" /> class.
        /// </summary>
        /// <param name="amountWithoutVat">The net amount of the invoice (excluding VAT)..</param>
        /// <param name="buyerCostCenter">The company defined center responsible for the Payment Request..</param>
        /// <param name="checkNumber">Check number of the payment made to the vendor..</param>
        /// <param name="companyBillToAddressCode">The code which identifies the company location to which the vendor billed the invoice..</param>
        /// <param name="companyShipToAddressCode">The code which identifies the company location to which the vendor shipped items listed in the invoice..</param>
        /// <param name="countryCode">The country code..</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona..</param>
        /// <param name="custom01">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom02">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom03">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom04">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom05">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom06">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom07">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom08">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom09">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom10">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom11">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom12">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom13">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom14">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom15">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom16">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom17">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom18">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom19">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom20">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom21">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom22">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom23">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom24">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="dataSource">A code which indicates the method used to created the Payment Request. Use GET /invoice/localizeddata to translate the code into text..</param>
        /// <param name="deliverySlipNumber">The delivery slip number associated with receiving receipt..</param>
        /// <param name="description">User entered description of the Payment Request..</param>
        /// <param name="discountPercentage">The discount from the supplier if the discount terms are met..</param>
        /// <param name="discountTerms">The NET discount terms with a supplier when discounts apply..</param>
        /// <param name="employeeEmailAddress">The email address of the employee to whom the request should be assigned. Not evaluated if EmployeeLoginId or EmployeeId match an employee. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; PurchaseOrderNumber; ExternalPolicyId..</param>
        /// <param name="employeeId">The company ID of the employee to whom the request should be assigned. Has precedence over EmployeeEmail; not evaluated if EmployeeLoginId matches an employee. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId..</param>
        /// <param name="employeeLoginId">The login ID of the employee to whom the request should be assigned. Has precedence over EmployeeId and EmployeeEmail. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId..</param>
        /// <param name="externalPolicyId">The external policy ID of the Payment Request. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; EmployeeEmail; PurchaseOrderNumber..</param>
        /// <param name="invoiceAmount">User-entered value representing the total invoice amount, used to calculate amount remaining on the line item page..</param>
        /// <param name="invoiceDate">The date the Vendor issued the Invoice..</param>
        /// <param name="invoiceNumber">The Invoice Number from the vendor for the Payment Request..</param>
        /// <param name="invoiceReceivedDate">The date on which the invoice was received..</param>
        /// <param name="isEmergencyCheckRun">Is an emergency check run required(Y/N)..</param>
        /// <param name="isInvoiceConfirmed">Indicates if the Payment Request Invoice is confirmed or in a different status (true/false)..</param>
        /// <param name="ledgerCode">A code which indicates which company journal the Payment Request is assigned to. Use GET /invoice/localizeddata to obtain valid codes. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: EmployeeLoginId; EmployeeId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId..</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="name">The Payment Request Name..</param>
        /// <param name="notesToVendor">Information from the customer to the vendor for special requests or handling for the ordered good or service..</param>
        /// <param name="oB10BuyerId">A unique buyer account on the OB10 network..</param>
        /// <param name="oB10TransactionId">Unique Identifier for the PR transaction (generated by OB10)..</param>
        /// <param name="orgUnit01">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit02">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit03">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit04">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit05">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit06">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="paymentAdjustmentNotes">Notes to the vendor regarding the amount paid (underpayment due to damages, for example)..</param>
        /// <param name="paymentAmount">Represents the amount of the payment that will be/has been made for the Invoice..</param>
        /// <param name="paymentDueDate">The date the vendor needs to be paid by..</param>
        /// <param name="paymentTermsDays">This number, along with type of payment terms (example: NET), determine when the invoice is expected to be paid..</param>
        /// <param name="provincialTaxId">The Vendor Provincial Tax ID..</param>
        /// <param name="purchaseOrderId">The ID of the Purchase Order to which the Payment Request should be matched. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; EmployeeEmail; ExternalPolicyId..</param>
        /// <param name="receiptConfirmationType">A code which indicates the receipt confirmation type for this Payment Request (Invoice Confirmation, for example). Use GET /invoice/localizeddata to translate the code into text..</param>
        /// <param name="shippingAmount">The value for the Shipping Amount header field..</param>
        /// <param name="taxAmount">The value for the Tax Amount header field..</param>
        /// <param name="vatAmountFour">The amount of VAT included in the invoice total. (Fourth of four VAT amount fields available.).</param>
        /// <param name="vatAmountOne">The amount of VAT included in the invoice total. (First of four VAT amount fields available.).</param>
        /// <param name="vatAmountThree">The amount of VAT included in the invoice total. (Third of four VAT amount fields available.).</param>
        /// <param name="vatAmountTwo">The amount of VAT included in the invoice total. (Second of four VAT amount fields available.).</param>
        /// <param name="vatRateFour">The VAT rate applied to the net invoice total. (Should relate to the fourth VAT amount field.).</param>
        /// <param name="vatRateOne">The VAT rate applied to the net invoice total. (Should relate to the first VAT amount field.).</param>
        /// <param name="vatRateThree">The VAT rate applied to the net invoice total. (Should relate to the third VAT amount field.).</param>
        /// <param name="vatRateTwo">The VAT rate applied to the net invoice total. (Should relate to the second VAT amount field.).</param>
        /// <param name="vendorRemitToIdentifier">vendorRemitToIdentifier.</param>
        /// <param name="vendorShipFromAddressCode">The code which identifies the location from which the vendor shipped items listed in the invoice..</param>
        /// <param name="vendorTaxId">The Vendor Tax ID..</param>
        public PaymentRequestPost(string amountWithoutVat = default(string), string buyerCostCenter = default(string), string checkNumber = default(string), string companyBillToAddressCode = default(string), string companyShipToAddressCode = default(string), string countryCode = default(string), string currencyCode = default(string), string custom01 = default(string), string custom02 = default(string), string custom03 = default(string), string custom04 = default(string), string custom05 = default(string), string custom06 = default(string), string custom07 = default(string), string custom08 = default(string), string custom09 = default(string), string custom10 = default(string), string custom11 = default(string), string custom12 = default(string), string custom13 = default(string), string custom14 = default(string), string custom15 = default(string), string custom16 = default(string), string custom17 = default(string), string custom18 = default(string), string custom19 = default(string), string custom20 = default(string), string custom21 = default(string), string custom22 = default(string), string custom23 = default(string), string custom24 = default(string), string dataSource = default(string), string deliverySlipNumber = default(string), string description = default(string), string discountPercentage = default(string), string discountTerms = default(string), string employeeEmailAddress = default(string), string employeeId = default(string), string employeeLoginId = default(string), string externalPolicyId = default(string), string invoiceAmount = default(string), string invoiceDate = default(string), string invoiceNumber = default(string), string invoiceReceivedDate = default(string), string isEmergencyCheckRun = default(string), string isInvoiceConfirmed = default(string), string ledgerCode = default(string), PaymentRequestLineItemPost lineItems = default(PaymentRequestLineItemPost), string name = default(string), string notesToVendor = default(string), string oB10BuyerId = default(string), string oB10TransactionId = default(string), string orgUnit01 = default(string), string orgUnit02 = default(string), string orgUnit03 = default(string), string orgUnit04 = default(string), string orgUnit05 = default(string), string orgUnit06 = default(string), string paymentAdjustmentNotes = default(string), string paymentAmount = default(string), string paymentDueDate = default(string), string paymentTermsDays = default(string), string provincialTaxId = default(string), string purchaseOrderId = default(string), string receiptConfirmationType = default(string), string shippingAmount = default(string), string taxAmount = default(string), string vatAmountFour = default(string), string vatAmountOne = default(string), string vatAmountThree = default(string), string vatAmountTwo = default(string), string vatRateFour = default(string), string vatRateOne = default(string), string vatRateThree = default(string), string vatRateTwo = default(string), VendorIdentifier vendorRemitToIdentifier = default(VendorIdentifier), string vendorShipFromAddressCode = default(string), string vendorTaxId = default(string))
        {
            this.AmountWithoutVat = amountWithoutVat;
            this.BuyerCostCenter = buyerCostCenter;
            this.CheckNumber = checkNumber;
            this.CompanyBillToAddressCode = companyBillToAddressCode;
            this.CompanyShipToAddressCode = companyShipToAddressCode;
            this.CountryCode = countryCode;
            this.CurrencyCode = currencyCode;
            this.Custom01 = custom01;
            this.Custom02 = custom02;
            this.Custom03 = custom03;
            this.Custom04 = custom04;
            this.Custom05 = custom05;
            this.Custom06 = custom06;
            this.Custom07 = custom07;
            this.Custom08 = custom08;
            this.Custom09 = custom09;
            this.Custom10 = custom10;
            this.Custom11 = custom11;
            this.Custom12 = custom12;
            this.Custom13 = custom13;
            this.Custom14 = custom14;
            this.Custom15 = custom15;
            this.Custom16 = custom16;
            this.Custom17 = custom17;
            this.Custom18 = custom18;
            this.Custom19 = custom19;
            this.Custom20 = custom20;
            this.Custom21 = custom21;
            this.Custom22 = custom22;
            this.Custom23 = custom23;
            this.Custom24 = custom24;
            this.DataSource = dataSource;
            this.DeliverySlipNumber = deliverySlipNumber;
            this.Description = description;
            this.DiscountPercentage = discountPercentage;
            this.DiscountTerms = discountTerms;
            this.EmployeeEmailAddress = employeeEmailAddress;
            this.EmployeeId = employeeId;
            this.EmployeeLoginId = employeeLoginId;
            this.ExternalPolicyId = externalPolicyId;
            this.InvoiceAmount = invoiceAmount;
            this.InvoiceDate = invoiceDate;
            this.InvoiceNumber = invoiceNumber;
            this.InvoiceReceivedDate = invoiceReceivedDate;
            this.IsEmergencyCheckRun = isEmergencyCheckRun;
            this.IsInvoiceConfirmed = isInvoiceConfirmed;
            this.LedgerCode = ledgerCode;
            this.LineItems = lineItems;
            this.Name = name;
            this.NotesToVendor = notesToVendor;
            this.OB10BuyerId = oB10BuyerId;
            this.OB10TransactionId = oB10TransactionId;
            this.OrgUnit01 = orgUnit01;
            this.OrgUnit02 = orgUnit02;
            this.OrgUnit03 = orgUnit03;
            this.OrgUnit04 = orgUnit04;
            this.OrgUnit05 = orgUnit05;
            this.OrgUnit06 = orgUnit06;
            this.PaymentAdjustmentNotes = paymentAdjustmentNotes;
            this.PaymentAmount = paymentAmount;
            this.PaymentDueDate = paymentDueDate;
            this.PaymentTermsDays = paymentTermsDays;
            this.ProvincialTaxId = provincialTaxId;
            this.PurchaseOrderId = purchaseOrderId;
            this.ReceiptConfirmationType = receiptConfirmationType;
            this.ShippingAmount = shippingAmount;
            this.TaxAmount = taxAmount;
            this.VatAmountFour = vatAmountFour;
            this.VatAmountOne = vatAmountOne;
            this.VatAmountThree = vatAmountThree;
            this.VatAmountTwo = vatAmountTwo;
            this.VatRateFour = vatRateFour;
            this.VatRateOne = vatRateOne;
            this.VatRateThree = vatRateThree;
            this.VatRateTwo = vatRateTwo;
            this.VendorRemitToIdentifier = vendorRemitToIdentifier;
            this.VendorShipFromAddressCode = vendorShipFromAddressCode;
            this.VendorTaxId = vendorTaxId;
        }

        /// <summary>
        /// The net amount of the invoice (excluding VAT).
        /// </summary>
        /// <value>The net amount of the invoice (excluding VAT).</value>
        [DataMember(Name = "AmountWithoutVat", EmitDefaultValue = false)]
        public string AmountWithoutVat { get; set; }

        /// <summary>
        /// The company defined center responsible for the Payment Request.
        /// </summary>
        /// <value>The company defined center responsible for the Payment Request.</value>
        [DataMember(Name = "BuyerCostCenter", EmitDefaultValue = false)]
        public string BuyerCostCenter { get; set; }

        /// <summary>
        /// Check number of the payment made to the vendor.
        /// </summary>
        /// <value>Check number of the payment made to the vendor.</value>
        [DataMember(Name = "CheckNumber", EmitDefaultValue = false)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// The code which identifies the company location to which the vendor billed the invoice.
        /// </summary>
        /// <value>The code which identifies the company location to which the vendor billed the invoice.</value>
        [DataMember(Name = "CompanyBillToAddressCode", EmitDefaultValue = false)]
        public string CompanyBillToAddressCode { get; set; }

        /// <summary>
        /// The code which identifies the company location to which the vendor shipped items listed in the invoice.
        /// </summary>
        /// <value>The code which identifies the company location to which the vendor shipped items listed in the invoice.</value>
        [DataMember(Name = "CompanyShipToAddressCode", EmitDefaultValue = false)]
        public string CompanyShipToAddressCode { get; set; }

        /// <summary>
        /// The country code.
        /// </summary>
        /// <value>The country code.</value>
        [DataMember(Name = "CountryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona.
        /// </summary>
        /// <value>The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona.</value>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom01", EmitDefaultValue = false)]
        public string Custom01 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom02", EmitDefaultValue = false)]
        public string Custom02 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom03", EmitDefaultValue = false)]
        public string Custom03 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom04", EmitDefaultValue = false)]
        public string Custom04 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom05", EmitDefaultValue = false)]
        public string Custom05 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom06", EmitDefaultValue = false)]
        public string Custom06 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom07", EmitDefaultValue = false)]
        public string Custom07 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom08", EmitDefaultValue = false)]
        public string Custom08 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom09", EmitDefaultValue = false)]
        public string Custom09 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom10", EmitDefaultValue = false)]
        public string Custom10 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom11", EmitDefaultValue = false)]
        public string Custom11 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom12", EmitDefaultValue = false)]
        public string Custom12 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom13", EmitDefaultValue = false)]
        public string Custom13 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom14", EmitDefaultValue = false)]
        public string Custom14 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom15", EmitDefaultValue = false)]
        public string Custom15 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom16", EmitDefaultValue = false)]
        public string Custom16 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom17", EmitDefaultValue = false)]
        public string Custom17 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom18", EmitDefaultValue = false)]
        public string Custom18 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom19", EmitDefaultValue = false)]
        public string Custom19 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom20", EmitDefaultValue = false)]
        public string Custom20 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom21", EmitDefaultValue = false)]
        public string Custom21 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom22", EmitDefaultValue = false)]
        public string Custom22 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom23", EmitDefaultValue = false)]
        public string Custom23 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom24", EmitDefaultValue = false)]
        public string Custom24 { get; set; }

        /// <summary>
        /// A code which indicates the method used to created the Payment Request. Use GET /invoice/localizeddata to translate the code into text.
        /// </summary>
        /// <value>A code which indicates the method used to created the Payment Request. Use GET /invoice/localizeddata to translate the code into text.</value>
        [DataMember(Name = "DataSource", EmitDefaultValue = false)]
        public string DataSource { get; set; }

        /// <summary>
        /// The delivery slip number associated with receiving receipt.
        /// </summary>
        /// <value>The delivery slip number associated with receiving receipt.</value>
        [DataMember(Name = "DeliverySlipNumber", EmitDefaultValue = false)]
        public string DeliverySlipNumber { get; set; }

        /// <summary>
        /// User entered description of the Payment Request.
        /// </summary>
        /// <value>User entered description of the Payment Request.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The discount from the supplier if the discount terms are met.
        /// </summary>
        /// <value>The discount from the supplier if the discount terms are met.</value>
        [DataMember(Name = "DiscountPercentage", EmitDefaultValue = false)]
        public string DiscountPercentage { get; set; }

        /// <summary>
        /// The NET discount terms with a supplier when discounts apply.
        /// </summary>
        /// <value>The NET discount terms with a supplier when discounts apply.</value>
        [DataMember(Name = "DiscountTerms", EmitDefaultValue = false)]
        public string DiscountTerms { get; set; }

        /// <summary>
        /// The email address of the employee to whom the request should be assigned. Not evaluated if EmployeeLoginId or EmployeeId match an employee. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; PurchaseOrderNumber; ExternalPolicyId.
        /// </summary>
        /// <value>The email address of the employee to whom the request should be assigned. Not evaluated if EmployeeLoginId or EmployeeId match an employee. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; PurchaseOrderNumber; ExternalPolicyId.</value>
        [DataMember(Name = "EmployeeEmailAddress", EmitDefaultValue = false)]
        public string EmployeeEmailAddress { get; set; }

        /// <summary>
        /// The company ID of the employee to whom the request should be assigned. Has precedence over EmployeeEmail; not evaluated if EmployeeLoginId matches an employee. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId.
        /// </summary>
        /// <value>The company ID of the employee to whom the request should be assigned. Has precedence over EmployeeEmail; not evaluated if EmployeeLoginId matches an employee. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId.</value>
        [DataMember(Name = "EmployeeId", EmitDefaultValue = false)]
        public string EmployeeId { get; set; }

        /// <summary>
        /// The login ID of the employee to whom the request should be assigned. Has precedence over EmployeeId and EmployeeEmail. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId.
        /// </summary>
        /// <value>The login ID of the employee to whom the request should be assigned. Has precedence over EmployeeId and EmployeeEmail. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId.</value>
        [DataMember(Name = "EmployeeLoginId", EmitDefaultValue = false)]
        public string EmployeeLoginId { get; set; }

        /// <summary>
        /// The external policy ID of the Payment Request. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; EmployeeEmail; PurchaseOrderNumber.
        /// </summary>
        /// <value>The external policy ID of the Payment Request. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; EmployeeEmail; PurchaseOrderNumber.</value>
        [DataMember(Name = "ExternalPolicyId", EmitDefaultValue = false)]
        public string ExternalPolicyId { get; set; }

        /// <summary>
        /// User-entered value representing the total invoice amount, used to calculate amount remaining on the line item page.
        /// </summary>
        /// <value>User-entered value representing the total invoice amount, used to calculate amount remaining on the line item page.</value>
        [DataMember(Name = "InvoiceAmount", EmitDefaultValue = false)]
        public string InvoiceAmount { get; set; }

        /// <summary>
        /// The date the Vendor issued the Invoice.
        /// </summary>
        /// <value>The date the Vendor issued the Invoice.</value>
        [DataMember(Name = "InvoiceDate", EmitDefaultValue = false)]
        public string InvoiceDate { get; set; }

        /// <summary>
        /// The Invoice Number from the vendor for the Payment Request.
        /// </summary>
        /// <value>The Invoice Number from the vendor for the Payment Request.</value>
        [DataMember(Name = "InvoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The date on which the invoice was received.
        /// </summary>
        /// <value>The date on which the invoice was received.</value>
        [DataMember(Name = "InvoiceReceivedDate", EmitDefaultValue = false)]
        public string InvoiceReceivedDate { get; set; }

        /// <summary>
        /// Is an emergency check run required(Y/N).
        /// </summary>
        /// <value>Is an emergency check run required(Y/N).</value>
        [DataMember(Name = "IsEmergencyCheckRun", EmitDefaultValue = false)]
        public string IsEmergencyCheckRun { get; set; }

        /// <summary>
        /// Indicates if the Payment Request Invoice is confirmed or in a different status (true/false).
        /// </summary>
        /// <value>Indicates if the Payment Request Invoice is confirmed or in a different status (true/false).</value>
        [DataMember(Name = "IsInvoiceConfirmed", EmitDefaultValue = false)]
        public string IsInvoiceConfirmed { get; set; }

        /// <summary>
        /// A code which indicates which company journal the Payment Request is assigned to. Use GET /invoice/localizeddata to obtain valid codes. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: EmployeeLoginId; EmployeeId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId.
        /// </summary>
        /// <value>A code which indicates which company journal the Payment Request is assigned to. Use GET /invoice/localizeddata to obtain valid codes. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: EmployeeLoginId; EmployeeId; EmployeeEmail; PurchaseOrderNumber; ExternalPolicyId.</value>
        [DataMember(Name = "LedgerCode", EmitDefaultValue = false)]
        public string LedgerCode { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public PaymentRequestLineItemPost LineItems { get; set; }

        /// <summary>
        /// The Payment Request Name.
        /// </summary>
        /// <value>The Payment Request Name.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Information from the customer to the vendor for special requests or handling for the ordered good or service.
        /// </summary>
        /// <value>Information from the customer to the vendor for special requests or handling for the ordered good or service.</value>
        [DataMember(Name = "NotesToVendor", EmitDefaultValue = false)]
        public string NotesToVendor { get; set; }

        /// <summary>
        /// A unique buyer account on the OB10 network.
        /// </summary>
        /// <value>A unique buyer account on the OB10 network.</value>
        [DataMember(Name = "OB10BuyerId", EmitDefaultValue = false)]
        public string OB10BuyerId { get; set; }

        /// <summary>
        /// Unique Identifier for the PR transaction (generated by OB10).
        /// </summary>
        /// <value>Unique Identifier for the PR transaction (generated by OB10).</value>
        [DataMember(Name = "OB10TransactionId", EmitDefaultValue = false)]
        public string OB10TransactionId { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit01", EmitDefaultValue = false)]
        public string OrgUnit01 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit02", EmitDefaultValue = false)]
        public string OrgUnit02 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit03", EmitDefaultValue = false)]
        public string OrgUnit03 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit04", EmitDefaultValue = false)]
        public string OrgUnit04 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit05", EmitDefaultValue = false)]
        public string OrgUnit05 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit06", EmitDefaultValue = false)]
        public string OrgUnit06 { get; set; }

        /// <summary>
        /// Notes to the vendor regarding the amount paid (underpayment due to damages, for example).
        /// </summary>
        /// <value>Notes to the vendor regarding the amount paid (underpayment due to damages, for example).</value>
        [DataMember(Name = "PaymentAdjustmentNotes", EmitDefaultValue = false)]
        public string PaymentAdjustmentNotes { get; set; }

        /// <summary>
        /// Represents the amount of the payment that will be/has been made for the Invoice.
        /// </summary>
        /// <value>Represents the amount of the payment that will be/has been made for the Invoice.</value>
        [DataMember(Name = "PaymentAmount", EmitDefaultValue = false)]
        public string PaymentAmount { get; set; }

        /// <summary>
        /// The date the vendor needs to be paid by.
        /// </summary>
        /// <value>The date the vendor needs to be paid by.</value>
        [DataMember(Name = "PaymentDueDate", EmitDefaultValue = false)]
        public string PaymentDueDate { get; set; }

        /// <summary>
        /// This number, along with type of payment terms (example: NET), determine when the invoice is expected to be paid.
        /// </summary>
        /// <value>This number, along with type of payment terms (example: NET), determine when the invoice is expected to be paid.</value>
        [DataMember(Name = "PaymentTermsDays", EmitDefaultValue = false)]
        public string PaymentTermsDays { get; set; }

        /// <summary>
        /// The Vendor Provincial Tax ID.
        /// </summary>
        /// <value>The Vendor Provincial Tax ID.</value>
        [DataMember(Name = "ProvincialTaxId", EmitDefaultValue = false)]
        public string ProvincialTaxId { get; set; }

        /// <summary>
        /// The ID of the Purchase Order to which the Payment Request should be matched. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; EmployeeEmail; ExternalPolicyId.
        /// </summary>
        /// <value>The ID of the Purchase Order to which the Payment Request should be matched. This value is &lt;strong&gt;required&lt;/strong&gt; if none of the following are provided: LedgerCode, EmployeeLoginId, EmployeeId; EmployeeEmail; ExternalPolicyId.</value>
        [DataMember(Name = "PurchaseOrderId", EmitDefaultValue = false)]
        public string PurchaseOrderId { get; set; }

        /// <summary>
        /// A code which indicates the receipt confirmation type for this Payment Request (Invoice Confirmation, for example). Use GET /invoice/localizeddata to translate the code into text.
        /// </summary>
        /// <value>A code which indicates the receipt confirmation type for this Payment Request (Invoice Confirmation, for example). Use GET /invoice/localizeddata to translate the code into text.</value>
        [DataMember(Name = "ReceiptConfirmationType", EmitDefaultValue = false)]
        public string ReceiptConfirmationType { get; set; }

        /// <summary>
        /// The value for the Shipping Amount header field.
        /// </summary>
        /// <value>The value for the Shipping Amount header field.</value>
        [DataMember(Name = "ShippingAmount", EmitDefaultValue = false)]
        public string ShippingAmount { get; set; }

        /// <summary>
        /// The value for the Tax Amount header field.
        /// </summary>
        /// <value>The value for the Tax Amount header field.</value>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (Fourth of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (Fourth of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountFour", EmitDefaultValue = false)]
        public string VatAmountFour { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (First of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (First of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountOne", EmitDefaultValue = false)]
        public string VatAmountOne { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (Third of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (Third of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountThree", EmitDefaultValue = false)]
        public string VatAmountThree { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (Second of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (Second of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountTwo", EmitDefaultValue = false)]
        public string VatAmountTwo { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the fourth VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the fourth VAT amount field.)</value>
        [DataMember(Name = "VatRateFour", EmitDefaultValue = false)]
        public string VatRateFour { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the first VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the first VAT amount field.)</value>
        [DataMember(Name = "VatRateOne", EmitDefaultValue = false)]
        public string VatRateOne { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the third VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the third VAT amount field.)</value>
        [DataMember(Name = "VatRateThree", EmitDefaultValue = false)]
        public string VatRateThree { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the second VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the second VAT amount field.)</value>
        [DataMember(Name = "VatRateTwo", EmitDefaultValue = false)]
        public string VatRateTwo { get; set; }

        /// <summary>
        /// Gets or Sets VendorRemitToIdentifier
        /// </summary>
        [DataMember(Name = "VendorRemitToIdentifier", EmitDefaultValue = false)]
        public VendorIdentifier VendorRemitToIdentifier { get; set; }

        /// <summary>
        /// The code which identifies the location from which the vendor shipped items listed in the invoice.
        /// </summary>
        /// <value>The code which identifies the location from which the vendor shipped items listed in the invoice.</value>
        [DataMember(Name = "VendorShipFromAddressCode", EmitDefaultValue = false)]
        public string VendorShipFromAddressCode { get; set; }

        /// <summary>
        /// The Vendor Tax ID.
        /// </summary>
        /// <value>The Vendor Tax ID.</value>
        [DataMember(Name = "VendorTaxId", EmitDefaultValue = false)]
        public string VendorTaxId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequestPost {\n");
            sb.Append("  AmountWithoutVat: ").Append(AmountWithoutVat).Append("\n");
            sb.Append("  BuyerCostCenter: ").Append(BuyerCostCenter).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  CompanyBillToAddressCode: ").Append(CompanyBillToAddressCode).Append("\n");
            sb.Append("  CompanyShipToAddressCode: ").Append(CompanyShipToAddressCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Custom01: ").Append(Custom01).Append("\n");
            sb.Append("  Custom02: ").Append(Custom02).Append("\n");
            sb.Append("  Custom03: ").Append(Custom03).Append("\n");
            sb.Append("  Custom04: ").Append(Custom04).Append("\n");
            sb.Append("  Custom05: ").Append(Custom05).Append("\n");
            sb.Append("  Custom06: ").Append(Custom06).Append("\n");
            sb.Append("  Custom07: ").Append(Custom07).Append("\n");
            sb.Append("  Custom08: ").Append(Custom08).Append("\n");
            sb.Append("  Custom09: ").Append(Custom09).Append("\n");
            sb.Append("  Custom10: ").Append(Custom10).Append("\n");
            sb.Append("  Custom11: ").Append(Custom11).Append("\n");
            sb.Append("  Custom12: ").Append(Custom12).Append("\n");
            sb.Append("  Custom13: ").Append(Custom13).Append("\n");
            sb.Append("  Custom14: ").Append(Custom14).Append("\n");
            sb.Append("  Custom15: ").Append(Custom15).Append("\n");
            sb.Append("  Custom16: ").Append(Custom16).Append("\n");
            sb.Append("  Custom17: ").Append(Custom17).Append("\n");
            sb.Append("  Custom18: ").Append(Custom18).Append("\n");
            sb.Append("  Custom19: ").Append(Custom19).Append("\n");
            sb.Append("  Custom20: ").Append(Custom20).Append("\n");
            sb.Append("  Custom21: ").Append(Custom21).Append("\n");
            sb.Append("  Custom22: ").Append(Custom22).Append("\n");
            sb.Append("  Custom23: ").Append(Custom23).Append("\n");
            sb.Append("  Custom24: ").Append(Custom24).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  DeliverySlipNumber: ").Append(DeliverySlipNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  DiscountTerms: ").Append(DiscountTerms).Append("\n");
            sb.Append("  EmployeeEmailAddress: ").Append(EmployeeEmailAddress).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  EmployeeLoginId: ").Append(EmployeeLoginId).Append("\n");
            sb.Append("  ExternalPolicyId: ").Append(ExternalPolicyId).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceReceivedDate: ").Append(InvoiceReceivedDate).Append("\n");
            sb.Append("  IsEmergencyCheckRun: ").Append(IsEmergencyCheckRun).Append("\n");
            sb.Append("  IsInvoiceConfirmed: ").Append(IsInvoiceConfirmed).Append("\n");
            sb.Append("  LedgerCode: ").Append(LedgerCode).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotesToVendor: ").Append(NotesToVendor).Append("\n");
            sb.Append("  OB10BuyerId: ").Append(OB10BuyerId).Append("\n");
            sb.Append("  OB10TransactionId: ").Append(OB10TransactionId).Append("\n");
            sb.Append("  OrgUnit01: ").Append(OrgUnit01).Append("\n");
            sb.Append("  OrgUnit02: ").Append(OrgUnit02).Append("\n");
            sb.Append("  OrgUnit03: ").Append(OrgUnit03).Append("\n");
            sb.Append("  OrgUnit04: ").Append(OrgUnit04).Append("\n");
            sb.Append("  OrgUnit05: ").Append(OrgUnit05).Append("\n");
            sb.Append("  OrgUnit06: ").Append(OrgUnit06).Append("\n");
            sb.Append("  PaymentAdjustmentNotes: ").Append(PaymentAdjustmentNotes).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  PaymentTermsDays: ").Append(PaymentTermsDays).Append("\n");
            sb.Append("  ProvincialTaxId: ").Append(ProvincialTaxId).Append("\n");
            sb.Append("  PurchaseOrderId: ").Append(PurchaseOrderId).Append("\n");
            sb.Append("  ReceiptConfirmationType: ").Append(ReceiptConfirmationType).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  VatAmountFour: ").Append(VatAmountFour).Append("\n");
            sb.Append("  VatAmountOne: ").Append(VatAmountOne).Append("\n");
            sb.Append("  VatAmountThree: ").Append(VatAmountThree).Append("\n");
            sb.Append("  VatAmountTwo: ").Append(VatAmountTwo).Append("\n");
            sb.Append("  VatRateFour: ").Append(VatRateFour).Append("\n");
            sb.Append("  VatRateOne: ").Append(VatRateOne).Append("\n");
            sb.Append("  VatRateThree: ").Append(VatRateThree).Append("\n");
            sb.Append("  VatRateTwo: ").Append(VatRateTwo).Append("\n");
            sb.Append("  VendorRemitToIdentifier: ").Append(VendorRemitToIdentifier).Append("\n");
            sb.Append("  VendorShipFromAddressCode: ").Append(VendorShipFromAddressCode).Append("\n");
            sb.Append("  VendorTaxId: ").Append(VendorTaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequestPost);
        }

        /// <summary>
        /// Returns true if PaymentRequestPost instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequestPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequestPost input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AmountWithoutVat == input.AmountWithoutVat ||
                    (this.AmountWithoutVat != null &&
                    this.AmountWithoutVat.Equals(input.AmountWithoutVat))
                ) &&
                (
                    this.BuyerCostCenter == input.BuyerCostCenter ||
                    (this.BuyerCostCenter != null &&
                    this.BuyerCostCenter.Equals(input.BuyerCostCenter))
                ) &&
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) &&
                (
                    this.CompanyBillToAddressCode == input.CompanyBillToAddressCode ||
                    (this.CompanyBillToAddressCode != null &&
                    this.CompanyBillToAddressCode.Equals(input.CompanyBillToAddressCode))
                ) &&
                (
                    this.CompanyShipToAddressCode == input.CompanyShipToAddressCode ||
                    (this.CompanyShipToAddressCode != null &&
                    this.CompanyShipToAddressCode.Equals(input.CompanyShipToAddressCode))
                ) &&
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) &&
                (
                    this.Custom01 == input.Custom01 ||
                    (this.Custom01 != null &&
                    this.Custom01.Equals(input.Custom01))
                ) &&
                (
                    this.Custom02 == input.Custom02 ||
                    (this.Custom02 != null &&
                    this.Custom02.Equals(input.Custom02))
                ) &&
                (
                    this.Custom03 == input.Custom03 ||
                    (this.Custom03 != null &&
                    this.Custom03.Equals(input.Custom03))
                ) &&
                (
                    this.Custom04 == input.Custom04 ||
                    (this.Custom04 != null &&
                    this.Custom04.Equals(input.Custom04))
                ) &&
                (
                    this.Custom05 == input.Custom05 ||
                    (this.Custom05 != null &&
                    this.Custom05.Equals(input.Custom05))
                ) &&
                (
                    this.Custom06 == input.Custom06 ||
                    (this.Custom06 != null &&
                    this.Custom06.Equals(input.Custom06))
                ) &&
                (
                    this.Custom07 == input.Custom07 ||
                    (this.Custom07 != null &&
                    this.Custom07.Equals(input.Custom07))
                ) &&
                (
                    this.Custom08 == input.Custom08 ||
                    (this.Custom08 != null &&
                    this.Custom08.Equals(input.Custom08))
                ) &&
                (
                    this.Custom09 == input.Custom09 ||
                    (this.Custom09 != null &&
                    this.Custom09.Equals(input.Custom09))
                ) &&
                (
                    this.Custom10 == input.Custom10 ||
                    (this.Custom10 != null &&
                    this.Custom10.Equals(input.Custom10))
                ) &&
                (
                    this.Custom11 == input.Custom11 ||
                    (this.Custom11 != null &&
                    this.Custom11.Equals(input.Custom11))
                ) &&
                (
                    this.Custom12 == input.Custom12 ||
                    (this.Custom12 != null &&
                    this.Custom12.Equals(input.Custom12))
                ) &&
                (
                    this.Custom13 == input.Custom13 ||
                    (this.Custom13 != null &&
                    this.Custom13.Equals(input.Custom13))
                ) &&
                (
                    this.Custom14 == input.Custom14 ||
                    (this.Custom14 != null &&
                    this.Custom14.Equals(input.Custom14))
                ) &&
                (
                    this.Custom15 == input.Custom15 ||
                    (this.Custom15 != null &&
                    this.Custom15.Equals(input.Custom15))
                ) &&
                (
                    this.Custom16 == input.Custom16 ||
                    (this.Custom16 != null &&
                    this.Custom16.Equals(input.Custom16))
                ) &&
                (
                    this.Custom17 == input.Custom17 ||
                    (this.Custom17 != null &&
                    this.Custom17.Equals(input.Custom17))
                ) &&
                (
                    this.Custom18 == input.Custom18 ||
                    (this.Custom18 != null &&
                    this.Custom18.Equals(input.Custom18))
                ) &&
                (
                    this.Custom19 == input.Custom19 ||
                    (this.Custom19 != null &&
                    this.Custom19.Equals(input.Custom19))
                ) &&
                (
                    this.Custom20 == input.Custom20 ||
                    (this.Custom20 != null &&
                    this.Custom20.Equals(input.Custom20))
                ) &&
                (
                    this.Custom21 == input.Custom21 ||
                    (this.Custom21 != null &&
                    this.Custom21.Equals(input.Custom21))
                ) &&
                (
                    this.Custom22 == input.Custom22 ||
                    (this.Custom22 != null &&
                    this.Custom22.Equals(input.Custom22))
                ) &&
                (
                    this.Custom23 == input.Custom23 ||
                    (this.Custom23 != null &&
                    this.Custom23.Equals(input.Custom23))
                ) &&
                (
                    this.Custom24 == input.Custom24 ||
                    (this.Custom24 != null &&
                    this.Custom24.Equals(input.Custom24))
                ) &&
                (
                    this.DataSource == input.DataSource ||
                    (this.DataSource != null &&
                    this.DataSource.Equals(input.DataSource))
                ) &&
                (
                    this.DeliverySlipNumber == input.DeliverySlipNumber ||
                    (this.DeliverySlipNumber != null &&
                    this.DeliverySlipNumber.Equals(input.DeliverySlipNumber))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.DiscountPercentage == input.DiscountPercentage ||
                    (this.DiscountPercentage != null &&
                    this.DiscountPercentage.Equals(input.DiscountPercentage))
                ) &&
                (
                    this.DiscountTerms == input.DiscountTerms ||
                    (this.DiscountTerms != null &&
                    this.DiscountTerms.Equals(input.DiscountTerms))
                ) &&
                (
                    this.EmployeeEmailAddress == input.EmployeeEmailAddress ||
                    (this.EmployeeEmailAddress != null &&
                    this.EmployeeEmailAddress.Equals(input.EmployeeEmailAddress))
                ) &&
                (
                    this.EmployeeId == input.EmployeeId ||
                    (this.EmployeeId != null &&
                    this.EmployeeId.Equals(input.EmployeeId))
                ) &&
                (
                    this.EmployeeLoginId == input.EmployeeLoginId ||
                    (this.EmployeeLoginId != null &&
                    this.EmployeeLoginId.Equals(input.EmployeeLoginId))
                ) &&
                (
                    this.ExternalPolicyId == input.ExternalPolicyId ||
                    (this.ExternalPolicyId != null &&
                    this.ExternalPolicyId.Equals(input.ExternalPolicyId))
                ) &&
                (
                    this.InvoiceAmount == input.InvoiceAmount ||
                    (this.InvoiceAmount != null &&
                    this.InvoiceAmount.Equals(input.InvoiceAmount))
                ) &&
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) &&
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) &&
                (
                    this.InvoiceReceivedDate == input.InvoiceReceivedDate ||
                    (this.InvoiceReceivedDate != null &&
                    this.InvoiceReceivedDate.Equals(input.InvoiceReceivedDate))
                ) &&
                (
                    this.IsEmergencyCheckRun == input.IsEmergencyCheckRun ||
                    (this.IsEmergencyCheckRun != null &&
                    this.IsEmergencyCheckRun.Equals(input.IsEmergencyCheckRun))
                ) &&
                (
                    this.IsInvoiceConfirmed == input.IsInvoiceConfirmed ||
                    (this.IsInvoiceConfirmed != null &&
                    this.IsInvoiceConfirmed.Equals(input.IsInvoiceConfirmed))
                ) &&
                (
                    this.LedgerCode == input.LedgerCode ||
                    (this.LedgerCode != null &&
                    this.LedgerCode.Equals(input.LedgerCode))
                ) &&
                (
                    this.LineItems == input.LineItems ||
                    (this.LineItems != null &&
                    this.LineItems.Equals(input.LineItems))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.NotesToVendor == input.NotesToVendor ||
                    (this.NotesToVendor != null &&
                    this.NotesToVendor.Equals(input.NotesToVendor))
                ) &&
                (
                    this.OB10BuyerId == input.OB10BuyerId ||
                    (this.OB10BuyerId != null &&
                    this.OB10BuyerId.Equals(input.OB10BuyerId))
                ) &&
                (
                    this.OB10TransactionId == input.OB10TransactionId ||
                    (this.OB10TransactionId != null &&
                    this.OB10TransactionId.Equals(input.OB10TransactionId))
                ) &&
                (
                    this.OrgUnit01 == input.OrgUnit01 ||
                    (this.OrgUnit01 != null &&
                    this.OrgUnit01.Equals(input.OrgUnit01))
                ) &&
                (
                    this.OrgUnit02 == input.OrgUnit02 ||
                    (this.OrgUnit02 != null &&
                    this.OrgUnit02.Equals(input.OrgUnit02))
                ) &&
                (
                    this.OrgUnit03 == input.OrgUnit03 ||
                    (this.OrgUnit03 != null &&
                    this.OrgUnit03.Equals(input.OrgUnit03))
                ) &&
                (
                    this.OrgUnit04 == input.OrgUnit04 ||
                    (this.OrgUnit04 != null &&
                    this.OrgUnit04.Equals(input.OrgUnit04))
                ) &&
                (
                    this.OrgUnit05 == input.OrgUnit05 ||
                    (this.OrgUnit05 != null &&
                    this.OrgUnit05.Equals(input.OrgUnit05))
                ) &&
                (
                    this.OrgUnit06 == input.OrgUnit06 ||
                    (this.OrgUnit06 != null &&
                    this.OrgUnit06.Equals(input.OrgUnit06))
                ) &&
                (
                    this.PaymentAdjustmentNotes == input.PaymentAdjustmentNotes ||
                    (this.PaymentAdjustmentNotes != null &&
                    this.PaymentAdjustmentNotes.Equals(input.PaymentAdjustmentNotes))
                ) &&
                (
                    this.PaymentAmount == input.PaymentAmount ||
                    (this.PaymentAmount != null &&
                    this.PaymentAmount.Equals(input.PaymentAmount))
                ) &&
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) &&
                (
                    this.PaymentTermsDays == input.PaymentTermsDays ||
                    (this.PaymentTermsDays != null &&
                    this.PaymentTermsDays.Equals(input.PaymentTermsDays))
                ) &&
                (
                    this.ProvincialTaxId == input.ProvincialTaxId ||
                    (this.ProvincialTaxId != null &&
                    this.ProvincialTaxId.Equals(input.ProvincialTaxId))
                ) &&
                (
                    this.PurchaseOrderId == input.PurchaseOrderId ||
                    (this.PurchaseOrderId != null &&
                    this.PurchaseOrderId.Equals(input.PurchaseOrderId))
                ) &&
                (
                    this.ReceiptConfirmationType == input.ReceiptConfirmationType ||
                    (this.ReceiptConfirmationType != null &&
                    this.ReceiptConfirmationType.Equals(input.ReceiptConfirmationType))
                ) &&
                (
                    this.ShippingAmount == input.ShippingAmount ||
                    (this.ShippingAmount != null &&
                    this.ShippingAmount.Equals(input.ShippingAmount))
                ) &&
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) &&
                (
                    this.VatAmountFour == input.VatAmountFour ||
                    (this.VatAmountFour != null &&
                    this.VatAmountFour.Equals(input.VatAmountFour))
                ) &&
                (
                    this.VatAmountOne == input.VatAmountOne ||
                    (this.VatAmountOne != null &&
                    this.VatAmountOne.Equals(input.VatAmountOne))
                ) &&
                (
                    this.VatAmountThree == input.VatAmountThree ||
                    (this.VatAmountThree != null &&
                    this.VatAmountThree.Equals(input.VatAmountThree))
                ) &&
                (
                    this.VatAmountTwo == input.VatAmountTwo ||
                    (this.VatAmountTwo != null &&
                    this.VatAmountTwo.Equals(input.VatAmountTwo))
                ) &&
                (
                    this.VatRateFour == input.VatRateFour ||
                    (this.VatRateFour != null &&
                    this.VatRateFour.Equals(input.VatRateFour))
                ) &&
                (
                    this.VatRateOne == input.VatRateOne ||
                    (this.VatRateOne != null &&
                    this.VatRateOne.Equals(input.VatRateOne))
                ) &&
                (
                    this.VatRateThree == input.VatRateThree ||
                    (this.VatRateThree != null &&
                    this.VatRateThree.Equals(input.VatRateThree))
                ) &&
                (
                    this.VatRateTwo == input.VatRateTwo ||
                    (this.VatRateTwo != null &&
                    this.VatRateTwo.Equals(input.VatRateTwo))
                ) &&
                (
                    this.VendorRemitToIdentifier == input.VendorRemitToIdentifier ||
                    (this.VendorRemitToIdentifier != null &&
                    this.VendorRemitToIdentifier.Equals(input.VendorRemitToIdentifier))
                ) &&
                (
                    this.VendorShipFromAddressCode == input.VendorShipFromAddressCode ||
                    (this.VendorShipFromAddressCode != null &&
                    this.VendorShipFromAddressCode.Equals(input.VendorShipFromAddressCode))
                ) &&
                (
                    this.VendorTaxId == input.VendorTaxId ||
                    (this.VendorTaxId != null &&
                    this.VendorTaxId.Equals(input.VendorTaxId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountWithoutVat != null)
                    hashCode = hashCode * 59 + this.AmountWithoutVat.GetHashCode();
                if (this.BuyerCostCenter != null)
                    hashCode = hashCode * 59 + this.BuyerCostCenter.GetHashCode();
                if (this.CheckNumber != null)
                    hashCode = hashCode * 59 + this.CheckNumber.GetHashCode();
                if (this.CompanyBillToAddressCode != null)
                    hashCode = hashCode * 59 + this.CompanyBillToAddressCode.GetHashCode();
                if (this.CompanyShipToAddressCode != null)
                    hashCode = hashCode * 59 + this.CompanyShipToAddressCode.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Custom01 != null)
                    hashCode = hashCode * 59 + this.Custom01.GetHashCode();
                if (this.Custom02 != null)
                    hashCode = hashCode * 59 + this.Custom02.GetHashCode();
                if (this.Custom03 != null)
                    hashCode = hashCode * 59 + this.Custom03.GetHashCode();
                if (this.Custom04 != null)
                    hashCode = hashCode * 59 + this.Custom04.GetHashCode();
                if (this.Custom05 != null)
                    hashCode = hashCode * 59 + this.Custom05.GetHashCode();
                if (this.Custom06 != null)
                    hashCode = hashCode * 59 + this.Custom06.GetHashCode();
                if (this.Custom07 != null)
                    hashCode = hashCode * 59 + this.Custom07.GetHashCode();
                if (this.Custom08 != null)
                    hashCode = hashCode * 59 + this.Custom08.GetHashCode();
                if (this.Custom09 != null)
                    hashCode = hashCode * 59 + this.Custom09.GetHashCode();
                if (this.Custom10 != null)
                    hashCode = hashCode * 59 + this.Custom10.GetHashCode();
                if (this.Custom11 != null)
                    hashCode = hashCode * 59 + this.Custom11.GetHashCode();
                if (this.Custom12 != null)
                    hashCode = hashCode * 59 + this.Custom12.GetHashCode();
                if (this.Custom13 != null)
                    hashCode = hashCode * 59 + this.Custom13.GetHashCode();
                if (this.Custom14 != null)
                    hashCode = hashCode * 59 + this.Custom14.GetHashCode();
                if (this.Custom15 != null)
                    hashCode = hashCode * 59 + this.Custom15.GetHashCode();
                if (this.Custom16 != null)
                    hashCode = hashCode * 59 + this.Custom16.GetHashCode();
                if (this.Custom17 != null)
                    hashCode = hashCode * 59 + this.Custom17.GetHashCode();
                if (this.Custom18 != null)
                    hashCode = hashCode * 59 + this.Custom18.GetHashCode();
                if (this.Custom19 != null)
                    hashCode = hashCode * 59 + this.Custom19.GetHashCode();
                if (this.Custom20 != null)
                    hashCode = hashCode * 59 + this.Custom20.GetHashCode();
                if (this.Custom21 != null)
                    hashCode = hashCode * 59 + this.Custom21.GetHashCode();
                if (this.Custom22 != null)
                    hashCode = hashCode * 59 + this.Custom22.GetHashCode();
                if (this.Custom23 != null)
                    hashCode = hashCode * 59 + this.Custom23.GetHashCode();
                if (this.Custom24 != null)
                    hashCode = hashCode * 59 + this.Custom24.GetHashCode();
                if (this.DataSource != null)
                    hashCode = hashCode * 59 + this.DataSource.GetHashCode();
                if (this.DeliverySlipNumber != null)
                    hashCode = hashCode * 59 + this.DeliverySlipNumber.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DiscountPercentage != null)
                    hashCode = hashCode * 59 + this.DiscountPercentage.GetHashCode();
                if (this.DiscountTerms != null)
                    hashCode = hashCode * 59 + this.DiscountTerms.GetHashCode();
                if (this.EmployeeEmailAddress != null)
                    hashCode = hashCode * 59 + this.EmployeeEmailAddress.GetHashCode();
                if (this.EmployeeId != null)
                    hashCode = hashCode * 59 + this.EmployeeId.GetHashCode();
                if (this.EmployeeLoginId != null)
                    hashCode = hashCode * 59 + this.EmployeeLoginId.GetHashCode();
                if (this.ExternalPolicyId != null)
                    hashCode = hashCode * 59 + this.ExternalPolicyId.GetHashCode();
                if (this.InvoiceAmount != null)
                    hashCode = hashCode * 59 + this.InvoiceAmount.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.InvoiceReceivedDate != null)
                    hashCode = hashCode * 59 + this.InvoiceReceivedDate.GetHashCode();
                if (this.IsEmergencyCheckRun != null)
                    hashCode = hashCode * 59 + this.IsEmergencyCheckRun.GetHashCode();
                if (this.IsInvoiceConfirmed != null)
                    hashCode = hashCode * 59 + this.IsInvoiceConfirmed.GetHashCode();
                if (this.LedgerCode != null)
                    hashCode = hashCode * 59 + this.LedgerCode.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NotesToVendor != null)
                    hashCode = hashCode * 59 + this.NotesToVendor.GetHashCode();
                if (this.OB10BuyerId != null)
                    hashCode = hashCode * 59 + this.OB10BuyerId.GetHashCode();
                if (this.OB10TransactionId != null)
                    hashCode = hashCode * 59 + this.OB10TransactionId.GetHashCode();
                if (this.OrgUnit01 != null)
                    hashCode = hashCode * 59 + this.OrgUnit01.GetHashCode();
                if (this.OrgUnit02 != null)
                    hashCode = hashCode * 59 + this.OrgUnit02.GetHashCode();
                if (this.OrgUnit03 != null)
                    hashCode = hashCode * 59 + this.OrgUnit03.GetHashCode();
                if (this.OrgUnit04 != null)
                    hashCode = hashCode * 59 + this.OrgUnit04.GetHashCode();
                if (this.OrgUnit05 != null)
                    hashCode = hashCode * 59 + this.OrgUnit05.GetHashCode();
                if (this.OrgUnit06 != null)
                    hashCode = hashCode * 59 + this.OrgUnit06.GetHashCode();
                if (this.PaymentAdjustmentNotes != null)
                    hashCode = hashCode * 59 + this.PaymentAdjustmentNotes.GetHashCode();
                if (this.PaymentAmount != null)
                    hashCode = hashCode * 59 + this.PaymentAmount.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                if (this.PaymentTermsDays != null)
                    hashCode = hashCode * 59 + this.PaymentTermsDays.GetHashCode();
                if (this.ProvincialTaxId != null)
                    hashCode = hashCode * 59 + this.ProvincialTaxId.GetHashCode();
                if (this.PurchaseOrderId != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderId.GetHashCode();
                if (this.ReceiptConfirmationType != null)
                    hashCode = hashCode * 59 + this.ReceiptConfirmationType.GetHashCode();
                if (this.ShippingAmount != null)
                    hashCode = hashCode * 59 + this.ShippingAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.VatAmountFour != null)
                    hashCode = hashCode * 59 + this.VatAmountFour.GetHashCode();
                if (this.VatAmountOne != null)
                    hashCode = hashCode * 59 + this.VatAmountOne.GetHashCode();
                if (this.VatAmountThree != null)
                    hashCode = hashCode * 59 + this.VatAmountThree.GetHashCode();
                if (this.VatAmountTwo != null)
                    hashCode = hashCode * 59 + this.VatAmountTwo.GetHashCode();
                if (this.VatRateFour != null)
                    hashCode = hashCode * 59 + this.VatRateFour.GetHashCode();
                if (this.VatRateOne != null)
                    hashCode = hashCode * 59 + this.VatRateOne.GetHashCode();
                if (this.VatRateThree != null)
                    hashCode = hashCode * 59 + this.VatRateThree.GetHashCode();
                if (this.VatRateTwo != null)
                    hashCode = hashCode * 59 + this.VatRateTwo.GetHashCode();
                if (this.VendorRemitToIdentifier != null)
                    hashCode = hashCode * 59 + this.VendorRemitToIdentifier.GetHashCode();
                if (this.VendorShipFromAddressCode != null)
                    hashCode = hashCode * 59 + this.VendorShipFromAddressCode.GetHashCode();
                if (this.VendorTaxId != null)
                    hashCode = hashCode * 59 + this.VendorTaxId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
