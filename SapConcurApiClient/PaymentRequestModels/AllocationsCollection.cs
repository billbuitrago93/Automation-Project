/* 
 * Payment Request
 *
 * A payment request is a request for payment (partial or full) of an invoice. This API provides methods to create or update a payment request, or view a payment request by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.PaymentRequestModels
{
    /// <summary>
    /// AllocationsCollection
    /// </summary>
    [DataContract]
    public partial class AllocationsCollection : IEquatable<AllocationsCollection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllocationsCollection" /> class.
        /// </summary>
        /// <param name="allocation">allocation.</param>
        public AllocationsCollection(Allocation allocation = default(Allocation))
        {
            this.Allocation = allocation;
        }

        /// <summary>
        /// Gets or Sets Allocation
        /// </summary>
        [DataMember(Name = "Allocation", EmitDefaultValue = false)]
        public Allocation Allocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllocationsCollection {\n");
            sb.Append("  Allocation: ").Append(Allocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllocationsCollection);
        }

        /// <summary>
        /// Returns true if AllocationsCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of AllocationsCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllocationsCollection input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Allocation == input.Allocation ||
                    (this.Allocation != null &&
                    this.Allocation.Equals(input.Allocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Allocation != null)
                    hashCode = hashCode * 59 + this.Allocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
