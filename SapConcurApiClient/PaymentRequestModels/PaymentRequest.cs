/* 
 * Payment Request
 *
 * A payment request is a request for payment (partial or full) of an invoice. This API provides methods to create or update a payment request, or view a payment request by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.PaymentRequestModels
{
    /// <summary>
    /// PaymentRequest
    /// </summary>
    [DataContract]
    public partial class PaymentRequest : IEquatable<PaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequest" /> class.
        /// </summary>
        /// <param name="amountWithoutVat">The net amount of the invoice (excluding VAT)..</param>
        /// <param name="approvalStatus">A code which indicates the Approval Status of the payment request..</param>
        /// <param name="approvedByDelegate">Was the Payment Request approved by a Delegate (true/false)..</param>
        /// <param name="assignedByUsername">Username of the assigning employee..</param>
        /// <param name="assignedDate">The date the Payment Request was assigned to the current owner..</param>
        /// <param name="buyerCostCenter">The company defined center responsible for the Payment Request..</param>
        /// <param name="calculatedAmount">The sum of all Line Item Amounts plus Shipping Amount and Tax Amount for the payment request..</param>
        /// <param name="checkNumber">Check number of the payment made to the vendor..</param>
        /// <param name="companyBillToAddress">companyBillToAddress.</param>
        /// <param name="companyShipToAddress">companyShipToAddress.</param>
        /// <param name="countryCode">The country code..</param>
        /// <param name="createdByUsername">Username of the Payment Request creator..</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona..</param>
        /// <param name="custom1">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom10">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom11">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom12">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom13">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom14">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom15">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom16">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom17">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom18">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom19">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom2">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom20">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom21">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom22">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom23">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom24">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom3">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom4">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom5">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom6">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom7">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom8">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="custom9">The details from the Custom fields. These may not have data, depending on configuration..</param>
        /// <param name="dataSource">A code which indicates the method used to created the Payment Request. Use GET /invoice/localizeddata to translate the code into text..</param>
        /// <param name="deletedDate">The date the user deleted the payment request..</param>
        /// <param name="deliverySlipNumber">The delivery slip number associated with receiving receipt..</param>
        /// <param name="description">User entered description of the Payment Request..</param>
        /// <param name="discountPercentage">The discount from the supplier if the discount terms are met..</param>
        /// <param name="discountTerms">The NET discount terms with a supplier when discounts apply..</param>
        /// <param name="employeeName">The owner of the Payment Request..</param>
        /// <param name="externalPolicyId">The external policy ID. .</param>
        /// <param name="extractDate">The date the payment request was extracted, in order to import it into an accounts payable system and generate a payment..</param>
        /// <param name="firstApprovalDate">The date the payment request received its first approval in its approval workflow..</param>
        /// <param name="firstSubmitDate">The date the payment request was first submitted..</param>
        /// <param name="iD">The unique identifier of the resource..</param>
        /// <param name="invoiceAmount">User-entered value representing the total invoice amount, used to calculate amount remaining on the line item page..</param>
        /// <param name="invoiceDate">The date the Vendor issued the Invoice..</param>
        /// <param name="invoiceNumber">The Invoice Number from the vendor for the Payment Request..</param>
        /// <param name="invoiceReceivedDate">The date on which the invoice was received..</param>
        /// <param name="isAssigned">Is the Payment Request assigned (true/false)..</param>
        /// <param name="isInvoiceConfirmed">Indicates if the Payment Request Invoice is confirmed or in a different status (true/false)..</param>
        /// <param name="isPaymentRequestDeleted">Is the Payment Request deleted (true/false)..</param>
        /// <param name="isPaymentRequestDuplicate">Is the Payment Request identified as a duplicate of another existing request (true/false)..</param>
        /// <param name="isTestTransaction">Is the Payment Request a test transaction (true/false)..</param>
        /// <param name="lastSubmitDate">The date the payment request was last submitted..</param>
        /// <param name="ledgerCode">A code which indicates which company journal the Payment Request is assigned to. Use GET /invoice/localizeddata to translate the code into text..</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="lineItemTotalAmount">The sum of all Line Item Amounts..</param>
        /// <param name="lineItemVatAmount">The sum amount of VAT from all line items in the request..</param>
        /// <param name="name">The Payment Request Name..</param>
        /// <param name="notesToVendor">Information from the customer to the vendor for special requests or handling for the ordered good or service..</param>
        /// <param name="oB10BuyerId">A unique buyer account on the OB10 network..</param>
        /// <param name="oB10TransactionId">Unique Identifier for the PR transaction (generated by OB10)..</param>
        /// <param name="orgUnit01">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit02">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit03">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit04">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit05">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="orgUnit06">The details from the Organization Unit fields. These may not have data, depending on configuration..</param>
        /// <param name="paidAmount">Represents the amount of the payment that will be/has been made for the Invoice..</param>
        /// <param name="paidDate">The date payment was made to the vendor..</param>
        /// <param name="paymentAdjustmentNotes">Notes to the vendor regarding the amount paid (underpayment due to damages, for example)..</param>
        /// <param name="paymentDueDate">The date the vendor needs to be paid by..</param>
        /// <param name="paymentMethod">A code which indicates the method used to reimburse the vendor for the Payment Request. Use GET /invoice/localizeddata to translate the code into text..</param>
        /// <param name="paymentRequestCreatedByTestUser">Was the Payment Request created by a Test User (true/false)..</param>
        /// <param name="paymentRequestDeletedBy">The user who deleted the Payment Request..</param>
        /// <param name="paymentStatus">A code which indicates the Payment Status of the payment request..</param>
        /// <param name="paymentTermsDays">This number, along with type of payment terms (example: NET), determine when the invoice is expected to be paid..</param>
        /// <param name="provincialTaxId">The Vendor Provincial Tax ID..</param>
        /// <param name="purchaseOrderNumber">The purchase order number for the purchase order associated with the invoice..</param>
        /// <param name="receiptConfirmationType">A code which indicates the receipt confirmation type for this Payment Request (Invoice Confirmation, for example). Use GET /invoice/localizeddata to translate the code into text..</param>
        /// <param name="shippingAmount">The value for the Shipping Amount header field..</param>
        /// <param name="submittedByDelegate">Was the Payment Request created by a Delegate (true/false)..</param>
        /// <param name="taxAmount">The value for the Tax Amount header field..</param>
        /// <param name="taxCode">The Tax Code assigned for the Request, based on the Tax Setting..</param>
        /// <param name="taxCode2">The Tax Code assigned for the Request, based on the Tax Setting..</param>
        /// <param name="taxCode3">undefined:ConnectSwaggerDocs-PMT_TAX_CODE_3.</param>
        /// <param name="taxCode4">undefined:ConnectSwaggerDocs-PMT_TAX_CODE_4.</param>
        /// <param name="totalApprovedAmount">The total amount that has been approved..</param>
        /// <param name="uRI">The URI to the resource..</param>
        /// <param name="userCreationDate">The date the Invoice user first saved the payment request..</param>
        /// <param name="vatAmountFour">The amount of VAT included in the invoice total. (Fourth of four VAT amount fields available.).</param>
        /// <param name="vatAmountOne">The amount of VAT included in the invoice total. (First of four VAT amount fields available.).</param>
        /// <param name="vatAmountThree">The amount of VAT included in the invoice total. (Third of four VAT amount fields available.).</param>
        /// <param name="vatAmountTwo">The amount of VAT included in the invoice total. (Second of four VAT amount fields available.).</param>
        /// <param name="vatRateFour">The VAT rate applied to the net invoice total. (Should relate to the fourth VAT amount field.).</param>
        /// <param name="vatRateOne">The VAT rate applied to the net invoice total. (Should relate to the first VAT amount field.).</param>
        /// <param name="vatRateThree">The VAT rate applied to the net invoice total. (Should relate to the third VAT amount field.).</param>
        /// <param name="vatRateTwo">The VAT rate applied to the net invoice total. (Should relate to the second VAT amount field.).</param>
        /// <param name="vendorRemitAddress">vendorRemitAddress.</param>
        /// <param name="vendorShipFromAddress">vendorShipFromAddress.</param>
        /// <param name="vendorTaxId">The Vendor Tax ID..</param>
        /// <param name="workflowCompleteDate">The date the last step in the workflow process completed..</param>
        public PaymentRequest(string amountWithoutVat = default(string), string approvalStatus = default(string), string approvedByDelegate = default(string), string assignedByUsername = default(string), string assignedDate = default(string), string buyerCostCenter = default(string), string calculatedAmount = default(string), string checkNumber = default(string), CompanyAddress companyBillToAddress = default(CompanyAddress), CompanyAddress companyShipToAddress = default(CompanyAddress), string countryCode = default(string), string createdByUsername = default(string), string currencyCode = default(string), string custom1 = default(string), string custom10 = default(string), string custom11 = default(string), string custom12 = default(string), string custom13 = default(string), string custom14 = default(string), string custom15 = default(string), string custom16 = default(string), string custom17 = default(string), string custom18 = default(string), string custom19 = default(string), string custom2 = default(string), string custom20 = default(string), string custom21 = default(string), string custom22 = default(string), string custom23 = default(string), string custom24 = default(string), string custom3 = default(string), string custom4 = default(string), string custom5 = default(string), string custom6 = default(string), string custom7 = default(string), string custom8 = default(string), string custom9 = default(string), string dataSource = default(string), string deletedDate = default(string), string deliverySlipNumber = default(string), string description = default(string), string discountPercentage = default(string), string discountTerms = default(string), string employeeName = default(string), string externalPolicyId = default(string), string extractDate = default(string), string firstApprovalDate = default(string), string firstSubmitDate = default(string), string iD = default(string), string invoiceAmount = default(string), string invoiceDate = default(string), string invoiceNumber = default(string), string invoiceReceivedDate = default(string), string isAssigned = default(string), string isInvoiceConfirmed = default(string), string isPaymentRequestDeleted = default(string), string isPaymentRequestDuplicate = default(string), string isTestTransaction = default(string), string lastSubmitDate = default(string), string ledgerCode = default(string), LineItemsCollection lineItems = default(LineItemsCollection), string lineItemTotalAmount = default(string), string lineItemVatAmount = default(string), string name = default(string), string notesToVendor = default(string), string oB10BuyerId = default(string), string oB10TransactionId = default(string), string orgUnit01 = default(string), string orgUnit02 = default(string), string orgUnit03 = default(string), string orgUnit04 = default(string), string orgUnit05 = default(string), string orgUnit06 = default(string), string paidAmount = default(string), string paidDate = default(string), string paymentAdjustmentNotes = default(string), string paymentDueDate = default(string), string paymentMethod = default(string), string paymentRequestCreatedByTestUser = default(string), string paymentRequestDeletedBy = default(string), string paymentStatus = default(string), string paymentTermsDays = default(string), string provincialTaxId = default(string), string purchaseOrderNumber = default(string), string receiptConfirmationType = default(string), string shippingAmount = default(string), string submittedByDelegate = default(string), string taxAmount = default(string), string taxCode = default(string), string taxCode2 = default(string), string taxCode3 = default(string), string taxCode4 = default(string), string totalApprovedAmount = default(string), string uRI = default(string), string userCreationDate = default(string), string vatAmountFour = default(string), string vatAmountOne = default(string), string vatAmountThree = default(string), string vatAmountTwo = default(string), string vatRateFour = default(string), string vatRateOne = default(string), string vatRateThree = default(string), string vatRateTwo = default(string), VendorAddress vendorRemitAddress = default(VendorAddress), VendorAddress vendorShipFromAddress = default(VendorAddress), string vendorTaxId = default(string), string workflowCompleteDate = default(string))
        {
            this.AmountWithoutVat = amountWithoutVat;
            this.ApprovalStatus = approvalStatus;
            this.ApprovedByDelegate = approvedByDelegate;
            this.AssignedByUsername = assignedByUsername;
            this.AssignedDate = assignedDate;
            this.BuyerCostCenter = buyerCostCenter;
            this.CalculatedAmount = calculatedAmount;
            this.CheckNumber = checkNumber;
            this.CompanyBillToAddress = companyBillToAddress;
            this.CompanyShipToAddress = companyShipToAddress;
            this.CountryCode = countryCode;
            this.CreatedByUsername = createdByUsername;
            this.CurrencyCode = currencyCode;
            this.Custom1 = custom1;
            this.Custom10 = custom10;
            this.Custom11 = custom11;
            this.Custom12 = custom12;
            this.Custom13 = custom13;
            this.Custom14 = custom14;
            this.Custom15 = custom15;
            this.Custom16 = custom16;
            this.Custom17 = custom17;
            this.Custom18 = custom18;
            this.Custom19 = custom19;
            this.Custom2 = custom2;
            this.Custom20 = custom20;
            this.Custom21 = custom21;
            this.Custom22 = custom22;
            this.Custom23 = custom23;
            this.Custom24 = custom24;
            this.Custom3 = custom3;
            this.Custom4 = custom4;
            this.Custom5 = custom5;
            this.Custom6 = custom6;
            this.Custom7 = custom7;
            this.Custom8 = custom8;
            this.Custom9 = custom9;
            this.DataSource = dataSource;
            this.DeletedDate = deletedDate;
            this.DeliverySlipNumber = deliverySlipNumber;
            this.Description = description;
            this.DiscountPercentage = discountPercentage;
            this.DiscountTerms = discountTerms;
            this.EmployeeName = employeeName;
            this.ExternalPolicyId = externalPolicyId;
            this.ExtractDate = extractDate;
            this.FirstApprovalDate = firstApprovalDate;
            this.FirstSubmitDate = firstSubmitDate;
            this.ID = iD;
            this.InvoiceAmount = invoiceAmount;
            this.InvoiceDate = invoiceDate;
            this.InvoiceNumber = invoiceNumber;
            this.InvoiceReceivedDate = invoiceReceivedDate;
            this.IsAssigned = isAssigned;
            this.IsInvoiceConfirmed = isInvoiceConfirmed;
            this.IsPaymentRequestDeleted = isPaymentRequestDeleted;
            this.IsPaymentRequestDuplicate = isPaymentRequestDuplicate;
            this.IsTestTransaction = isTestTransaction;
            this.LastSubmitDate = lastSubmitDate;
            this.LedgerCode = ledgerCode;
            this.LineItems = lineItems;
            this.LineItemTotalAmount = lineItemTotalAmount;
            this.LineItemVatAmount = lineItemVatAmount;
            this.Name = name;
            this.NotesToVendor = notesToVendor;
            this.OB10BuyerId = oB10BuyerId;
            this.OB10TransactionId = oB10TransactionId;
            this.OrgUnit01 = orgUnit01;
            this.OrgUnit02 = orgUnit02;
            this.OrgUnit03 = orgUnit03;
            this.OrgUnit04 = orgUnit04;
            this.OrgUnit05 = orgUnit05;
            this.OrgUnit06 = orgUnit06;
            this.PaidAmount = paidAmount;
            this.PaidDate = paidDate;
            this.PaymentAdjustmentNotes = paymentAdjustmentNotes;
            this.PaymentDueDate = paymentDueDate;
            this.PaymentMethod = paymentMethod;
            this.PaymentRequestCreatedByTestUser = paymentRequestCreatedByTestUser;
            this.PaymentRequestDeletedBy = paymentRequestDeletedBy;
            this.PaymentStatus = paymentStatus;
            this.PaymentTermsDays = paymentTermsDays;
            this.ProvincialTaxId = provincialTaxId;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.ReceiptConfirmationType = receiptConfirmationType;
            this.ShippingAmount = shippingAmount;
            this.SubmittedByDelegate = submittedByDelegate;
            this.TaxAmount = taxAmount;
            this.TaxCode = taxCode;
            this.TaxCode2 = taxCode2;
            this.TaxCode3 = taxCode3;
            this.TaxCode4 = taxCode4;
            this.TotalApprovedAmount = totalApprovedAmount;
            this.URI = uRI;
            this.UserCreationDate = userCreationDate;
            this.VatAmountFour = vatAmountFour;
            this.VatAmountOne = vatAmountOne;
            this.VatAmountThree = vatAmountThree;
            this.VatAmountTwo = vatAmountTwo;
            this.VatRateFour = vatRateFour;
            this.VatRateOne = vatRateOne;
            this.VatRateThree = vatRateThree;
            this.VatRateTwo = vatRateTwo;
            this.VendorRemitAddress = vendorRemitAddress;
            this.VendorShipFromAddress = vendorShipFromAddress;
            this.VendorTaxId = vendorTaxId;
            this.WorkflowCompleteDate = workflowCompleteDate;
        }

        /// <summary>
        /// The net amount of the invoice (excluding VAT).
        /// </summary>
        /// <value>The net amount of the invoice (excluding VAT).</value>
        [DataMember(Name = "AmountWithoutVat", EmitDefaultValue = false)]
        public string AmountWithoutVat { get; set; }

        /// <summary>
        /// A code which indicates the Approval Status of the payment request.
        /// </summary>
        /// <value>A code which indicates the Approval Status of the payment request.</value>
        [DataMember(Name = "ApprovalStatus", EmitDefaultValue = false)]
        public string ApprovalStatus { get; set; }

        /// <summary>
        /// Was the Payment Request approved by a Delegate (true/false).
        /// </summary>
        /// <value>Was the Payment Request approved by a Delegate (true/false).</value>
        [DataMember(Name = "ApprovedByDelegate", EmitDefaultValue = false)]
        public string ApprovedByDelegate { get; set; }

        /// <summary>
        /// Username of the assigning employee.
        /// </summary>
        /// <value>Username of the assigning employee.</value>
        [DataMember(Name = "AssignedByUsername", EmitDefaultValue = false)]
        public string AssignedByUsername { get; set; }

        /// <summary>
        /// The date the Payment Request was assigned to the current owner.
        /// </summary>
        /// <value>The date the Payment Request was assigned to the current owner.</value>
        [DataMember(Name = "AssignedDate", EmitDefaultValue = false)]
        public string AssignedDate { get; set; }

        /// <summary>
        /// The company defined center responsible for the Payment Request.
        /// </summary>
        /// <value>The company defined center responsible for the Payment Request.</value>
        [DataMember(Name = "BuyerCostCenter", EmitDefaultValue = false)]
        public string BuyerCostCenter { get; set; }

        /// <summary>
        /// The sum of all Line Item Amounts plus Shipping Amount and Tax Amount for the payment request.
        /// </summary>
        /// <value>The sum of all Line Item Amounts plus Shipping Amount and Tax Amount for the payment request.</value>
        [DataMember(Name = "CalculatedAmount", EmitDefaultValue = false)]
        public string CalculatedAmount { get; set; }

        /// <summary>
        /// Check number of the payment made to the vendor.
        /// </summary>
        /// <value>Check number of the payment made to the vendor.</value>
        [DataMember(Name = "CheckNumber", EmitDefaultValue = false)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// Gets or Sets CompanyBillToAddress
        /// </summary>
        [DataMember(Name = "CompanyBillToAddress", EmitDefaultValue = false)]
        public CompanyAddress CompanyBillToAddress { get; set; }

        /// <summary>
        /// Gets or Sets CompanyShipToAddress
        /// </summary>
        [DataMember(Name = "CompanyShipToAddress", EmitDefaultValue = false)]
        public CompanyAddress CompanyShipToAddress { get; set; }

        /// <summary>
        /// The country code.
        /// </summary>
        /// <value>The country code.</value>
        [DataMember(Name = "CountryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Username of the Payment Request creator.
        /// </summary>
        /// <value>Username of the Payment Request creator.</value>
        [DataMember(Name = "CreatedByUsername", EmitDefaultValue = false)]
        public string CreatedByUsername { get; set; }

        /// <summary>
        /// The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona.
        /// </summary>
        /// <value>The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona.</value>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom1", EmitDefaultValue = false)]
        public string Custom1 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom10", EmitDefaultValue = false)]
        public string Custom10 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom11", EmitDefaultValue = false)]
        public string Custom11 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom12", EmitDefaultValue = false)]
        public string Custom12 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom13", EmitDefaultValue = false)]
        public string Custom13 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom14", EmitDefaultValue = false)]
        public string Custom14 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom15", EmitDefaultValue = false)]
        public string Custom15 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom16", EmitDefaultValue = false)]
        public string Custom16 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom17", EmitDefaultValue = false)]
        public string Custom17 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom18", EmitDefaultValue = false)]
        public string Custom18 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom19", EmitDefaultValue = false)]
        public string Custom19 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom2", EmitDefaultValue = false)]
        public string Custom2 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom20", EmitDefaultValue = false)]
        public string Custom20 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom21", EmitDefaultValue = false)]
        public string Custom21 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom22", EmitDefaultValue = false)]
        public string Custom22 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom23", EmitDefaultValue = false)]
        public string Custom23 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom24", EmitDefaultValue = false)]
        public string Custom24 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom3", EmitDefaultValue = false)]
        public string Custom3 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom4", EmitDefaultValue = false)]
        public string Custom4 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom5", EmitDefaultValue = false)]
        public string Custom5 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom6", EmitDefaultValue = false)]
        public string Custom6 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom7", EmitDefaultValue = false)]
        public string Custom7 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom8", EmitDefaultValue = false)]
        public string Custom8 { get; set; }

        /// <summary>
        /// The details from the Custom fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Custom fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "Custom9", EmitDefaultValue = false)]
        public string Custom9 { get; set; }

        /// <summary>
        /// A code which indicates the method used to created the Payment Request. Use GET /invoice/localizeddata to translate the code into text.
        /// </summary>
        /// <value>A code which indicates the method used to created the Payment Request. Use GET /invoice/localizeddata to translate the code into text.</value>
        [DataMember(Name = "DataSource", EmitDefaultValue = false)]
        public string DataSource { get; set; }

        /// <summary>
        /// The date the user deleted the payment request.
        /// </summary>
        /// <value>The date the user deleted the payment request.</value>
        [DataMember(Name = "DeletedDate", EmitDefaultValue = false)]
        public string DeletedDate { get; set; }

        /// <summary>
        /// The delivery slip number associated with receiving receipt.
        /// </summary>
        /// <value>The delivery slip number associated with receiving receipt.</value>
        [DataMember(Name = "DeliverySlipNumber", EmitDefaultValue = false)]
        public string DeliverySlipNumber { get; set; }

        /// <summary>
        /// User entered description of the Payment Request.
        /// </summary>
        /// <value>User entered description of the Payment Request.</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The discount from the supplier if the discount terms are met.
        /// </summary>
        /// <value>The discount from the supplier if the discount terms are met.</value>
        [DataMember(Name = "DiscountPercentage", EmitDefaultValue = false)]
        public string DiscountPercentage { get; set; }

        /// <summary>
        /// The NET discount terms with a supplier when discounts apply.
        /// </summary>
        /// <value>The NET discount terms with a supplier when discounts apply.</value>
        [DataMember(Name = "DiscountTerms", EmitDefaultValue = false)]
        public string DiscountTerms { get; set; }

        /// <summary>
        /// The owner of the Payment Request.
        /// </summary>
        /// <value>The owner of the Payment Request.</value>
        [DataMember(Name = "EmployeeName", EmitDefaultValue = false)]
        public string EmployeeName { get; set; }

        /// <summary>
        /// The external policy ID. 
        /// </summary>
        /// <value>The external policy ID. </value>
        [DataMember(Name = "ExternalPolicyId", EmitDefaultValue = false)]
        public string ExternalPolicyId { get; set; }

        /// <summary>
        /// The date the payment request was extracted, in order to import it into an accounts payable system and generate a payment.
        /// </summary>
        /// <value>The date the payment request was extracted, in order to import it into an accounts payable system and generate a payment.</value>
        [DataMember(Name = "ExtractDate", EmitDefaultValue = false)]
        public string ExtractDate { get; set; }

        /// <summary>
        /// The date the payment request received its first approval in its approval workflow.
        /// </summary>
        /// <value>The date the payment request received its first approval in its approval workflow.</value>
        [DataMember(Name = "FirstApprovalDate", EmitDefaultValue = false)]
        public string FirstApprovalDate { get; set; }

        /// <summary>
        /// The date the payment request was first submitted.
        /// </summary>
        /// <value>The date the payment request was first submitted.</value>
        [DataMember(Name = "FirstSubmitDate", EmitDefaultValue = false)]
        public string FirstSubmitDate { get; set; }

        /// <summary>
        /// The unique identifier of the resource.
        /// </summary>
        /// <value>The unique identifier of the resource.</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// User-entered value representing the total invoice amount, used to calculate amount remaining on the line item page.
        /// </summary>
        /// <value>User-entered value representing the total invoice amount, used to calculate amount remaining on the line item page.</value>
        [DataMember(Name = "InvoiceAmount", EmitDefaultValue = false)]
        public string InvoiceAmount { get; set; }

        /// <summary>
        /// The date the Vendor issued the Invoice.
        /// </summary>
        /// <value>The date the Vendor issued the Invoice.</value>
        [DataMember(Name = "InvoiceDate", EmitDefaultValue = false)]
        public string InvoiceDate { get; set; }

        /// <summary>
        /// The Invoice Number from the vendor for the Payment Request.
        /// </summary>
        /// <value>The Invoice Number from the vendor for the Payment Request.</value>
        [DataMember(Name = "InvoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The date on which the invoice was received.
        /// </summary>
        /// <value>The date on which the invoice was received.</value>
        [DataMember(Name = "InvoiceReceivedDate", EmitDefaultValue = false)]
        public string InvoiceReceivedDate { get; set; }

        /// <summary>
        /// Is the Payment Request assigned (true/false).
        /// </summary>
        /// <value>Is the Payment Request assigned (true/false).</value>
        [DataMember(Name = "IsAssigned", EmitDefaultValue = false)]
        public string IsAssigned { get; set; }

        /// <summary>
        /// Indicates if the Payment Request Invoice is confirmed or in a different status (true/false).
        /// </summary>
        /// <value>Indicates if the Payment Request Invoice is confirmed or in a different status (true/false).</value>
        [DataMember(Name = "IsInvoiceConfirmed", EmitDefaultValue = false)]
        public string IsInvoiceConfirmed { get; set; }

        /// <summary>
        /// Is the Payment Request deleted (true/false).
        /// </summary>
        /// <value>Is the Payment Request deleted (true/false).</value>
        [DataMember(Name = "IsPaymentRequestDeleted", EmitDefaultValue = false)]
        public string IsPaymentRequestDeleted { get; set; }

        /// <summary>
        /// Is the Payment Request identified as a duplicate of another existing request (true/false).
        /// </summary>
        /// <value>Is the Payment Request identified as a duplicate of another existing request (true/false).</value>
        [DataMember(Name = "IsPaymentRequestDuplicate", EmitDefaultValue = false)]
        public string IsPaymentRequestDuplicate { get; set; }

        /// <summary>
        /// Is the Payment Request a test transaction (true/false).
        /// </summary>
        /// <value>Is the Payment Request a test transaction (true/false).</value>
        [DataMember(Name = "IsTestTransaction", EmitDefaultValue = false)]
        public string IsTestTransaction { get; set; }

        /// <summary>
        /// The date the payment request was last submitted.
        /// </summary>
        /// <value>The date the payment request was last submitted.</value>
        [DataMember(Name = "LastSubmitDate", EmitDefaultValue = false)]
        public string LastSubmitDate { get; set; }

        /// <summary>
        /// A code which indicates which company journal the Payment Request is assigned to. Use GET /invoice/localizeddata to translate the code into text.
        /// </summary>
        /// <value>A code which indicates which company journal the Payment Request is assigned to. Use GET /invoice/localizeddata to translate the code into text.</value>
        [DataMember(Name = "LedgerCode", EmitDefaultValue = false)]
        public string LedgerCode { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public LineItemsCollection LineItems { get; set; }

        /// <summary>
        /// The sum of all Line Item Amounts.
        /// </summary>
        /// <value>The sum of all Line Item Amounts.</value>
        [DataMember(Name = "LineItemTotalAmount", EmitDefaultValue = false)]
        public string LineItemTotalAmount { get; set; }

        /// <summary>
        /// The sum amount of VAT from all line items in the request.
        /// </summary>
        /// <value>The sum amount of VAT from all line items in the request.</value>
        [DataMember(Name = "LineItemVatAmount", EmitDefaultValue = false)]
        public string LineItemVatAmount { get; set; }

        /// <summary>
        /// The Payment Request Name.
        /// </summary>
        /// <value>The Payment Request Name.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Information from the customer to the vendor for special requests or handling for the ordered good or service.
        /// </summary>
        /// <value>Information from the customer to the vendor for special requests or handling for the ordered good or service.</value>
        [DataMember(Name = "NotesToVendor", EmitDefaultValue = false)]
        public string NotesToVendor { get; set; }

        /// <summary>
        /// A unique buyer account on the OB10 network.
        /// </summary>
        /// <value>A unique buyer account on the OB10 network.</value>
        [DataMember(Name = "OB10BuyerId", EmitDefaultValue = false)]
        public string OB10BuyerId { get; set; }

        /// <summary>
        /// Unique Identifier for the PR transaction (generated by OB10).
        /// </summary>
        /// <value>Unique Identifier for the PR transaction (generated by OB10).</value>
        [DataMember(Name = "OB10TransactionId", EmitDefaultValue = false)]
        public string OB10TransactionId { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit01", EmitDefaultValue = false)]
        public string OrgUnit01 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit02", EmitDefaultValue = false)]
        public string OrgUnit02 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit03", EmitDefaultValue = false)]
        public string OrgUnit03 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit04", EmitDefaultValue = false)]
        public string OrgUnit04 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit05", EmitDefaultValue = false)]
        public string OrgUnit05 { get; set; }

        /// <summary>
        /// The details from the Organization Unit fields. These may not have data, depending on configuration.
        /// </summary>
        /// <value>The details from the Organization Unit fields. These may not have data, depending on configuration.</value>
        [DataMember(Name = "OrgUnit06", EmitDefaultValue = false)]
        public string OrgUnit06 { get; set; }

        /// <summary>
        /// Represents the amount of the payment that will be/has been made for the Invoice.
        /// </summary>
        /// <value>Represents the amount of the payment that will be/has been made for the Invoice.</value>
        [DataMember(Name = "PaidAmount", EmitDefaultValue = false)]
        public string PaidAmount { get; set; }

        /// <summary>
        /// The date payment was made to the vendor.
        /// </summary>
        /// <value>The date payment was made to the vendor.</value>
        [DataMember(Name = "PaidDate", EmitDefaultValue = false)]
        public string PaidDate { get; set; }

        /// <summary>
        /// Notes to the vendor regarding the amount paid (underpayment due to damages, for example).
        /// </summary>
        /// <value>Notes to the vendor regarding the amount paid (underpayment due to damages, for example).</value>
        [DataMember(Name = "PaymentAdjustmentNotes", EmitDefaultValue = false)]
        public string PaymentAdjustmentNotes { get; set; }

        /// <summary>
        /// The date the vendor needs to be paid by.
        /// </summary>
        /// <value>The date the vendor needs to be paid by.</value>
        [DataMember(Name = "PaymentDueDate", EmitDefaultValue = false)]
        public string PaymentDueDate { get; set; }

        /// <summary>
        /// A code which indicates the method used to reimburse the vendor for the Payment Request. Use GET /invoice/localizeddata to translate the code into text.
        /// </summary>
        /// <value>A code which indicates the method used to reimburse the vendor for the Payment Request. Use GET /invoice/localizeddata to translate the code into text.</value>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Was the Payment Request created by a Test User (true/false).
        /// </summary>
        /// <value>Was the Payment Request created by a Test User (true/false).</value>
        [DataMember(Name = "PaymentRequestCreatedByTestUser", EmitDefaultValue = false)]
        public string PaymentRequestCreatedByTestUser { get; set; }

        /// <summary>
        /// The user who deleted the Payment Request.
        /// </summary>
        /// <value>The user who deleted the Payment Request.</value>
        [DataMember(Name = "PaymentRequestDeletedBy", EmitDefaultValue = false)]
        public string PaymentRequestDeletedBy { get; set; }

        /// <summary>
        /// A code which indicates the Payment Status of the payment request.
        /// </summary>
        /// <value>A code which indicates the Payment Status of the payment request.</value>
        [DataMember(Name = "PaymentStatus", EmitDefaultValue = false)]
        public string PaymentStatus { get; set; }

        /// <summary>
        /// This number, along with type of payment terms (example: NET), determine when the invoice is expected to be paid.
        /// </summary>
        /// <value>This number, along with type of payment terms (example: NET), determine when the invoice is expected to be paid.</value>
        [DataMember(Name = "PaymentTermsDays", EmitDefaultValue = false)]
        public string PaymentTermsDays { get; set; }

        /// <summary>
        /// The Vendor Provincial Tax ID.
        /// </summary>
        /// <value>The Vendor Provincial Tax ID.</value>
        [DataMember(Name = "ProvincialTaxId", EmitDefaultValue = false)]
        public string ProvincialTaxId { get; set; }

        /// <summary>
        /// The purchase order number for the purchase order associated with the invoice.
        /// </summary>
        /// <value>The purchase order number for the purchase order associated with the invoice.</value>
        [DataMember(Name = "PurchaseOrderNumber", EmitDefaultValue = false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// A code which indicates the receipt confirmation type for this Payment Request (Invoice Confirmation, for example). Use GET /invoice/localizeddata to translate the code into text.
        /// </summary>
        /// <value>A code which indicates the receipt confirmation type for this Payment Request (Invoice Confirmation, for example). Use GET /invoice/localizeddata to translate the code into text.</value>
        [DataMember(Name = "ReceiptConfirmationType", EmitDefaultValue = false)]
        public string ReceiptConfirmationType { get; set; }

        /// <summary>
        /// The value for the Shipping Amount header field.
        /// </summary>
        /// <value>The value for the Shipping Amount header field.</value>
        [DataMember(Name = "ShippingAmount", EmitDefaultValue = false)]
        public string ShippingAmount { get; set; }

        /// <summary>
        /// Was the Payment Request created by a Delegate (true/false).
        /// </summary>
        /// <value>Was the Payment Request created by a Delegate (true/false).</value>
        [DataMember(Name = "SubmittedByDelegate", EmitDefaultValue = false)]
        public string SubmittedByDelegate { get; set; }

        /// <summary>
        /// The value for the Tax Amount header field.
        /// </summary>
        /// <value>The value for the Tax Amount header field.</value>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// The Tax Code assigned for the Request, based on the Tax Setting.
        /// </summary>
        /// <value>The Tax Code assigned for the Request, based on the Tax Setting.</value>
        [DataMember(Name = "TaxCode", EmitDefaultValue = false)]
        public string TaxCode { get; set; }

        /// <summary>
        /// The Tax Code assigned for the Request, based on the Tax Setting.
        /// </summary>
        /// <value>The Tax Code assigned for the Request, based on the Tax Setting.</value>
        [DataMember(Name = "TaxCode2", EmitDefaultValue = false)]
        public string TaxCode2 { get; set; }

        /// <summary>
        /// undefined:ConnectSwaggerDocs-PMT_TAX_CODE_3
        /// </summary>
        /// <value>undefined:ConnectSwaggerDocs-PMT_TAX_CODE_3</value>
        [DataMember(Name = "TaxCode3", EmitDefaultValue = false)]
        public string TaxCode3 { get; set; }

        /// <summary>
        /// undefined:ConnectSwaggerDocs-PMT_TAX_CODE_4
        /// </summary>
        /// <value>undefined:ConnectSwaggerDocs-PMT_TAX_CODE_4</value>
        [DataMember(Name = "TaxCode4", EmitDefaultValue = false)]
        public string TaxCode4 { get; set; }

        /// <summary>
        /// The total amount that has been approved.
        /// </summary>
        /// <value>The total amount that has been approved.</value>
        [DataMember(Name = "TotalApprovedAmount", EmitDefaultValue = false)]
        public string TotalApprovedAmount { get; set; }

        /// <summary>
        /// The URI to the resource.
        /// </summary>
        /// <value>The URI to the resource.</value>
        [DataMember(Name = "URI", EmitDefaultValue = false)]
        public string URI { get; set; }

        /// <summary>
        /// The date the Invoice user first saved the payment request.
        /// </summary>
        /// <value>The date the Invoice user first saved the payment request.</value>
        [DataMember(Name = "UserCreationDate", EmitDefaultValue = false)]
        public string UserCreationDate { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (Fourth of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (Fourth of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountFour", EmitDefaultValue = false)]
        public string VatAmountFour { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (First of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (First of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountOne", EmitDefaultValue = false)]
        public string VatAmountOne { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (Third of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (Third of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountThree", EmitDefaultValue = false)]
        public string VatAmountThree { get; set; }

        /// <summary>
        /// The amount of VAT included in the invoice total. (Second of four VAT amount fields available.)
        /// </summary>
        /// <value>The amount of VAT included in the invoice total. (Second of four VAT amount fields available.)</value>
        [DataMember(Name = "VatAmountTwo", EmitDefaultValue = false)]
        public string VatAmountTwo { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the fourth VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the fourth VAT amount field.)</value>
        [DataMember(Name = "VatRateFour", EmitDefaultValue = false)]
        public string VatRateFour { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the first VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the first VAT amount field.)</value>
        [DataMember(Name = "VatRateOne", EmitDefaultValue = false)]
        public string VatRateOne { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the third VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the third VAT amount field.)</value>
        [DataMember(Name = "VatRateThree", EmitDefaultValue = false)]
        public string VatRateThree { get; set; }

        /// <summary>
        /// The VAT rate applied to the net invoice total. (Should relate to the second VAT amount field.)
        /// </summary>
        /// <value>The VAT rate applied to the net invoice total. (Should relate to the second VAT amount field.)</value>
        [DataMember(Name = "VatRateTwo", EmitDefaultValue = false)]
        public string VatRateTwo { get; set; }

        /// <summary>
        /// Gets or Sets VendorRemitAddress
        /// </summary>
        [DataMember(Name = "VendorRemitAddress", EmitDefaultValue = false)]
        public VendorAddress VendorRemitAddress { get; set; }

        /// <summary>
        /// Gets or Sets VendorShipFromAddress
        /// </summary>
        [DataMember(Name = "VendorShipFromAddress", EmitDefaultValue = false)]
        public VendorAddress VendorShipFromAddress { get; set; }

        /// <summary>
        /// The Vendor Tax ID.
        /// </summary>
        /// <value>The Vendor Tax ID.</value>
        [DataMember(Name = "VendorTaxId", EmitDefaultValue = false)]
        public string VendorTaxId { get; set; }

        /// <summary>
        /// The date the last step in the workflow process completed.
        /// </summary>
        /// <value>The date the last step in the workflow process completed.</value>
        [DataMember(Name = "WorkflowCompleteDate", EmitDefaultValue = false)]
        public string WorkflowCompleteDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequest {\n");
            sb.Append("  AmountWithoutVat: ").Append(AmountWithoutVat).Append("\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  ApprovedByDelegate: ").Append(ApprovedByDelegate).Append("\n");
            sb.Append("  AssignedByUsername: ").Append(AssignedByUsername).Append("\n");
            sb.Append("  AssignedDate: ").Append(AssignedDate).Append("\n");
            sb.Append("  BuyerCostCenter: ").Append(BuyerCostCenter).Append("\n");
            sb.Append("  CalculatedAmount: ").Append(CalculatedAmount).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  CompanyBillToAddress: ").Append(CompanyBillToAddress).Append("\n");
            sb.Append("  CompanyShipToAddress: ").Append(CompanyShipToAddress).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CreatedByUsername: ").Append(CreatedByUsername).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Custom1: ").Append(Custom1).Append("\n");
            sb.Append("  Custom10: ").Append(Custom10).Append("\n");
            sb.Append("  Custom11: ").Append(Custom11).Append("\n");
            sb.Append("  Custom12: ").Append(Custom12).Append("\n");
            sb.Append("  Custom13: ").Append(Custom13).Append("\n");
            sb.Append("  Custom14: ").Append(Custom14).Append("\n");
            sb.Append("  Custom15: ").Append(Custom15).Append("\n");
            sb.Append("  Custom16: ").Append(Custom16).Append("\n");
            sb.Append("  Custom17: ").Append(Custom17).Append("\n");
            sb.Append("  Custom18: ").Append(Custom18).Append("\n");
            sb.Append("  Custom19: ").Append(Custom19).Append("\n");
            sb.Append("  Custom2: ").Append(Custom2).Append("\n");
            sb.Append("  Custom20: ").Append(Custom20).Append("\n");
            sb.Append("  Custom21: ").Append(Custom21).Append("\n");
            sb.Append("  Custom22: ").Append(Custom22).Append("\n");
            sb.Append("  Custom23: ").Append(Custom23).Append("\n");
            sb.Append("  Custom24: ").Append(Custom24).Append("\n");
            sb.Append("  Custom3: ").Append(Custom3).Append("\n");
            sb.Append("  Custom4: ").Append(Custom4).Append("\n");
            sb.Append("  Custom5: ").Append(Custom5).Append("\n");
            sb.Append("  Custom6: ").Append(Custom6).Append("\n");
            sb.Append("  Custom7: ").Append(Custom7).Append("\n");
            sb.Append("  Custom8: ").Append(Custom8).Append("\n");
            sb.Append("  Custom9: ").Append(Custom9).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  DeletedDate: ").Append(DeletedDate).Append("\n");
            sb.Append("  DeliverySlipNumber: ").Append(DeliverySlipNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  DiscountTerms: ").Append(DiscountTerms).Append("\n");
            sb.Append("  EmployeeName: ").Append(EmployeeName).Append("\n");
            sb.Append("  ExternalPolicyId: ").Append(ExternalPolicyId).Append("\n");
            sb.Append("  ExtractDate: ").Append(ExtractDate).Append("\n");
            sb.Append("  FirstApprovalDate: ").Append(FirstApprovalDate).Append("\n");
            sb.Append("  FirstSubmitDate: ").Append(FirstSubmitDate).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceReceivedDate: ").Append(InvoiceReceivedDate).Append("\n");
            sb.Append("  IsAssigned: ").Append(IsAssigned).Append("\n");
            sb.Append("  IsInvoiceConfirmed: ").Append(IsInvoiceConfirmed).Append("\n");
            sb.Append("  IsPaymentRequestDeleted: ").Append(IsPaymentRequestDeleted).Append("\n");
            sb.Append("  IsPaymentRequestDuplicate: ").Append(IsPaymentRequestDuplicate).Append("\n");
            sb.Append("  IsTestTransaction: ").Append(IsTestTransaction).Append("\n");
            sb.Append("  LastSubmitDate: ").Append(LastSubmitDate).Append("\n");
            sb.Append("  LedgerCode: ").Append(LedgerCode).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  LineItemTotalAmount: ").Append(LineItemTotalAmount).Append("\n");
            sb.Append("  LineItemVatAmount: ").Append(LineItemVatAmount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotesToVendor: ").Append(NotesToVendor).Append("\n");
            sb.Append("  OB10BuyerId: ").Append(OB10BuyerId).Append("\n");
            sb.Append("  OB10TransactionId: ").Append(OB10TransactionId).Append("\n");
            sb.Append("  OrgUnit01: ").Append(OrgUnit01).Append("\n");
            sb.Append("  OrgUnit02: ").Append(OrgUnit02).Append("\n");
            sb.Append("  OrgUnit03: ").Append(OrgUnit03).Append("\n");
            sb.Append("  OrgUnit04: ").Append(OrgUnit04).Append("\n");
            sb.Append("  OrgUnit05: ").Append(OrgUnit05).Append("\n");
            sb.Append("  OrgUnit06: ").Append(OrgUnit06).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  PaymentAdjustmentNotes: ").Append(PaymentAdjustmentNotes).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentRequestCreatedByTestUser: ").Append(PaymentRequestCreatedByTestUser).Append("\n");
            sb.Append("  PaymentRequestDeletedBy: ").Append(PaymentRequestDeletedBy).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  PaymentTermsDays: ").Append(PaymentTermsDays).Append("\n");
            sb.Append("  ProvincialTaxId: ").Append(ProvincialTaxId).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  ReceiptConfirmationType: ").Append(ReceiptConfirmationType).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  SubmittedByDelegate: ").Append(SubmittedByDelegate).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxCode2: ").Append(TaxCode2).Append("\n");
            sb.Append("  TaxCode3: ").Append(TaxCode3).Append("\n");
            sb.Append("  TaxCode4: ").Append(TaxCode4).Append("\n");
            sb.Append("  TotalApprovedAmount: ").Append(TotalApprovedAmount).Append("\n");
            sb.Append("  URI: ").Append(URI).Append("\n");
            sb.Append("  UserCreationDate: ").Append(UserCreationDate).Append("\n");
            sb.Append("  VatAmountFour: ").Append(VatAmountFour).Append("\n");
            sb.Append("  VatAmountOne: ").Append(VatAmountOne).Append("\n");
            sb.Append("  VatAmountThree: ").Append(VatAmountThree).Append("\n");
            sb.Append("  VatAmountTwo: ").Append(VatAmountTwo).Append("\n");
            sb.Append("  VatRateFour: ").Append(VatRateFour).Append("\n");
            sb.Append("  VatRateOne: ").Append(VatRateOne).Append("\n");
            sb.Append("  VatRateThree: ").Append(VatRateThree).Append("\n");
            sb.Append("  VatRateTwo: ").Append(VatRateTwo).Append("\n");
            sb.Append("  VendorRemitAddress: ").Append(VendorRemitAddress).Append("\n");
            sb.Append("  VendorShipFromAddress: ").Append(VendorShipFromAddress).Append("\n");
            sb.Append("  VendorTaxId: ").Append(VendorTaxId).Append("\n");
            sb.Append("  WorkflowCompleteDate: ").Append(WorkflowCompleteDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequest);
        }

        /// <summary>
        /// Returns true if PaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AmountWithoutVat == input.AmountWithoutVat ||
                    (this.AmountWithoutVat != null &&
                    this.AmountWithoutVat.Equals(input.AmountWithoutVat))
                ) &&
                (
                    this.ApprovalStatus == input.ApprovalStatus ||
                    (this.ApprovalStatus != null &&
                    this.ApprovalStatus.Equals(input.ApprovalStatus))
                ) &&
                (
                    this.ApprovedByDelegate == input.ApprovedByDelegate ||
                    (this.ApprovedByDelegate != null &&
                    this.ApprovedByDelegate.Equals(input.ApprovedByDelegate))
                ) &&
                (
                    this.AssignedByUsername == input.AssignedByUsername ||
                    (this.AssignedByUsername != null &&
                    this.AssignedByUsername.Equals(input.AssignedByUsername))
                ) &&
                (
                    this.AssignedDate == input.AssignedDate ||
                    (this.AssignedDate != null &&
                    this.AssignedDate.Equals(input.AssignedDate))
                ) &&
                (
                    this.BuyerCostCenter == input.BuyerCostCenter ||
                    (this.BuyerCostCenter != null &&
                    this.BuyerCostCenter.Equals(input.BuyerCostCenter))
                ) &&
                (
                    this.CalculatedAmount == input.CalculatedAmount ||
                    (this.CalculatedAmount != null &&
                    this.CalculatedAmount.Equals(input.CalculatedAmount))
                ) &&
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) &&
                (
                    this.CompanyBillToAddress == input.CompanyBillToAddress ||
                    (this.CompanyBillToAddress != null &&
                    this.CompanyBillToAddress.Equals(input.CompanyBillToAddress))
                ) &&
                (
                    this.CompanyShipToAddress == input.CompanyShipToAddress ||
                    (this.CompanyShipToAddress != null &&
                    this.CompanyShipToAddress.Equals(input.CompanyShipToAddress))
                ) &&
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    this.CreatedByUsername == input.CreatedByUsername ||
                    (this.CreatedByUsername != null &&
                    this.CreatedByUsername.Equals(input.CreatedByUsername))
                ) &&
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) &&
                (
                    this.Custom1 == input.Custom1 ||
                    (this.Custom1 != null &&
                    this.Custom1.Equals(input.Custom1))
                ) &&
                (
                    this.Custom10 == input.Custom10 ||
                    (this.Custom10 != null &&
                    this.Custom10.Equals(input.Custom10))
                ) &&
                (
                    this.Custom11 == input.Custom11 ||
                    (this.Custom11 != null &&
                    this.Custom11.Equals(input.Custom11))
                ) &&
                (
                    this.Custom12 == input.Custom12 ||
                    (this.Custom12 != null &&
                    this.Custom12.Equals(input.Custom12))
                ) &&
                (
                    this.Custom13 == input.Custom13 ||
                    (this.Custom13 != null &&
                    this.Custom13.Equals(input.Custom13))
                ) &&
                (
                    this.Custom14 == input.Custom14 ||
                    (this.Custom14 != null &&
                    this.Custom14.Equals(input.Custom14))
                ) &&
                (
                    this.Custom15 == input.Custom15 ||
                    (this.Custom15 != null &&
                    this.Custom15.Equals(input.Custom15))
                ) &&
                (
                    this.Custom16 == input.Custom16 ||
                    (this.Custom16 != null &&
                    this.Custom16.Equals(input.Custom16))
                ) &&
                (
                    this.Custom17 == input.Custom17 ||
                    (this.Custom17 != null &&
                    this.Custom17.Equals(input.Custom17))
                ) &&
                (
                    this.Custom18 == input.Custom18 ||
                    (this.Custom18 != null &&
                    this.Custom18.Equals(input.Custom18))
                ) &&
                (
                    this.Custom19 == input.Custom19 ||
                    (this.Custom19 != null &&
                    this.Custom19.Equals(input.Custom19))
                ) &&
                (
                    this.Custom2 == input.Custom2 ||
                    (this.Custom2 != null &&
                    this.Custom2.Equals(input.Custom2))
                ) &&
                (
                    this.Custom20 == input.Custom20 ||
                    (this.Custom20 != null &&
                    this.Custom20.Equals(input.Custom20))
                ) &&
                (
                    this.Custom21 == input.Custom21 ||
                    (this.Custom21 != null &&
                    this.Custom21.Equals(input.Custom21))
                ) &&
                (
                    this.Custom22 == input.Custom22 ||
                    (this.Custom22 != null &&
                    this.Custom22.Equals(input.Custom22))
                ) &&
                (
                    this.Custom23 == input.Custom23 ||
                    (this.Custom23 != null &&
                    this.Custom23.Equals(input.Custom23))
                ) &&
                (
                    this.Custom24 == input.Custom24 ||
                    (this.Custom24 != null &&
                    this.Custom24.Equals(input.Custom24))
                ) &&
                (
                    this.Custom3 == input.Custom3 ||
                    (this.Custom3 != null &&
                    this.Custom3.Equals(input.Custom3))
                ) &&
                (
                    this.Custom4 == input.Custom4 ||
                    (this.Custom4 != null &&
                    this.Custom4.Equals(input.Custom4))
                ) &&
                (
                    this.Custom5 == input.Custom5 ||
                    (this.Custom5 != null &&
                    this.Custom5.Equals(input.Custom5))
                ) &&
                (
                    this.Custom6 == input.Custom6 ||
                    (this.Custom6 != null &&
                    this.Custom6.Equals(input.Custom6))
                ) &&
                (
                    this.Custom7 == input.Custom7 ||
                    (this.Custom7 != null &&
                    this.Custom7.Equals(input.Custom7))
                ) &&
                (
                    this.Custom8 == input.Custom8 ||
                    (this.Custom8 != null &&
                    this.Custom8.Equals(input.Custom8))
                ) &&
                (
                    this.Custom9 == input.Custom9 ||
                    (this.Custom9 != null &&
                    this.Custom9.Equals(input.Custom9))
                ) &&
                (
                    this.DataSource == input.DataSource ||
                    (this.DataSource != null &&
                    this.DataSource.Equals(input.DataSource))
                ) &&
                (
                    this.DeletedDate == input.DeletedDate ||
                    (this.DeletedDate != null &&
                    this.DeletedDate.Equals(input.DeletedDate))
                ) &&
                (
                    this.DeliverySlipNumber == input.DeliverySlipNumber ||
                    (this.DeliverySlipNumber != null &&
                    this.DeliverySlipNumber.Equals(input.DeliverySlipNumber))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.DiscountPercentage == input.DiscountPercentage ||
                    (this.DiscountPercentage != null &&
                    this.DiscountPercentage.Equals(input.DiscountPercentage))
                ) &&
                (
                    this.DiscountTerms == input.DiscountTerms ||
                    (this.DiscountTerms != null &&
                    this.DiscountTerms.Equals(input.DiscountTerms))
                ) &&
                (
                    this.EmployeeName == input.EmployeeName ||
                    (this.EmployeeName != null &&
                    this.EmployeeName.Equals(input.EmployeeName))
                ) &&
                (
                    this.ExternalPolicyId == input.ExternalPolicyId ||
                    (this.ExternalPolicyId != null &&
                    this.ExternalPolicyId.Equals(input.ExternalPolicyId))
                ) &&
                (
                    this.ExtractDate == input.ExtractDate ||
                    (this.ExtractDate != null &&
                    this.ExtractDate.Equals(input.ExtractDate))
                ) &&
                (
                    this.FirstApprovalDate == input.FirstApprovalDate ||
                    (this.FirstApprovalDate != null &&
                    this.FirstApprovalDate.Equals(input.FirstApprovalDate))
                ) &&
                (
                    this.FirstSubmitDate == input.FirstSubmitDate ||
                    (this.FirstSubmitDate != null &&
                    this.FirstSubmitDate.Equals(input.FirstSubmitDate))
                ) &&
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) &&
                (
                    this.InvoiceAmount == input.InvoiceAmount ||
                    (this.InvoiceAmount != null &&
                    this.InvoiceAmount.Equals(input.InvoiceAmount))
                ) &&
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) &&
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) &&
                (
                    this.InvoiceReceivedDate == input.InvoiceReceivedDate ||
                    (this.InvoiceReceivedDate != null &&
                    this.InvoiceReceivedDate.Equals(input.InvoiceReceivedDate))
                ) &&
                (
                    this.IsAssigned == input.IsAssigned ||
                    (this.IsAssigned != null &&
                    this.IsAssigned.Equals(input.IsAssigned))
                ) &&
                (
                    this.IsInvoiceConfirmed == input.IsInvoiceConfirmed ||
                    (this.IsInvoiceConfirmed != null &&
                    this.IsInvoiceConfirmed.Equals(input.IsInvoiceConfirmed))
                ) &&
                (
                    this.IsPaymentRequestDeleted == input.IsPaymentRequestDeleted ||
                    (this.IsPaymentRequestDeleted != null &&
                    this.IsPaymentRequestDeleted.Equals(input.IsPaymentRequestDeleted))
                ) &&
                (
                    this.IsPaymentRequestDuplicate == input.IsPaymentRequestDuplicate ||
                    (this.IsPaymentRequestDuplicate != null &&
                    this.IsPaymentRequestDuplicate.Equals(input.IsPaymentRequestDuplicate))
                ) &&
                (
                    this.IsTestTransaction == input.IsTestTransaction ||
                    (this.IsTestTransaction != null &&
                    this.IsTestTransaction.Equals(input.IsTestTransaction))
                ) &&
                (
                    this.LastSubmitDate == input.LastSubmitDate ||
                    (this.LastSubmitDate != null &&
                    this.LastSubmitDate.Equals(input.LastSubmitDate))
                ) &&
                (
                    this.LedgerCode == input.LedgerCode ||
                    (this.LedgerCode != null &&
                    this.LedgerCode.Equals(input.LedgerCode))
                ) &&
                (
                    this.LineItems == input.LineItems ||
                    (this.LineItems != null &&
                    this.LineItems.Equals(input.LineItems))
                ) &&
                (
                    this.LineItemTotalAmount == input.LineItemTotalAmount ||
                    (this.LineItemTotalAmount != null &&
                    this.LineItemTotalAmount.Equals(input.LineItemTotalAmount))
                ) &&
                (
                    this.LineItemVatAmount == input.LineItemVatAmount ||
                    (this.LineItemVatAmount != null &&
                    this.LineItemVatAmount.Equals(input.LineItemVatAmount))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.NotesToVendor == input.NotesToVendor ||
                    (this.NotesToVendor != null &&
                    this.NotesToVendor.Equals(input.NotesToVendor))
                ) &&
                (
                    this.OB10BuyerId == input.OB10BuyerId ||
                    (this.OB10BuyerId != null &&
                    this.OB10BuyerId.Equals(input.OB10BuyerId))
                ) &&
                (
                    this.OB10TransactionId == input.OB10TransactionId ||
                    (this.OB10TransactionId != null &&
                    this.OB10TransactionId.Equals(input.OB10TransactionId))
                ) &&
                (
                    this.OrgUnit01 == input.OrgUnit01 ||
                    (this.OrgUnit01 != null &&
                    this.OrgUnit01.Equals(input.OrgUnit01))
                ) &&
                (
                    this.OrgUnit02 == input.OrgUnit02 ||
                    (this.OrgUnit02 != null &&
                    this.OrgUnit02.Equals(input.OrgUnit02))
                ) &&
                (
                    this.OrgUnit03 == input.OrgUnit03 ||
                    (this.OrgUnit03 != null &&
                    this.OrgUnit03.Equals(input.OrgUnit03))
                ) &&
                (
                    this.OrgUnit04 == input.OrgUnit04 ||
                    (this.OrgUnit04 != null &&
                    this.OrgUnit04.Equals(input.OrgUnit04))
                ) &&
                (
                    this.OrgUnit05 == input.OrgUnit05 ||
                    (this.OrgUnit05 != null &&
                    this.OrgUnit05.Equals(input.OrgUnit05))
                ) &&
                (
                    this.OrgUnit06 == input.OrgUnit06 ||
                    (this.OrgUnit06 != null &&
                    this.OrgUnit06.Equals(input.OrgUnit06))
                ) &&
                (
                    this.PaidAmount == input.PaidAmount ||
                    (this.PaidAmount != null &&
                    this.PaidAmount.Equals(input.PaidAmount))
                ) &&
                (
                    this.PaidDate == input.PaidDate ||
                    (this.PaidDate != null &&
                    this.PaidDate.Equals(input.PaidDate))
                ) &&
                (
                    this.PaymentAdjustmentNotes == input.PaymentAdjustmentNotes ||
                    (this.PaymentAdjustmentNotes != null &&
                    this.PaymentAdjustmentNotes.Equals(input.PaymentAdjustmentNotes))
                ) &&
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) &&
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) &&
                (
                    this.PaymentRequestCreatedByTestUser == input.PaymentRequestCreatedByTestUser ||
                    (this.PaymentRequestCreatedByTestUser != null &&
                    this.PaymentRequestCreatedByTestUser.Equals(input.PaymentRequestCreatedByTestUser))
                ) &&
                (
                    this.PaymentRequestDeletedBy == input.PaymentRequestDeletedBy ||
                    (this.PaymentRequestDeletedBy != null &&
                    this.PaymentRequestDeletedBy.Equals(input.PaymentRequestDeletedBy))
                ) &&
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    (this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(input.PaymentStatus))
                ) &&
                (
                    this.PaymentTermsDays == input.PaymentTermsDays ||
                    (this.PaymentTermsDays != null &&
                    this.PaymentTermsDays.Equals(input.PaymentTermsDays))
                ) &&
                (
                    this.ProvincialTaxId == input.ProvincialTaxId ||
                    (this.ProvincialTaxId != null &&
                    this.ProvincialTaxId.Equals(input.ProvincialTaxId))
                ) &&
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) &&
                (
                    this.ReceiptConfirmationType == input.ReceiptConfirmationType ||
                    (this.ReceiptConfirmationType != null &&
                    this.ReceiptConfirmationType.Equals(input.ReceiptConfirmationType))
                ) &&
                (
                    this.ShippingAmount == input.ShippingAmount ||
                    (this.ShippingAmount != null &&
                    this.ShippingAmount.Equals(input.ShippingAmount))
                ) &&
                (
                    this.SubmittedByDelegate == input.SubmittedByDelegate ||
                    (this.SubmittedByDelegate != null &&
                    this.SubmittedByDelegate.Equals(input.SubmittedByDelegate))
                ) &&
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) &&
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) &&
                (
                    this.TaxCode2 == input.TaxCode2 ||
                    (this.TaxCode2 != null &&
                    this.TaxCode2.Equals(input.TaxCode2))
                ) &&
                (
                    this.TaxCode3 == input.TaxCode3 ||
                    (this.TaxCode3 != null &&
                    this.TaxCode3.Equals(input.TaxCode3))
                ) &&
                (
                    this.TaxCode4 == input.TaxCode4 ||
                    (this.TaxCode4 != null &&
                    this.TaxCode4.Equals(input.TaxCode4))
                ) &&
                (
                    this.TotalApprovedAmount == input.TotalApprovedAmount ||
                    (this.TotalApprovedAmount != null &&
                    this.TotalApprovedAmount.Equals(input.TotalApprovedAmount))
                ) &&
                (
                    this.URI == input.URI ||
                    (this.URI != null &&
                    this.URI.Equals(input.URI))
                ) &&
                (
                    this.UserCreationDate == input.UserCreationDate ||
                    (this.UserCreationDate != null &&
                    this.UserCreationDate.Equals(input.UserCreationDate))
                ) &&
                (
                    this.VatAmountFour == input.VatAmountFour ||
                    (this.VatAmountFour != null &&
                    this.VatAmountFour.Equals(input.VatAmountFour))
                ) &&
                (
                    this.VatAmountOne == input.VatAmountOne ||
                    (this.VatAmountOne != null &&
                    this.VatAmountOne.Equals(input.VatAmountOne))
                ) &&
                (
                    this.VatAmountThree == input.VatAmountThree ||
                    (this.VatAmountThree != null &&
                    this.VatAmountThree.Equals(input.VatAmountThree))
                ) &&
                (
                    this.VatAmountTwo == input.VatAmountTwo ||
                    (this.VatAmountTwo != null &&
                    this.VatAmountTwo.Equals(input.VatAmountTwo))
                ) &&
                (
                    this.VatRateFour == input.VatRateFour ||
                    (this.VatRateFour != null &&
                    this.VatRateFour.Equals(input.VatRateFour))
                ) &&
                (
                    this.VatRateOne == input.VatRateOne ||
                    (this.VatRateOne != null &&
                    this.VatRateOne.Equals(input.VatRateOne))
                ) &&
                (
                    this.VatRateThree == input.VatRateThree ||
                    (this.VatRateThree != null &&
                    this.VatRateThree.Equals(input.VatRateThree))
                ) &&
                (
                    this.VatRateTwo == input.VatRateTwo ||
                    (this.VatRateTwo != null &&
                    this.VatRateTwo.Equals(input.VatRateTwo))
                ) &&
                (
                    this.VendorRemitAddress == input.VendorRemitAddress ||
                    (this.VendorRemitAddress != null &&
                    this.VendorRemitAddress.Equals(input.VendorRemitAddress))
                ) &&
                (
                    this.VendorShipFromAddress == input.VendorShipFromAddress ||
                    (this.VendorShipFromAddress != null &&
                    this.VendorShipFromAddress.Equals(input.VendorShipFromAddress))
                ) &&
                (
                    this.VendorTaxId == input.VendorTaxId ||
                    (this.VendorTaxId != null &&
                    this.VendorTaxId.Equals(input.VendorTaxId))
                ) &&
                (
                    this.WorkflowCompleteDate == input.WorkflowCompleteDate ||
                    (this.WorkflowCompleteDate != null &&
                    this.WorkflowCompleteDate.Equals(input.WorkflowCompleteDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountWithoutVat != null)
                    hashCode = hashCode * 59 + this.AmountWithoutVat.GetHashCode();
                if (this.ApprovalStatus != null)
                    hashCode = hashCode * 59 + this.ApprovalStatus.GetHashCode();
                if (this.ApprovedByDelegate != null)
                    hashCode = hashCode * 59 + this.ApprovedByDelegate.GetHashCode();
                if (this.AssignedByUsername != null)
                    hashCode = hashCode * 59 + this.AssignedByUsername.GetHashCode();
                if (this.AssignedDate != null)
                    hashCode = hashCode * 59 + this.AssignedDate.GetHashCode();
                if (this.BuyerCostCenter != null)
                    hashCode = hashCode * 59 + this.BuyerCostCenter.GetHashCode();
                if (this.CalculatedAmount != null)
                    hashCode = hashCode * 59 + this.CalculatedAmount.GetHashCode();
                if (this.CheckNumber != null)
                    hashCode = hashCode * 59 + this.CheckNumber.GetHashCode();
                if (this.CompanyBillToAddress != null)
                    hashCode = hashCode * 59 + this.CompanyBillToAddress.GetHashCode();
                if (this.CompanyShipToAddress != null)
                    hashCode = hashCode * 59 + this.CompanyShipToAddress.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CreatedByUsername != null)
                    hashCode = hashCode * 59 + this.CreatedByUsername.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Custom1 != null)
                    hashCode = hashCode * 59 + this.Custom1.GetHashCode();
                if (this.Custom10 != null)
                    hashCode = hashCode * 59 + this.Custom10.GetHashCode();
                if (this.Custom11 != null)
                    hashCode = hashCode * 59 + this.Custom11.GetHashCode();
                if (this.Custom12 != null)
                    hashCode = hashCode * 59 + this.Custom12.GetHashCode();
                if (this.Custom13 != null)
                    hashCode = hashCode * 59 + this.Custom13.GetHashCode();
                if (this.Custom14 != null)
                    hashCode = hashCode * 59 + this.Custom14.GetHashCode();
                if (this.Custom15 != null)
                    hashCode = hashCode * 59 + this.Custom15.GetHashCode();
                if (this.Custom16 != null)
                    hashCode = hashCode * 59 + this.Custom16.GetHashCode();
                if (this.Custom17 != null)
                    hashCode = hashCode * 59 + this.Custom17.GetHashCode();
                if (this.Custom18 != null)
                    hashCode = hashCode * 59 + this.Custom18.GetHashCode();
                if (this.Custom19 != null)
                    hashCode = hashCode * 59 + this.Custom19.GetHashCode();
                if (this.Custom2 != null)
                    hashCode = hashCode * 59 + this.Custom2.GetHashCode();
                if (this.Custom20 != null)
                    hashCode = hashCode * 59 + this.Custom20.GetHashCode();
                if (this.Custom21 != null)
                    hashCode = hashCode * 59 + this.Custom21.GetHashCode();
                if (this.Custom22 != null)
                    hashCode = hashCode * 59 + this.Custom22.GetHashCode();
                if (this.Custom23 != null)
                    hashCode = hashCode * 59 + this.Custom23.GetHashCode();
                if (this.Custom24 != null)
                    hashCode = hashCode * 59 + this.Custom24.GetHashCode();
                if (this.Custom3 != null)
                    hashCode = hashCode * 59 + this.Custom3.GetHashCode();
                if (this.Custom4 != null)
                    hashCode = hashCode * 59 + this.Custom4.GetHashCode();
                if (this.Custom5 != null)
                    hashCode = hashCode * 59 + this.Custom5.GetHashCode();
                if (this.Custom6 != null)
                    hashCode = hashCode * 59 + this.Custom6.GetHashCode();
                if (this.Custom7 != null)
                    hashCode = hashCode * 59 + this.Custom7.GetHashCode();
                if (this.Custom8 != null)
                    hashCode = hashCode * 59 + this.Custom8.GetHashCode();
                if (this.Custom9 != null)
                    hashCode = hashCode * 59 + this.Custom9.GetHashCode();
                if (this.DataSource != null)
                    hashCode = hashCode * 59 + this.DataSource.GetHashCode();
                if (this.DeletedDate != null)
                    hashCode = hashCode * 59 + this.DeletedDate.GetHashCode();
                if (this.DeliverySlipNumber != null)
                    hashCode = hashCode * 59 + this.DeliverySlipNumber.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DiscountPercentage != null)
                    hashCode = hashCode * 59 + this.DiscountPercentage.GetHashCode();
                if (this.DiscountTerms != null)
                    hashCode = hashCode * 59 + this.DiscountTerms.GetHashCode();
                if (this.EmployeeName != null)
                    hashCode = hashCode * 59 + this.EmployeeName.GetHashCode();
                if (this.ExternalPolicyId != null)
                    hashCode = hashCode * 59 + this.ExternalPolicyId.GetHashCode();
                if (this.ExtractDate != null)
                    hashCode = hashCode * 59 + this.ExtractDate.GetHashCode();
                if (this.FirstApprovalDate != null)
                    hashCode = hashCode * 59 + this.FirstApprovalDate.GetHashCode();
                if (this.FirstSubmitDate != null)
                    hashCode = hashCode * 59 + this.FirstSubmitDate.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.InvoiceAmount != null)
                    hashCode = hashCode * 59 + this.InvoiceAmount.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.InvoiceReceivedDate != null)
                    hashCode = hashCode * 59 + this.InvoiceReceivedDate.GetHashCode();
                if (this.IsAssigned != null)
                    hashCode = hashCode * 59 + this.IsAssigned.GetHashCode();
                if (this.IsInvoiceConfirmed != null)
                    hashCode = hashCode * 59 + this.IsInvoiceConfirmed.GetHashCode();
                if (this.IsPaymentRequestDeleted != null)
                    hashCode = hashCode * 59 + this.IsPaymentRequestDeleted.GetHashCode();
                if (this.IsPaymentRequestDuplicate != null)
                    hashCode = hashCode * 59 + this.IsPaymentRequestDuplicate.GetHashCode();
                if (this.IsTestTransaction != null)
                    hashCode = hashCode * 59 + this.IsTestTransaction.GetHashCode();
                if (this.LastSubmitDate != null)
                    hashCode = hashCode * 59 + this.LastSubmitDate.GetHashCode();
                if (this.LedgerCode != null)
                    hashCode = hashCode * 59 + this.LedgerCode.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.LineItemTotalAmount != null)
                    hashCode = hashCode * 59 + this.LineItemTotalAmount.GetHashCode();
                if (this.LineItemVatAmount != null)
                    hashCode = hashCode * 59 + this.LineItemVatAmount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NotesToVendor != null)
                    hashCode = hashCode * 59 + this.NotesToVendor.GetHashCode();
                if (this.OB10BuyerId != null)
                    hashCode = hashCode * 59 + this.OB10BuyerId.GetHashCode();
                if (this.OB10TransactionId != null)
                    hashCode = hashCode * 59 + this.OB10TransactionId.GetHashCode();
                if (this.OrgUnit01 != null)
                    hashCode = hashCode * 59 + this.OrgUnit01.GetHashCode();
                if (this.OrgUnit02 != null)
                    hashCode = hashCode * 59 + this.OrgUnit02.GetHashCode();
                if (this.OrgUnit03 != null)
                    hashCode = hashCode * 59 + this.OrgUnit03.GetHashCode();
                if (this.OrgUnit04 != null)
                    hashCode = hashCode * 59 + this.OrgUnit04.GetHashCode();
                if (this.OrgUnit05 != null)
                    hashCode = hashCode * 59 + this.OrgUnit05.GetHashCode();
                if (this.OrgUnit06 != null)
                    hashCode = hashCode * 59 + this.OrgUnit06.GetHashCode();
                if (this.PaidAmount != null)
                    hashCode = hashCode * 59 + this.PaidAmount.GetHashCode();
                if (this.PaidDate != null)
                    hashCode = hashCode * 59 + this.PaidDate.GetHashCode();
                if (this.PaymentAdjustmentNotes != null)
                    hashCode = hashCode * 59 + this.PaymentAdjustmentNotes.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentRequestCreatedByTestUser != null)
                    hashCode = hashCode * 59 + this.PaymentRequestCreatedByTestUser.GetHashCode();
                if (this.PaymentRequestDeletedBy != null)
                    hashCode = hashCode * 59 + this.PaymentRequestDeletedBy.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.PaymentTermsDays != null)
                    hashCode = hashCode * 59 + this.PaymentTermsDays.GetHashCode();
                if (this.ProvincialTaxId != null)
                    hashCode = hashCode * 59 + this.ProvincialTaxId.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.ReceiptConfirmationType != null)
                    hashCode = hashCode * 59 + this.ReceiptConfirmationType.GetHashCode();
                if (this.ShippingAmount != null)
                    hashCode = hashCode * 59 + this.ShippingAmount.GetHashCode();
                if (this.SubmittedByDelegate != null)
                    hashCode = hashCode * 59 + this.SubmittedByDelegate.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxCode != null)
                    hashCode = hashCode * 59 + this.TaxCode.GetHashCode();
                if (this.TaxCode2 != null)
                    hashCode = hashCode * 59 + this.TaxCode2.GetHashCode();
                if (this.TaxCode3 != null)
                    hashCode = hashCode * 59 + this.TaxCode3.GetHashCode();
                if (this.TaxCode4 != null)
                    hashCode = hashCode * 59 + this.TaxCode4.GetHashCode();
                if (this.TotalApprovedAmount != null)
                    hashCode = hashCode * 59 + this.TotalApprovedAmount.GetHashCode();
                if (this.URI != null)
                    hashCode = hashCode * 59 + this.URI.GetHashCode();
                if (this.UserCreationDate != null)
                    hashCode = hashCode * 59 + this.UserCreationDate.GetHashCode();
                if (this.VatAmountFour != null)
                    hashCode = hashCode * 59 + this.VatAmountFour.GetHashCode();
                if (this.VatAmountOne != null)
                    hashCode = hashCode * 59 + this.VatAmountOne.GetHashCode();
                if (this.VatAmountThree != null)
                    hashCode = hashCode * 59 + this.VatAmountThree.GetHashCode();
                if (this.VatAmountTwo != null)
                    hashCode = hashCode * 59 + this.VatAmountTwo.GetHashCode();
                if (this.VatRateFour != null)
                    hashCode = hashCode * 59 + this.VatRateFour.GetHashCode();
                if (this.VatRateOne != null)
                    hashCode = hashCode * 59 + this.VatRateOne.GetHashCode();
                if (this.VatRateThree != null)
                    hashCode = hashCode * 59 + this.VatRateThree.GetHashCode();
                if (this.VatRateTwo != null)
                    hashCode = hashCode * 59 + this.VatRateTwo.GetHashCode();
                if (this.VendorRemitAddress != null)
                    hashCode = hashCode * 59 + this.VendorRemitAddress.GetHashCode();
                if (this.VendorShipFromAddress != null)
                    hashCode = hashCode * 59 + this.VendorShipFromAddress.GetHashCode();
                if (this.VendorTaxId != null)
                    hashCode = hashCode * 59 + this.VendorTaxId.GetHashCode();
                if (this.WorkflowCompleteDate != null)
                    hashCode = hashCode * 59 + this.WorkflowCompleteDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
