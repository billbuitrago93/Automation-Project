/* 
 * Payment Request
 *
 * A payment request is a request for payment (partial or full) of an invoice. This API provides methods to create or update a payment request, or view a payment request by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.PaymentRequestModels
{
    /// <summary>
    /// CreateResponse
    /// </summary>
    [DataContract]
    public partial class CreateResponse : IEquatable<CreateResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateResponse" /> class.
        /// </summary>
        /// <param name="iD">The state code..</param>
        /// <param name="uRI">The state code..</param>
        public CreateResponse(string iD = default(string), string uRI = default(string))
        {
            this.ID = iD;
            this.URI = uRI;
        }

        /// <summary>
        /// The state code.
        /// </summary>
        /// <value>The state code.</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// The state code.
        /// </summary>
        /// <value>The state code.</value>
        [DataMember(Name = "URI", EmitDefaultValue = false)]
        public string URI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateResponse {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  URI: ").Append(URI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateResponse);
        }

        /// <summary>
        /// Returns true if CreateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) &&
                (
                    this.URI == input.URI ||
                    (this.URI != null &&
                    this.URI.Equals(input.URI))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.URI != null)
                    hashCode = hashCode * 59 + this.URI.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
