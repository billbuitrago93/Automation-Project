/* 
 * Payment Request Digest
 *
 * A payment request digest is a collection of payment requests to invoice vendors. This API provides methods to view all payment requests corresponding to search parameters, or view a payment request digest by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.PaymentRequestDigestModels
{
    /// <summary>
    /// PaymentRequestDigestCollection
    /// </summary>
    [DataContract]
    public partial class PaymentRequestDigestCollection : IEquatable<PaymentRequestDigestCollection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestDigestCollection" /> class.
        /// </summary>
        /// <param name="items">items.</param>
        /// <param name="nextPage">The URI of the next page of results, if any..</param>
        /// <param name="paymentRequestDigest">paymentRequestDigest.</param>
        /// <param name="totalCount">totalCount.</param>
        public PaymentRequestDigestCollection(PaymentRequestDigest items = default(PaymentRequestDigest), string nextPage = default(string), PaymentRequestDigest paymentRequestDigest = default(PaymentRequestDigest), int? totalCount = default(int?))
        {
            this.Items = items;
            this.NextPage = nextPage;
            this.PaymentRequestDigest = paymentRequestDigest;
            this.TotalCount = totalCount;
        }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "Items", EmitDefaultValue = false)]
        public PaymentRequestDigest Items { get; set; }

        /// <summary>
        /// The URI of the next page of results, if any.
        /// </summary>
        /// <value>The URI of the next page of results, if any.</value>
        [DataMember(Name = "NextPage", EmitDefaultValue = false)]
        public string NextPage { get; set; }

        /// <summary>
        /// Gets or Sets PaymentRequestDigest
        /// </summary>
        [DataMember(Name = "PaymentRequestDigest", EmitDefaultValue = false)]
        public PaymentRequestDigest PaymentRequestDigest { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name = "TotalCount", EmitDefaultValue = false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequestDigestCollection {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PaymentRequestDigest: ").Append(PaymentRequestDigest).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequestDigestCollection);
        }

        /// <summary>
        /// Returns true if PaymentRequestDigestCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequestDigestCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequestDigestCollection input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) &&
                (
                    this.NextPage == input.NextPage ||
                    (this.NextPage != null &&
                    this.NextPage.Equals(input.NextPage))
                ) &&
                (
                    this.PaymentRequestDigest == input.PaymentRequestDigest ||
                    (this.PaymentRequestDigest != null &&
                    this.PaymentRequestDigest.Equals(input.PaymentRequestDigest))
                ) &&
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.NextPage != null)
                    hashCode = hashCode * 59 + this.NextPage.GetHashCode();
                if (this.PaymentRequestDigest != null)
                    hashCode = hashCode * 59 + this.PaymentRequestDigest.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
