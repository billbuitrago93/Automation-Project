/* 
 * Vendors
 *
 * An invoice is a bill of sale for goods or services provided by a vendor. This API provides methods to create, update, or delete invoice vendors.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.VendorModels
{
    /// <summary>
    /// VendorBank
    /// </summary>
    [DataContract]
    public partial class VendorBank : IEquatable<VendorBank>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorBank" /> class.
        /// </summary>
        /// <param name="accountNumber">The account number..</param>
        /// <param name="accountType">The account type..</param>
        /// <param name="addressCode">The Address Code..</param>
        /// <param name="bankCode">Bank Code.</param>
        /// <param name="bankName">The bank name..</param>
        /// <param name="branchCode">Branch Code.</param>
        /// <param name="branchLocation">The branch location.</param>
        /// <param name="countryCode">The country code..</param>
        /// <param name="currencyAlphaCode">The currency alpha Code..</param>
        /// <param name="iD">The unique identifier of the resource..</param>
        /// <param name="isActive">Is information active.</param>
        /// <param name="nameOnAccount">The name on the account..</param>
        /// <param name="routingNumber">The routing number..</param>
        /// <param name="statusList">statusList.</param>
        /// <param name="transType">The trans type..</param>
        /// <param name="uRI">The URI to the resource..</param>
        /// <param name="vendorCode">The vendor code of the request..</param>
        public VendorBank(string accountNumber = default(string), string accountType = default(string), string addressCode = default(string), string bankCode = default(string), string bankName = default(string), string branchCode = default(string), string branchLocation = default(string), string countryCode = default(string), string currencyAlphaCode = default(string), string iD = default(string), string isActive = default(string), string nameOnAccount = default(string), string routingNumber = default(string), Status statusList = default(Status), string transType = default(string), string uRI = default(string), string vendorCode = default(string))
        {
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.AddressCode = addressCode;
            this.BankCode = bankCode;
            this.BankName = bankName;
            this.BranchCode = branchCode;
            this.BranchLocation = branchLocation;
            this.CountryCode = countryCode;
            this.CurrencyAlphaCode = currencyAlphaCode;
            this.ID = iD;
            this.IsActive = isActive;
            this.NameOnAccount = nameOnAccount;
            this.RoutingNumber = routingNumber;
            this.StatusList = statusList;
            this.TransType = transType;
            this.URI = uRI;
            this.VendorCode = vendorCode;
        }

        /// <summary>
        /// The account number.
        /// </summary>
        /// <value>The account number.</value>
        [DataMember(Name = "AccountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The account type.
        /// </summary>
        /// <value>The account type.</value>
        [DataMember(Name = "AccountType", EmitDefaultValue = false)]
        public string AccountType { get; set; }

        /// <summary>
        /// The Address Code.
        /// </summary>
        /// <value>The Address Code.</value>
        [DataMember(Name = "AddressCode", EmitDefaultValue = false)]
        public string AddressCode { get; set; }

        /// <summary>
        /// Bank Code
        /// </summary>
        /// <value>Bank Code</value>
        [DataMember(Name = "BankCode", EmitDefaultValue = false)]
        public string BankCode { get; set; }

        /// <summary>
        /// The bank name.
        /// </summary>
        /// <value>The bank name.</value>
        [DataMember(Name = "BankName", EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// Branch Code
        /// </summary>
        /// <value>Branch Code</value>
        [DataMember(Name = "BranchCode", EmitDefaultValue = false)]
        public string BranchCode { get; set; }

        /// <summary>
        /// The branch location
        /// </summary>
        /// <value>The branch location</value>
        [DataMember(Name = "BranchLocation", EmitDefaultValue = false)]
        public string BranchLocation { get; set; }

        /// <summary>
        /// The country code.
        /// </summary>
        /// <value>The country code.</value>
        [DataMember(Name = "CountryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The currency alpha Code.
        /// </summary>
        /// <value>The currency alpha Code.</value>
        [DataMember(Name = "CurrencyAlphaCode", EmitDefaultValue = false)]
        public string CurrencyAlphaCode { get; set; }

        /// <summary>
        /// The unique identifier of the resource.
        /// </summary>
        /// <value>The unique identifier of the resource.</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Is information active
        /// </summary>
        /// <value>Is information active</value>
        [DataMember(Name = "IsActive", EmitDefaultValue = false)]
        public string IsActive { get; set; }

        /// <summary>
        /// The name on the account.
        /// </summary>
        /// <value>The name on the account.</value>
        [DataMember(Name = "NameOnAccount", EmitDefaultValue = false)]
        public string NameOnAccount { get; set; }

        /// <summary>
        /// The routing number.
        /// </summary>
        /// <value>The routing number.</value>
        [DataMember(Name = "RoutingNumber", EmitDefaultValue = false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets StatusList
        /// </summary>
        [DataMember(Name = "StatusList", EmitDefaultValue = false)]
        public Status StatusList { get; set; }

        /// <summary>
        /// The trans type.
        /// </summary>
        /// <value>The trans type.</value>
        [DataMember(Name = "TransType", EmitDefaultValue = false)]
        public string TransType { get; set; }

        /// <summary>
        /// The URI to the resource.
        /// </summary>
        /// <value>The URI to the resource.</value>
        [DataMember(Name = "URI", EmitDefaultValue = false)]
        public string URI { get; set; }

        /// <summary>
        /// The vendor code of the request.
        /// </summary>
        /// <value>The vendor code of the request.</value>
        [DataMember(Name = "VendorCode", EmitDefaultValue = false)]
        public string VendorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorBank {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AddressCode: ").Append(AddressCode).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  BranchLocation: ").Append(BranchLocation).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CurrencyAlphaCode: ").Append(CurrencyAlphaCode).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  NameOnAccount: ").Append(NameOnAccount).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  StatusList: ").Append(StatusList).Append("\n");
            sb.Append("  TransType: ").Append(TransType).Append("\n");
            sb.Append("  URI: ").Append(URI).Append("\n");
            sb.Append("  VendorCode: ").Append(VendorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorBank);
        }

        /// <summary>
        /// Returns true if VendorBank instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorBank to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorBank input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) &&
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) &&
                (
                    this.AddressCode == input.AddressCode ||
                    (this.AddressCode != null &&
                    this.AddressCode.Equals(input.AddressCode))
                ) &&
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) &&
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) &&
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) &&
                (
                    this.BranchLocation == input.BranchLocation ||
                    (this.BranchLocation != null &&
                    this.BranchLocation.Equals(input.BranchLocation))
                ) &&
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    this.CurrencyAlphaCode == input.CurrencyAlphaCode ||
                    (this.CurrencyAlphaCode != null &&
                    this.CurrencyAlphaCode.Equals(input.CurrencyAlphaCode))
                ) &&
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) &&
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) &&
                (
                    this.NameOnAccount == input.NameOnAccount ||
                    (this.NameOnAccount != null &&
                    this.NameOnAccount.Equals(input.NameOnAccount))
                ) &&
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) &&
                (
                    this.StatusList == input.StatusList ||
                    (this.StatusList != null &&
                    this.StatusList.Equals(input.StatusList))
                ) &&
                (
                    this.TransType == input.TransType ||
                    (this.TransType != null &&
                    this.TransType.Equals(input.TransType))
                ) &&
                (
                    this.URI == input.URI ||
                    (this.URI != null &&
                    this.URI.Equals(input.URI))
                ) &&
                (
                    this.VendorCode == input.VendorCode ||
                    (this.VendorCode != null &&
                    this.VendorCode.Equals(input.VendorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AddressCode != null)
                    hashCode = hashCode * 59 + this.AddressCode.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.BranchLocation != null)
                    hashCode = hashCode * 59 + this.BranchLocation.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CurrencyAlphaCode != null)
                    hashCode = hashCode * 59 + this.CurrencyAlphaCode.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.NameOnAccount != null)
                    hashCode = hashCode * 59 + this.NameOnAccount.GetHashCode();
                if (this.RoutingNumber != null)
                    hashCode = hashCode * 59 + this.RoutingNumber.GetHashCode();
                if (this.StatusList != null)
                    hashCode = hashCode * 59 + this.StatusList.GetHashCode();
                if (this.TransType != null)
                    hashCode = hashCode * 59 + this.TransType.GetHashCode();
                if (this.URI != null)
                    hashCode = hashCode * 59 + this.URI.GetHashCode();
                if (this.VendorCode != null)
                    hashCode = hashCode * 59 + this.VendorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
