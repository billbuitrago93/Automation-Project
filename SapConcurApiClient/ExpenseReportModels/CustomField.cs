/* 
 * Reports
 *
 * Get expense reports for a user or company, and update existing reports or create new reports.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.ExpenseReportModels
{
    /// <summary>
    /// CustomField
    /// </summary>
    [DataContract]
    public partial class CustomField : IEquatable<CustomField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomField" /> class.
        /// </summary>
        /// <param name="code">For list fields, this is the list item code..</param>
        /// <param name="listItemID">For list fields, this is the list item ID..</param>
        /// <param name="type">The custom field type. Supported values: Amount, Boolean, ConnectedList, Date, Integer, List, Number, Text.</param>
        /// <param name="value">The value in the Org Unit or Custom field. For list fields, this is the name of the list item.  Maximum length: 48 characters.</param>
        public CustomField(string code = default(string), string listItemID = default(string), string type = default(string), string value = default(string))
        {
            this.Code = code;
            this.ListItemID = listItemID;
            this.Type = type;
            this.Value = value;
        }

        /// <summary>
        /// For list fields, this is the list item code.
        /// </summary>
        /// <value>For list fields, this is the list item code.</value>
        [DataMember(Name = "Code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// For list fields, this is the list item ID.
        /// </summary>
        /// <value>For list fields, this is the list item ID.</value>
        [DataMember(Name = "ListItemID", EmitDefaultValue = false)]
        public string ListItemID { get; set; }

        /// <summary>
        /// The custom field type. Supported values: Amount, Boolean, ConnectedList, Date, Integer, List, Number, Text
        /// </summary>
        /// <value>The custom field type. Supported values: Amount, Boolean, ConnectedList, Date, Integer, List, Number, Text</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The value in the Org Unit or Custom field. For list fields, this is the name of the list item.  Maximum length: 48 characters
        /// </summary>
        /// <value>The value in the Org Unit or Custom field. For list fields, this is the name of the list item.  Maximum length: 48 characters</value>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomField {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ListItemID: ").Append(ListItemID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomField);
        }

        /// <summary>
        /// Returns true if CustomField instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomField input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.ListItemID == input.ListItemID ||
                    (this.ListItemID != null &&
                    this.ListItemID.Equals(input.ListItemID))
                ) &&
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ListItemID != null)
                    hashCode = hashCode * 59 + this.ListItemID.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
