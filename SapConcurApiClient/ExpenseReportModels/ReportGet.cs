/* 
 * Reports
 *
 * Get expense reports for a user or company, and update existing reports or create new reports.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SapConcurApiClient.ExpenseReportModels
{
    /// <summary>
    /// ReportGet
    /// </summary>
    [DataContract]
    public partial class ReportGet : IEquatable<ReportGet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportGet" /> class.
        /// </summary>
        /// <param name="amountDueCompanyCard">The total amount due to the company card for the report. Maximum 23 characters..</param>
        /// <param name="amountDueEmployee">The total amount due to the employee for the report. Maximum 23 characters..</param>
        /// <param name="approvalStatusCode">The approval status code for the report..</param>
        /// <param name="approvalStatusName">The report&#39;s approval status, in the OAuth consumer&#39;s language..</param>
        /// <param name="approverLoginID">The Login ID of the report owner&#39;s expense approver..</param>
        /// <param name="approverName">The name of the report owner&#39;s expense approver..</param>
        /// <param name="country">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US..</param>
        /// <param name="countrySubdivision">The report country subdivision.  Format: ISO 3166-2:2007 country subdivision..</param>
        /// <param name="createDate">The date the report was created..</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona..</param>
        /// <param name="custom1">custom1.</param>
        /// <param name="custom10">custom10.</param>
        /// <param name="custom11">custom11.</param>
        /// <param name="custom12">custom12.</param>
        /// <param name="custom13">custom13.</param>
        /// <param name="custom14">custom14.</param>
        /// <param name="custom15">custom15.</param>
        /// <param name="custom16">custom16.</param>
        /// <param name="custom17">custom17.</param>
        /// <param name="custom18">custom18.</param>
        /// <param name="custom19">custom19.</param>
        /// <param name="custom2">custom2.</param>
        /// <param name="custom20">custom20.</param>
        /// <param name="custom3">custom3.</param>
        /// <param name="custom4">custom4.</param>
        /// <param name="custom5">custom5.</param>
        /// <param name="custom6">custom6.</param>
        /// <param name="custom7">custom7.</param>
        /// <param name="custom8">custom8.</param>
        /// <param name="custom9">custom9.</param>
        /// <param name="everSentBack">Whether the report has ever been sent back to the employee. Format: Y/N.</param>
        /// <param name="hasException">Whether the report has exceptions. Format: Y/N .</param>
        /// <param name="iD">The unique identifier of the resource..</param>
        /// <param name="lastComment">The text of the most recent comment on the report..</param>
        /// <param name="lastModifiedDate">The date the report header was last modified..</param>
        /// <param name="ledgerName">The name of the expense report ledger. Maximum 20 characters..</param>
        /// <param name="name">The name of the report..</param>
        /// <param name="orgUnit1">orgUnit1.</param>
        /// <param name="orgUnit2">orgUnit2.</param>
        /// <param name="orgUnit3">orgUnit3.</param>
        /// <param name="orgUnit4">orgUnit4.</param>
        /// <param name="orgUnit5">orgUnit5.</param>
        /// <param name="orgUnit6">orgUnit6.</param>
        /// <param name="ownerLoginID">The Login ID of the user this report belongs to..</param>
        /// <param name="ownerName">The name of the expense report owner..</param>
        /// <param name="paidDate">The date when all journal entries in the report were integrated with or extracted to the financial system..</param>
        /// <param name="paymentStatusCode">The code for the payment status of the report..</param>
        /// <param name="paymentStatusName">The report&#39;s payment status, in the OAuth consumer&#39;s language..</param>
        /// <param name="personalAmount">The total amount of expenses marked as personal. Maximum 23 characters..</param>
        /// <param name="policyID">The unique identifier of the policy that applies to this report. Maximum 64 characters..</param>
        /// <param name="processingPaymentDate">The date that the report completed all approvals and was ready to be extracted for payment..</param>
        /// <param name="receiptsReceived">If Y, then this report has its receipt receipt confirmed by the Expense Processor. Format: Y/N.</param>
        /// <param name="submitDate">The date the report was submitted..</param>
        /// <param name="total">The total amount of the report..</param>
        /// <param name="totalApprovedAmount">The total amount of approved expenses in the report. Maximum 23 characters..</param>
        /// <param name="totalClaimedAmount">The total amount of all non-personal expenses in the report. Maximum 23 characters..</param>
        /// <param name="uRI">The URI to the resource..</param>
        /// <param name="userDefinedDate">The date of the report assigned by the user..</param>
        /// <param name="workflowActionUrl">The URL to post a workflow action to the report using the \&quot;Post Report Workflow Action\&quot; function..</param>
        public ReportGet(double? amountDueCompanyCard = default(double?), double? amountDueEmployee = default(double?), string approvalStatusCode = default(string), string approvalStatusName = default(string), string approverLoginID = default(string), string approverName = default(string), string country = default(string), string countrySubdivision = default(string), DateTime? createDate = default(DateTime?), string currencyCode = default(string), CustomField custom1 = default(CustomField), CustomField custom10 = default(CustomField), CustomField custom11 = default(CustomField), CustomField custom12 = default(CustomField), CustomField custom13 = default(CustomField), CustomField custom14 = default(CustomField), CustomField custom15 = default(CustomField), CustomField custom16 = default(CustomField), CustomField custom17 = default(CustomField), CustomField custom18 = default(CustomField), CustomField custom19 = default(CustomField), CustomField custom2 = default(CustomField), CustomField custom20 = default(CustomField), CustomField custom3 = default(CustomField), CustomField custom4 = default(CustomField), CustomField custom5 = default(CustomField), CustomField custom6 = default(CustomField), CustomField custom7 = default(CustomField), CustomField custom8 = default(CustomField), CustomField custom9 = default(CustomField), bool? everSentBack = default(bool?), bool? hasException = default(bool?), string iD = default(string), string lastComment = default(string), DateTime? lastModifiedDate = default(DateTime?), string ledgerName = default(string), string name = default(string), CustomField orgUnit1 = default(CustomField), CustomField orgUnit2 = default(CustomField), CustomField orgUnit3 = default(CustomField), CustomField orgUnit4 = default(CustomField), CustomField orgUnit5 = default(CustomField), CustomField orgUnit6 = default(CustomField), string ownerLoginID = default(string), string ownerName = default(string), DateTime? paidDate = default(DateTime?), string paymentStatusCode = default(string), string paymentStatusName = default(string), double? personalAmount = default(double?), string policyID = default(string), DateTime? processingPaymentDate = default(DateTime?), bool? receiptsReceived = default(bool?), DateTime? submitDate = default(DateTime?), double? total = default(double?), double? totalApprovedAmount = default(double?), double? totalClaimedAmount = default(double?), string uRI = default(string), DateTime? userDefinedDate = default(DateTime?), string workflowActionUrl = default(string))
        {
            this.AmountDueCompanyCard = amountDueCompanyCard;
            this.AmountDueEmployee = amountDueEmployee;
            this.ApprovalStatusCode = approvalStatusCode;
            this.ApprovalStatusName = approvalStatusName;
            this.ApproverLoginID = approverLoginID;
            this.ApproverName = approverName;
            this.Country = country;
            this.CountrySubdivision = countrySubdivision;
            this.CreateDate = createDate;
            this.CurrencyCode = currencyCode;
            this.Custom1 = custom1;
            this.Custom10 = custom10;
            this.Custom11 = custom11;
            this.Custom12 = custom12;
            this.Custom13 = custom13;
            this.Custom14 = custom14;
            this.Custom15 = custom15;
            this.Custom16 = custom16;
            this.Custom17 = custom17;
            this.Custom18 = custom18;
            this.Custom19 = custom19;
            this.Custom2 = custom2;
            this.Custom20 = custom20;
            this.Custom3 = custom3;
            this.Custom4 = custom4;
            this.Custom5 = custom5;
            this.Custom6 = custom6;
            this.Custom7 = custom7;
            this.Custom8 = custom8;
            this.Custom9 = custom9;
            this.EverSentBack = everSentBack;
            this.HasException = hasException;
            this.ID = iD;
            this.LastComment = lastComment;
            this.LastModifiedDate = lastModifiedDate;
            this.LedgerName = ledgerName;
            this.Name = name;
            this.OrgUnit1 = orgUnit1;
            this.OrgUnit2 = orgUnit2;
            this.OrgUnit3 = orgUnit3;
            this.OrgUnit4 = orgUnit4;
            this.OrgUnit5 = orgUnit5;
            this.OrgUnit6 = orgUnit6;
            this.OwnerLoginID = ownerLoginID;
            this.OwnerName = ownerName;
            this.PaidDate = paidDate;
            this.PaymentStatusCode = paymentStatusCode;
            this.PaymentStatusName = paymentStatusName;
            this.PersonalAmount = personalAmount;
            this.PolicyID = policyID;
            this.ProcessingPaymentDate = processingPaymentDate;
            this.ReceiptsReceived = receiptsReceived;
            this.SubmitDate = submitDate;
            this.Total = total;
            this.TotalApprovedAmount = totalApprovedAmount;
            this.TotalClaimedAmount = totalClaimedAmount;
            this.URI = uRI;
            this.UserDefinedDate = userDefinedDate;
            this.WorkflowActionUrl = workflowActionUrl;
        }

        /// <summary>
        /// The total amount due to the company card for the report. Maximum 23 characters.
        /// </summary>
        /// <value>The total amount due to the company card for the report. Maximum 23 characters.</value>
        [DataMember(Name = "AmountDueCompanyCard", EmitDefaultValue = false)]
        public double? AmountDueCompanyCard { get; set; }

        /// <summary>
        /// The total amount due to the employee for the report. Maximum 23 characters.
        /// </summary>
        /// <value>The total amount due to the employee for the report. Maximum 23 characters.</value>
        [DataMember(Name = "AmountDueEmployee", EmitDefaultValue = false)]
        public double? AmountDueEmployee { get; set; }

        /// <summary>
        /// The approval status code for the report.
        /// </summary>
        /// <value>The approval status code for the report.</value>
        [DataMember(Name = "ApprovalStatusCode", EmitDefaultValue = false)]
        public string ApprovalStatusCode { get; set; }

        /// <summary>
        /// The report&#39;s approval status, in the OAuth consumer&#39;s language.
        /// </summary>
        /// <value>The report&#39;s approval status, in the OAuth consumer&#39;s language.</value>
        [DataMember(Name = "ApprovalStatusName", EmitDefaultValue = false)]
        public string ApprovalStatusName { get; set; }

        /// <summary>
        /// The Login ID of the report owner&#39;s expense approver.
        /// </summary>
        /// <value>The Login ID of the report owner&#39;s expense approver.</value>
        [DataMember(Name = "ApproverLoginID", EmitDefaultValue = false)]
        public string ApproverLoginID { get; set; }

        /// <summary>
        /// The name of the report owner&#39;s expense approver.
        /// </summary>
        /// <value>The name of the report owner&#39;s expense approver.</value>
        [DataMember(Name = "ApproverName", EmitDefaultValue = false)]
        public string ApproverName { get; set; }

        /// <summary>
        /// The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US.
        /// </summary>
        /// <value>The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// The report country subdivision.  Format: ISO 3166-2:2007 country subdivision.
        /// </summary>
        /// <value>The report country subdivision.  Format: ISO 3166-2:2007 country subdivision.</value>
        [DataMember(Name = "CountrySubdivision", EmitDefaultValue = false)]
        public string CountrySubdivision { get; set; }

        /// <summary>
        /// The date the report was created.
        /// </summary>
        /// <value>The date the report was created.</value>
        [DataMember(Name = "CreateDate", EmitDefaultValue = false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona.
        /// </summary>
        /// <value>The 3-letter ISO 4217 currency code for the expense report currency. Examples: USD - US dollars; BRL - Brazilian real; CAD - Canadian dollar; CHF - Swiss franc; EUR - Euro; GBO - Pound sterling; HKD - Hong Kong dollar; INR - Indian rupee; MXN - Mexican peso; NOK - Norwegian krone; SEK - Swedish krona.</value>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Custom1
        /// </summary>
        [DataMember(Name = "Custom1", EmitDefaultValue = false)]
        public CustomField Custom1 { get; set; }

        /// <summary>
        /// Gets or Sets Custom10
        /// </summary>
        [DataMember(Name = "Custom10", EmitDefaultValue = false)]
        public CustomField Custom10 { get; set; }

        /// <summary>
        /// Gets or Sets Custom11
        /// </summary>
        [DataMember(Name = "Custom11", EmitDefaultValue = false)]
        public CustomField Custom11 { get; set; }

        /// <summary>
        /// Gets or Sets Custom12
        /// </summary>
        [DataMember(Name = "Custom12", EmitDefaultValue = false)]
        public CustomField Custom12 { get; set; }

        /// <summary>
        /// Gets or Sets Custom13
        /// </summary>
        [DataMember(Name = "Custom13", EmitDefaultValue = false)]
        public CustomField Custom13 { get; set; }

        /// <summary>
        /// Gets or Sets Custom14
        /// </summary>
        [DataMember(Name = "Custom14", EmitDefaultValue = false)]
        public CustomField Custom14 { get; set; }

        /// <summary>
        /// Gets or Sets Custom15
        /// </summary>
        [DataMember(Name = "Custom15", EmitDefaultValue = false)]
        public CustomField Custom15 { get; set; }

        /// <summary>
        /// Gets or Sets Custom16
        /// </summary>
        [DataMember(Name = "Custom16", EmitDefaultValue = false)]
        public CustomField Custom16 { get; set; }

        /// <summary>
        /// Gets or Sets Custom17
        /// </summary>
        [DataMember(Name = "Custom17", EmitDefaultValue = false)]
        public CustomField Custom17 { get; set; }

        /// <summary>
        /// Gets or Sets Custom18
        /// </summary>
        [DataMember(Name = "Custom18", EmitDefaultValue = false)]
        public CustomField Custom18 { get; set; }

        /// <summary>
        /// Gets or Sets Custom19
        /// </summary>
        [DataMember(Name = "Custom19", EmitDefaultValue = false)]
        public CustomField Custom19 { get; set; }

        /// <summary>
        /// Gets or Sets Custom2
        /// </summary>
        [DataMember(Name = "Custom2", EmitDefaultValue = false)]
        public CustomField Custom2 { get; set; }

        /// <summary>
        /// Gets or Sets Custom20
        /// </summary>
        [DataMember(Name = "Custom20", EmitDefaultValue = false)]
        public CustomField Custom20 { get; set; }

        /// <summary>
        /// Gets or Sets Custom3
        /// </summary>
        [DataMember(Name = "Custom3", EmitDefaultValue = false)]
        public CustomField Custom3 { get; set; }

        /// <summary>
        /// Gets or Sets Custom4
        /// </summary>
        [DataMember(Name = "Custom4", EmitDefaultValue = false)]
        public CustomField Custom4 { get; set; }

        /// <summary>
        /// Gets or Sets Custom5
        /// </summary>
        [DataMember(Name = "Custom5", EmitDefaultValue = false)]
        public CustomField Custom5 { get; set; }

        /// <summary>
        /// Gets or Sets Custom6
        /// </summary>
        [DataMember(Name = "Custom6", EmitDefaultValue = false)]
        public CustomField Custom6 { get; set; }

        /// <summary>
        /// Gets or Sets Custom7
        /// </summary>
        [DataMember(Name = "Custom7", EmitDefaultValue = false)]
        public CustomField Custom7 { get; set; }

        /// <summary>
        /// Gets or Sets Custom8
        /// </summary>
        [DataMember(Name = "Custom8", EmitDefaultValue = false)]
        public CustomField Custom8 { get; set; }

        /// <summary>
        /// Gets or Sets Custom9
        /// </summary>
        [DataMember(Name = "Custom9", EmitDefaultValue = false)]
        public CustomField Custom9 { get; set; }

        /// <summary>
        /// Whether the report has ever been sent back to the employee. Format: Y/N
        /// </summary>
        /// <value>Whether the report has ever been sent back to the employee. Format: Y/N</value>
        [DataMember(Name = "EverSentBack", EmitDefaultValue = false)]
        public bool? EverSentBack { get; set; }

        /// <summary>
        /// Whether the report has exceptions. Format: Y/N 
        /// </summary>
        /// <value>Whether the report has exceptions. Format: Y/N </value>
        [DataMember(Name = "HasException", EmitDefaultValue = false)]
        public bool? HasException { get; set; }

        /// <summary>
        /// The unique identifier of the resource.
        /// </summary>
        /// <value>The unique identifier of the resource.</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// The text of the most recent comment on the report.
        /// </summary>
        /// <value>The text of the most recent comment on the report.</value>
        [DataMember(Name = "LastComment", EmitDefaultValue = false)]
        public string LastComment { get; set; }

        /// <summary>
        /// The date the report header was last modified.
        /// </summary>
        /// <value>The date the report header was last modified.</value>
        [DataMember(Name = "LastModifiedDate", EmitDefaultValue = false)]
        public DateTime? LastModifiedDate { get; set; }

        /// <summary>
        /// The name of the expense report ledger. Maximum 20 characters.
        /// </summary>
        /// <value>The name of the expense report ledger. Maximum 20 characters.</value>
        [DataMember(Name = "LedgerName", EmitDefaultValue = false)]
        public string LedgerName { get; set; }

        /// <summary>
        /// The name of the report.
        /// </summary>
        /// <value>The name of the report.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrgUnit1
        /// </summary>
        [DataMember(Name = "OrgUnit1", EmitDefaultValue = false)]
        public CustomField OrgUnit1 { get; set; }

        /// <summary>
        /// Gets or Sets OrgUnit2
        /// </summary>
        [DataMember(Name = "OrgUnit2", EmitDefaultValue = false)]
        public CustomField OrgUnit2 { get; set; }

        /// <summary>
        /// Gets or Sets OrgUnit3
        /// </summary>
        [DataMember(Name = "OrgUnit3", EmitDefaultValue = false)]
        public CustomField OrgUnit3 { get; set; }

        /// <summary>
        /// Gets or Sets OrgUnit4
        /// </summary>
        [DataMember(Name = "OrgUnit4", EmitDefaultValue = false)]
        public CustomField OrgUnit4 { get; set; }

        /// <summary>
        /// Gets or Sets OrgUnit5
        /// </summary>
        [DataMember(Name = "OrgUnit5", EmitDefaultValue = false)]
        public CustomField OrgUnit5 { get; set; }

        /// <summary>
        /// Gets or Sets OrgUnit6
        /// </summary>
        [DataMember(Name = "OrgUnit6", EmitDefaultValue = false)]
        public CustomField OrgUnit6 { get; set; }

        /// <summary>
        /// The Login ID of the user this report belongs to.
        /// </summary>
        /// <value>The Login ID of the user this report belongs to.</value>
        [DataMember(Name = "OwnerLoginID", EmitDefaultValue = false)]
        public string OwnerLoginID { get; set; }

        /// <summary>
        /// The name of the expense report owner.
        /// </summary>
        /// <value>The name of the expense report owner.</value>
        [DataMember(Name = "OwnerName", EmitDefaultValue = false)]
        public string OwnerName { get; set; }

        /// <summary>
        /// The date when all journal entries in the report were integrated with or extracted to the financial system.
        /// </summary>
        /// <value>The date when all journal entries in the report were integrated with or extracted to the financial system.</value>
        [DataMember(Name = "PaidDate", EmitDefaultValue = false)]
        public DateTime? PaidDate { get; set; }

        /// <summary>
        /// The code for the payment status of the report.
        /// </summary>
        /// <value>The code for the payment status of the report.</value>
        [DataMember(Name = "PaymentStatusCode", EmitDefaultValue = false)]
        public string PaymentStatusCode { get; set; }

        /// <summary>
        /// The report&#39;s payment status, in the OAuth consumer&#39;s language.
        /// </summary>
        /// <value>The report&#39;s payment status, in the OAuth consumer&#39;s language.</value>
        [DataMember(Name = "PaymentStatusName", EmitDefaultValue = false)]
        public string PaymentStatusName { get; set; }

        /// <summary>
        /// The total amount of expenses marked as personal. Maximum 23 characters.
        /// </summary>
        /// <value>The total amount of expenses marked as personal. Maximum 23 characters.</value>
        [DataMember(Name = "PersonalAmount", EmitDefaultValue = false)]
        public double? PersonalAmount { get; set; }

        /// <summary>
        /// The unique identifier of the policy that applies to this report. Maximum 64 characters.
        /// </summary>
        /// <value>The unique identifier of the policy that applies to this report. Maximum 64 characters.</value>
        [DataMember(Name = "PolicyID", EmitDefaultValue = false)]
        public string PolicyID { get; set; }

        /// <summary>
        /// The date that the report completed all approvals and was ready to be extracted for payment.
        /// </summary>
        /// <value>The date that the report completed all approvals and was ready to be extracted for payment.</value>
        [DataMember(Name = "ProcessingPaymentDate", EmitDefaultValue = false)]
        public DateTime? ProcessingPaymentDate { get; set; }

        /// <summary>
        /// If Y, then this report has its receipt receipt confirmed by the Expense Processor. Format: Y/N
        /// </summary>
        /// <value>If Y, then this report has its receipt receipt confirmed by the Expense Processor. Format: Y/N</value>
        [DataMember(Name = "ReceiptsReceived", EmitDefaultValue = false)]
        public bool? ReceiptsReceived { get; set; }

        /// <summary>
        /// The date the report was submitted.
        /// </summary>
        /// <value>The date the report was submitted.</value>
        [DataMember(Name = "SubmitDate", EmitDefaultValue = false)]
        public DateTime? SubmitDate { get; set; }

        /// <summary>
        /// The total amount of the report.
        /// </summary>
        /// <value>The total amount of the report.</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double? Total { get; set; }

        /// <summary>
        /// The total amount of approved expenses in the report. Maximum 23 characters.
        /// </summary>
        /// <value>The total amount of approved expenses in the report. Maximum 23 characters.</value>
        [DataMember(Name = "TotalApprovedAmount", EmitDefaultValue = false)]
        public double? TotalApprovedAmount { get; set; }

        /// <summary>
        /// The total amount of all non-personal expenses in the report. Maximum 23 characters.
        /// </summary>
        /// <value>The total amount of all non-personal expenses in the report. Maximum 23 characters.</value>
        [DataMember(Name = "TotalClaimedAmount", EmitDefaultValue = false)]
        public double? TotalClaimedAmount { get; set; }

        /// <summary>
        /// The URI to the resource.
        /// </summary>
        /// <value>The URI to the resource.</value>
        [DataMember(Name = "URI", EmitDefaultValue = false)]
        public string URI { get; set; }

        /// <summary>
        /// The date of the report assigned by the user.
        /// </summary>
        /// <value>The date of the report assigned by the user.</value>
        [DataMember(Name = "UserDefinedDate", EmitDefaultValue = false)]
        public DateTime? UserDefinedDate { get; set; }

        /// <summary>
        /// The URL to post a workflow action to the report using the \&quot;Post Report Workflow Action\&quot; function.
        /// </summary>
        /// <value>The URL to post a workflow action to the report using the \&quot;Post Report Workflow Action\&quot; function.</value>
        [DataMember(Name = "WorkflowActionUrl", EmitDefaultValue = false)]
        public string WorkflowActionUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportGet {\n");
            sb.Append("  AmountDueCompanyCard: ").Append(AmountDueCompanyCard).Append("\n");
            sb.Append("  AmountDueEmployee: ").Append(AmountDueEmployee).Append("\n");
            sb.Append("  ApprovalStatusCode: ").Append(ApprovalStatusCode).Append("\n");
            sb.Append("  ApprovalStatusName: ").Append(ApprovalStatusName).Append("\n");
            sb.Append("  ApproverLoginID: ").Append(ApproverLoginID).Append("\n");
            sb.Append("  ApproverName: ").Append(ApproverName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountrySubdivision: ").Append(CountrySubdivision).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Custom1: ").Append(Custom1).Append("\n");
            sb.Append("  Custom10: ").Append(Custom10).Append("\n");
            sb.Append("  Custom11: ").Append(Custom11).Append("\n");
            sb.Append("  Custom12: ").Append(Custom12).Append("\n");
            sb.Append("  Custom13: ").Append(Custom13).Append("\n");
            sb.Append("  Custom14: ").Append(Custom14).Append("\n");
            sb.Append("  Custom15: ").Append(Custom15).Append("\n");
            sb.Append("  Custom16: ").Append(Custom16).Append("\n");
            sb.Append("  Custom17: ").Append(Custom17).Append("\n");
            sb.Append("  Custom18: ").Append(Custom18).Append("\n");
            sb.Append("  Custom19: ").Append(Custom19).Append("\n");
            sb.Append("  Custom2: ").Append(Custom2).Append("\n");
            sb.Append("  Custom20: ").Append(Custom20).Append("\n");
            sb.Append("  Custom3: ").Append(Custom3).Append("\n");
            sb.Append("  Custom4: ").Append(Custom4).Append("\n");
            sb.Append("  Custom5: ").Append(Custom5).Append("\n");
            sb.Append("  Custom6: ").Append(Custom6).Append("\n");
            sb.Append("  Custom7: ").Append(Custom7).Append("\n");
            sb.Append("  Custom8: ").Append(Custom8).Append("\n");
            sb.Append("  Custom9: ").Append(Custom9).Append("\n");
            sb.Append("  EverSentBack: ").Append(EverSentBack).Append("\n");
            sb.Append("  HasException: ").Append(HasException).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  LastComment: ").Append(LastComment).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  LedgerName: ").Append(LedgerName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrgUnit1: ").Append(OrgUnit1).Append("\n");
            sb.Append("  OrgUnit2: ").Append(OrgUnit2).Append("\n");
            sb.Append("  OrgUnit3: ").Append(OrgUnit3).Append("\n");
            sb.Append("  OrgUnit4: ").Append(OrgUnit4).Append("\n");
            sb.Append("  OrgUnit5: ").Append(OrgUnit5).Append("\n");
            sb.Append("  OrgUnit6: ").Append(OrgUnit6).Append("\n");
            sb.Append("  OwnerLoginID: ").Append(OwnerLoginID).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  PaymentStatusCode: ").Append(PaymentStatusCode).Append("\n");
            sb.Append("  PaymentStatusName: ").Append(PaymentStatusName).Append("\n");
            sb.Append("  PersonalAmount: ").Append(PersonalAmount).Append("\n");
            sb.Append("  PolicyID: ").Append(PolicyID).Append("\n");
            sb.Append("  ProcessingPaymentDate: ").Append(ProcessingPaymentDate).Append("\n");
            sb.Append("  ReceiptsReceived: ").Append(ReceiptsReceived).Append("\n");
            sb.Append("  SubmitDate: ").Append(SubmitDate).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalApprovedAmount: ").Append(TotalApprovedAmount).Append("\n");
            sb.Append("  TotalClaimedAmount: ").Append(TotalClaimedAmount).Append("\n");
            sb.Append("  URI: ").Append(URI).Append("\n");
            sb.Append("  UserDefinedDate: ").Append(UserDefinedDate).Append("\n");
            sb.Append("  WorkflowActionUrl: ").Append(WorkflowActionUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportGet);
        }

        /// <summary>
        /// Returns true if ReportGet instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportGet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportGet input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AmountDueCompanyCard == input.AmountDueCompanyCard ||
                    (this.AmountDueCompanyCard != null &&
                    this.AmountDueCompanyCard.Equals(input.AmountDueCompanyCard))
                ) &&
                (
                    this.AmountDueEmployee == input.AmountDueEmployee ||
                    (this.AmountDueEmployee != null &&
                    this.AmountDueEmployee.Equals(input.AmountDueEmployee))
                ) &&
                (
                    this.ApprovalStatusCode == input.ApprovalStatusCode ||
                    (this.ApprovalStatusCode != null &&
                    this.ApprovalStatusCode.Equals(input.ApprovalStatusCode))
                ) &&
                (
                    this.ApprovalStatusName == input.ApprovalStatusName ||
                    (this.ApprovalStatusName != null &&
                    this.ApprovalStatusName.Equals(input.ApprovalStatusName))
                ) &&
                (
                    this.ApproverLoginID == input.ApproverLoginID ||
                    (this.ApproverLoginID != null &&
                    this.ApproverLoginID.Equals(input.ApproverLoginID))
                ) &&
                (
                    this.ApproverName == input.ApproverName ||
                    (this.ApproverName != null &&
                    this.ApproverName.Equals(input.ApproverName))
                ) &&
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) &&
                (
                    this.CountrySubdivision == input.CountrySubdivision ||
                    (this.CountrySubdivision != null &&
                    this.CountrySubdivision.Equals(input.CountrySubdivision))
                ) &&
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) &&
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) &&
                (
                    this.Custom1 == input.Custom1 ||
                    (this.Custom1 != null &&
                    this.Custom1.Equals(input.Custom1))
                ) &&
                (
                    this.Custom10 == input.Custom10 ||
                    (this.Custom10 != null &&
                    this.Custom10.Equals(input.Custom10))
                ) &&
                (
                    this.Custom11 == input.Custom11 ||
                    (this.Custom11 != null &&
                    this.Custom11.Equals(input.Custom11))
                ) &&
                (
                    this.Custom12 == input.Custom12 ||
                    (this.Custom12 != null &&
                    this.Custom12.Equals(input.Custom12))
                ) &&
                (
                    this.Custom13 == input.Custom13 ||
                    (this.Custom13 != null &&
                    this.Custom13.Equals(input.Custom13))
                ) &&
                (
                    this.Custom14 == input.Custom14 ||
                    (this.Custom14 != null &&
                    this.Custom14.Equals(input.Custom14))
                ) &&
                (
                    this.Custom15 == input.Custom15 ||
                    (this.Custom15 != null &&
                    this.Custom15.Equals(input.Custom15))
                ) &&
                (
                    this.Custom16 == input.Custom16 ||
                    (this.Custom16 != null &&
                    this.Custom16.Equals(input.Custom16))
                ) &&
                (
                    this.Custom17 == input.Custom17 ||
                    (this.Custom17 != null &&
                    this.Custom17.Equals(input.Custom17))
                ) &&
                (
                    this.Custom18 == input.Custom18 ||
                    (this.Custom18 != null &&
                    this.Custom18.Equals(input.Custom18))
                ) &&
                (
                    this.Custom19 == input.Custom19 ||
                    (this.Custom19 != null &&
                    this.Custom19.Equals(input.Custom19))
                ) &&
                (
                    this.Custom2 == input.Custom2 ||
                    (this.Custom2 != null &&
                    this.Custom2.Equals(input.Custom2))
                ) &&
                (
                    this.Custom20 == input.Custom20 ||
                    (this.Custom20 != null &&
                    this.Custom20.Equals(input.Custom20))
                ) &&
                (
                    this.Custom3 == input.Custom3 ||
                    (this.Custom3 != null &&
                    this.Custom3.Equals(input.Custom3))
                ) &&
                (
                    this.Custom4 == input.Custom4 ||
                    (this.Custom4 != null &&
                    this.Custom4.Equals(input.Custom4))
                ) &&
                (
                    this.Custom5 == input.Custom5 ||
                    (this.Custom5 != null &&
                    this.Custom5.Equals(input.Custom5))
                ) &&
                (
                    this.Custom6 == input.Custom6 ||
                    (this.Custom6 != null &&
                    this.Custom6.Equals(input.Custom6))
                ) &&
                (
                    this.Custom7 == input.Custom7 ||
                    (this.Custom7 != null &&
                    this.Custom7.Equals(input.Custom7))
                ) &&
                (
                    this.Custom8 == input.Custom8 ||
                    (this.Custom8 != null &&
                    this.Custom8.Equals(input.Custom8))
                ) &&
                (
                    this.Custom9 == input.Custom9 ||
                    (this.Custom9 != null &&
                    this.Custom9.Equals(input.Custom9))
                ) &&
                (
                    this.EverSentBack == input.EverSentBack ||
                    (this.EverSentBack != null &&
                    this.EverSentBack.Equals(input.EverSentBack))
                ) &&
                (
                    this.HasException == input.HasException ||
                    (this.HasException != null &&
                    this.HasException.Equals(input.HasException))
                ) &&
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) &&
                (
                    this.LastComment == input.LastComment ||
                    (this.LastComment != null &&
                    this.LastComment.Equals(input.LastComment))
                ) &&
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                ) &&
                (
                    this.LedgerName == input.LedgerName ||
                    (this.LedgerName != null &&
                    this.LedgerName.Equals(input.LedgerName))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.OrgUnit1 == input.OrgUnit1 ||
                    (this.OrgUnit1 != null &&
                    this.OrgUnit1.Equals(input.OrgUnit1))
                ) &&
                (
                    this.OrgUnit2 == input.OrgUnit2 ||
                    (this.OrgUnit2 != null &&
                    this.OrgUnit2.Equals(input.OrgUnit2))
                ) &&
                (
                    this.OrgUnit3 == input.OrgUnit3 ||
                    (this.OrgUnit3 != null &&
                    this.OrgUnit3.Equals(input.OrgUnit3))
                ) &&
                (
                    this.OrgUnit4 == input.OrgUnit4 ||
                    (this.OrgUnit4 != null &&
                    this.OrgUnit4.Equals(input.OrgUnit4))
                ) &&
                (
                    this.OrgUnit5 == input.OrgUnit5 ||
                    (this.OrgUnit5 != null &&
                    this.OrgUnit5.Equals(input.OrgUnit5))
                ) &&
                (
                    this.OrgUnit6 == input.OrgUnit6 ||
                    (this.OrgUnit6 != null &&
                    this.OrgUnit6.Equals(input.OrgUnit6))
                ) &&
                (
                    this.OwnerLoginID == input.OwnerLoginID ||
                    (this.OwnerLoginID != null &&
                    this.OwnerLoginID.Equals(input.OwnerLoginID))
                ) &&
                (
                    this.OwnerName == input.OwnerName ||
                    (this.OwnerName != null &&
                    this.OwnerName.Equals(input.OwnerName))
                ) &&
                (
                    this.PaidDate == input.PaidDate ||
                    (this.PaidDate != null &&
                    this.PaidDate.Equals(input.PaidDate))
                ) &&
                (
                    this.PaymentStatusCode == input.PaymentStatusCode ||
                    (this.PaymentStatusCode != null &&
                    this.PaymentStatusCode.Equals(input.PaymentStatusCode))
                ) &&
                (
                    this.PaymentStatusName == input.PaymentStatusName ||
                    (this.PaymentStatusName != null &&
                    this.PaymentStatusName.Equals(input.PaymentStatusName))
                ) &&
                (
                    this.PersonalAmount == input.PersonalAmount ||
                    (this.PersonalAmount != null &&
                    this.PersonalAmount.Equals(input.PersonalAmount))
                ) &&
                (
                    this.PolicyID == input.PolicyID ||
                    (this.PolicyID != null &&
                    this.PolicyID.Equals(input.PolicyID))
                ) &&
                (
                    this.ProcessingPaymentDate == input.ProcessingPaymentDate ||
                    (this.ProcessingPaymentDate != null &&
                    this.ProcessingPaymentDate.Equals(input.ProcessingPaymentDate))
                ) &&
                (
                    this.ReceiptsReceived == input.ReceiptsReceived ||
                    (this.ReceiptsReceived != null &&
                    this.ReceiptsReceived.Equals(input.ReceiptsReceived))
                ) &&
                (
                    this.SubmitDate == input.SubmitDate ||
                    (this.SubmitDate != null &&
                    this.SubmitDate.Equals(input.SubmitDate))
                ) &&
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) &&
                (
                    this.TotalApprovedAmount == input.TotalApprovedAmount ||
                    (this.TotalApprovedAmount != null &&
                    this.TotalApprovedAmount.Equals(input.TotalApprovedAmount))
                ) &&
                (
                    this.TotalClaimedAmount == input.TotalClaimedAmount ||
                    (this.TotalClaimedAmount != null &&
                    this.TotalClaimedAmount.Equals(input.TotalClaimedAmount))
                ) &&
                (
                    this.URI == input.URI ||
                    (this.URI != null &&
                    this.URI.Equals(input.URI))
                ) &&
                (
                    this.UserDefinedDate == input.UserDefinedDate ||
                    (this.UserDefinedDate != null &&
                    this.UserDefinedDate.Equals(input.UserDefinedDate))
                ) &&
                (
                    this.WorkflowActionUrl == input.WorkflowActionUrl ||
                    (this.WorkflowActionUrl != null &&
                    this.WorkflowActionUrl.Equals(input.WorkflowActionUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountDueCompanyCard != null)
                    hashCode = hashCode * 59 + this.AmountDueCompanyCard.GetHashCode();
                if (this.AmountDueEmployee != null)
                    hashCode = hashCode * 59 + this.AmountDueEmployee.GetHashCode();
                if (this.ApprovalStatusCode != null)
                    hashCode = hashCode * 59 + this.ApprovalStatusCode.GetHashCode();
                if (this.ApprovalStatusName != null)
                    hashCode = hashCode * 59 + this.ApprovalStatusName.GetHashCode();
                if (this.ApproverLoginID != null)
                    hashCode = hashCode * 59 + this.ApproverLoginID.GetHashCode();
                if (this.ApproverName != null)
                    hashCode = hashCode * 59 + this.ApproverName.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CountrySubdivision != null)
                    hashCode = hashCode * 59 + this.CountrySubdivision.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Custom1 != null)
                    hashCode = hashCode * 59 + this.Custom1.GetHashCode();
                if (this.Custom10 != null)
                    hashCode = hashCode * 59 + this.Custom10.GetHashCode();
                if (this.Custom11 != null)
                    hashCode = hashCode * 59 + this.Custom11.GetHashCode();
                if (this.Custom12 != null)
                    hashCode = hashCode * 59 + this.Custom12.GetHashCode();
                if (this.Custom13 != null)
                    hashCode = hashCode * 59 + this.Custom13.GetHashCode();
                if (this.Custom14 != null)
                    hashCode = hashCode * 59 + this.Custom14.GetHashCode();
                if (this.Custom15 != null)
                    hashCode = hashCode * 59 + this.Custom15.GetHashCode();
                if (this.Custom16 != null)
                    hashCode = hashCode * 59 + this.Custom16.GetHashCode();
                if (this.Custom17 != null)
                    hashCode = hashCode * 59 + this.Custom17.GetHashCode();
                if (this.Custom18 != null)
                    hashCode = hashCode * 59 + this.Custom18.GetHashCode();
                if (this.Custom19 != null)
                    hashCode = hashCode * 59 + this.Custom19.GetHashCode();
                if (this.Custom2 != null)
                    hashCode = hashCode * 59 + this.Custom2.GetHashCode();
                if (this.Custom20 != null)
                    hashCode = hashCode * 59 + this.Custom20.GetHashCode();
                if (this.Custom3 != null)
                    hashCode = hashCode * 59 + this.Custom3.GetHashCode();
                if (this.Custom4 != null)
                    hashCode = hashCode * 59 + this.Custom4.GetHashCode();
                if (this.Custom5 != null)
                    hashCode = hashCode * 59 + this.Custom5.GetHashCode();
                if (this.Custom6 != null)
                    hashCode = hashCode * 59 + this.Custom6.GetHashCode();
                if (this.Custom7 != null)
                    hashCode = hashCode * 59 + this.Custom7.GetHashCode();
                if (this.Custom8 != null)
                    hashCode = hashCode * 59 + this.Custom8.GetHashCode();
                if (this.Custom9 != null)
                    hashCode = hashCode * 59 + this.Custom9.GetHashCode();
                if (this.EverSentBack != null)
                    hashCode = hashCode * 59 + this.EverSentBack.GetHashCode();
                if (this.HasException != null)
                    hashCode = hashCode * 59 + this.HasException.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.LastComment != null)
                    hashCode = hashCode * 59 + this.LastComment.GetHashCode();
                if (this.LastModifiedDate != null)
                    hashCode = hashCode * 59 + this.LastModifiedDate.GetHashCode();
                if (this.LedgerName != null)
                    hashCode = hashCode * 59 + this.LedgerName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrgUnit1 != null)
                    hashCode = hashCode * 59 + this.OrgUnit1.GetHashCode();
                if (this.OrgUnit2 != null)
                    hashCode = hashCode * 59 + this.OrgUnit2.GetHashCode();
                if (this.OrgUnit3 != null)
                    hashCode = hashCode * 59 + this.OrgUnit3.GetHashCode();
                if (this.OrgUnit4 != null)
                    hashCode = hashCode * 59 + this.OrgUnit4.GetHashCode();
                if (this.OrgUnit5 != null)
                    hashCode = hashCode * 59 + this.OrgUnit5.GetHashCode();
                if (this.OrgUnit6 != null)
                    hashCode = hashCode * 59 + this.OrgUnit6.GetHashCode();
                if (this.OwnerLoginID != null)
                    hashCode = hashCode * 59 + this.OwnerLoginID.GetHashCode();
                if (this.OwnerName != null)
                    hashCode = hashCode * 59 + this.OwnerName.GetHashCode();
                if (this.PaidDate != null)
                    hashCode = hashCode * 59 + this.PaidDate.GetHashCode();
                if (this.PaymentStatusCode != null)
                    hashCode = hashCode * 59 + this.PaymentStatusCode.GetHashCode();
                if (this.PaymentStatusName != null)
                    hashCode = hashCode * 59 + this.PaymentStatusName.GetHashCode();
                if (this.PersonalAmount != null)
                    hashCode = hashCode * 59 + this.PersonalAmount.GetHashCode();
                if (this.PolicyID != null)
                    hashCode = hashCode * 59 + this.PolicyID.GetHashCode();
                if (this.ProcessingPaymentDate != null)
                    hashCode = hashCode * 59 + this.ProcessingPaymentDate.GetHashCode();
                if (this.ReceiptsReceived != null)
                    hashCode = hashCode * 59 + this.ReceiptsReceived.GetHashCode();
                if (this.SubmitDate != null)
                    hashCode = hashCode * 59 + this.SubmitDate.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.TotalApprovedAmount != null)
                    hashCode = hashCode * 59 + this.TotalApprovedAmount.GetHashCode();
                if (this.TotalClaimedAmount != null)
                    hashCode = hashCode * 59 + this.TotalClaimedAmount.GetHashCode();
                if (this.URI != null)
                    hashCode = hashCode * 59 + this.URI.GetHashCode();
                if (this.UserDefinedDate != null)
                    hashCode = hashCode * 59 + this.UserDefinedDate.GetHashCode();
                if (this.WorkflowActionUrl != null)
                    hashCode = hashCode * 59 + this.WorkflowActionUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
