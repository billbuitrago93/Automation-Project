/* 
 * Reports
 *
 * Get expense reports for a user or company, and update existing reports or create new reports.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using RestSharp;
using SapConcurApiClient.Client;
using SapConcurApiClient.ExpenseReportModels;
using System.Collections.ObjectModel;

namespace SapConcurApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConcurExpenseReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all reports
        /// </summary>
        /// <remarks>
        /// Returns all reports owned by the user based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>ReportCollection</returns>
        ReportCollection ExpenseReportsGet(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null);

        /// <summary>
        /// Gets all reports
        /// </summary>
        /// <remarks>
        /// Returns all reports owned by the user based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of ReportCollection</returns>
        ApiResponse<ReportCollection> ExpenseReportsGetWithHttpInfo(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null);
        /// <summary>
        /// Gets a single report
        /// </summary>
        /// <remarks>
        /// Returns the specified report.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>ReportGet</returns>
        ReportGet ExpenseReportsIdGet(string id, string user = null);

        /// <summary>
        /// Gets a single report
        /// </summary>
        /// <remarks>
        /// Returns the specified report.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>ApiResponse of ReportGet</returns>
        ApiResponse<ReportGet> ExpenseReportsIdGetWithHttpInfo(string id, string user = null);
        /// <summary>
        /// Update report
        /// </summary>
        /// <remarks>
        /// Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Object</returns>
        Object ExpenseReportsIdPut(string id, ReportPut content, string user = null);

        /// <summary>
        /// Update report
        /// </summary>
        /// <remarks>
        /// Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ExpenseReportsIdPutWithHttpInfo(string id, ReportPut content, string user = null);
        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// Create an expense report with the supplied data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>CreateResponse</returns>
        CreateResponse ExpenseReportsPost(ReportPost content, string user = null);

        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// Create an expense report with the supplied data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        ApiResponse<CreateResponse> ExpenseReportsPostWithHttpInfo(ReportPost content, string user = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all reports
        /// </summary>
        /// <remarks>
        /// Returns all reports owned by the user based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>Task of ReportCollection</returns>
        System.Threading.Tasks.Task<ReportCollection> ExpenseReportsGetAsync(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null);

        /// <summary>
        /// Gets all reports
        /// </summary>
        /// <remarks>
        /// Returns all reports owned by the user based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (ReportCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportCollection>> ExpenseReportsGetAsyncWithHttpInfo(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null);
        /// <summary>
        /// Gets a single report
        /// </summary>
        /// <remarks>
        /// Returns the specified report.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>Task of ReportGet</returns>
        System.Threading.Tasks.Task<ReportGet> ExpenseReportsIdGetAsync(string id, string user = null);

        /// <summary>
        /// Gets a single report
        /// </summary>
        /// <remarks>
        /// Returns the specified report.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>Task of ApiResponse (ReportGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportGet>> ExpenseReportsIdGetAsyncWithHttpInfo(string id, string user = null);
        /// <summary>
        /// Update report
        /// </summary>
        /// <remarks>
        /// Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ExpenseReportsIdPutAsync(string id, ReportPut content, string user = null);

        /// <summary>
        /// Update report
        /// </summary>
        /// <remarks>
        /// Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExpenseReportsIdPutAsyncWithHttpInfo(string id, ReportPut content, string user = null);
        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// Create an expense report with the supplied data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of CreateResponse</returns>
        System.Threading.Tasks.Task<CreateResponse> ExpenseReportsPostAsync(ReportPost content, string user = null);

        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// Create an expense report with the supplied data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResponse>> ExpenseReportsPostAsyncWithHttpInfo(ReportPost content, string user = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConcurExpenseReportsApi : IConcurExpenseReportsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConcurExpenseReportsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConcurExpenseReportsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all reports Returns all reports owned by the user based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>ReportCollection</returns>
        public ReportCollection ExpenseReportsGet(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null)
        {
            ApiResponse<ReportCollection> localVarResponse = ExpenseReportsGetWithHttpInfo(offset, limit, user, approvalStatusCode, paymentStatusCode, currencyCode, paymentType, reimbursementMethod, approverLoginID, expenseTypeCode, attendeeTypeCode, countryCode, batchID, vendorName, hasVAT, hasImages, hasAttendees, hasBillableExpenses, isTestUser, expenseGroupConfigID, entryTransactionDateBefore, entryTransactionDateAfter, createDateBefore, createDateAfter, userDefinedDateBefore, userDefinedDateAfter, submitDateBefore, submitDateAfter, processingPaymentDateBefore, processingPaymentDateAfter, paidDateBefore, paidDateAfter, modifiedDateBefore, modifiedDateAfter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reports Returns all reports owned by the user based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>ApiResponse of ReportCollection</returns>
        public ApiResponse<ReportCollection> ExpenseReportsGetWithHttpInfo(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null)
        {

            var localVarPath = "/expense/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (approvalStatusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approvalStatusCode", approvalStatusCode)); // query parameter
            if (paymentStatusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentStatusCode", paymentStatusCode)); // query parameter
            if (currencyCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currencyCode", currencyCode)); // query parameter
            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (reimbursementMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reimbursementMethod", reimbursementMethod)); // query parameter
            if (approverLoginID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approverLoginID", approverLoginID)); // query parameter
            if (expenseTypeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expenseTypeCode", expenseTypeCode)); // query parameter
            if (attendeeTypeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attendeeTypeCode", attendeeTypeCode)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (batchID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchID", batchID)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorName", vendorName)); // query parameter
            if (hasVAT != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasVAT", hasVAT)); // query parameter
            if (hasImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasImages", hasImages)); // query parameter
            if (hasAttendees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasAttendees", hasAttendees)); // query parameter
            if (hasBillableExpenses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasBillableExpenses", hasBillableExpenses)); // query parameter
            if (isTestUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isTestUser", isTestUser)); // query parameter
            if (expenseGroupConfigID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expenseGroupConfigID", expenseGroupConfigID)); // query parameter
            if (entryTransactionDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryTransactionDateBefore", entryTransactionDateBefore)); // query parameter
            if (entryTransactionDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryTransactionDateAfter", entryTransactionDateAfter)); // query parameter
            if (createDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateBefore", createDateBefore)); // query parameter
            if (createDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateAfter", createDateAfter)); // query parameter
            if (userDefinedDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateBefore", userDefinedDateBefore)); // query parameter
            if (userDefinedDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateAfter", userDefinedDateAfter)); // query parameter
            if (submitDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateBefore", submitDateBefore)); // query parameter
            if (submitDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateAfter", submitDateAfter)); // query parameter
            if (processingPaymentDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processingPaymentDateBefore", processingPaymentDateBefore)); // query parameter
            if (processingPaymentDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processingPaymentDateAfter", processingPaymentDateAfter)); // query parameter
            if (paidDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateBefore", paidDateBefore)); // query parameter
            if (paidDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateAfter", paidDateAfter)); // query parameter
            if (modifiedDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedDateBefore", modifiedDateBefore)); // query parameter
            if (modifiedDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedDateAfter", modifiedDateAfter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportCollection)));
        }

        /// <summary>
        /// Gets all reports Returns all reports owned by the user based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>Task of ReportCollection</returns>
        public async System.Threading.Tasks.Task<ReportCollection> ExpenseReportsGetAsync(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null)
        {
            ApiResponse<ReportCollection> localVarResponse = await ExpenseReportsGetAsyncWithHttpInfo(offset, limit, user, approvalStatusCode, paymentStatusCode, currencyCode, paymentType, reimbursementMethod, approverLoginID, expenseTypeCode, attendeeTypeCode, countryCode, batchID, vendorName, hasVAT, hasImages, hasAttendees, hasBillableExpenses, isTestUser, expenseGroupConfigID, entryTransactionDateBefore, entryTransactionDateAfter, createDateBefore, createDateAfter, userDefinedDateBefore, userDefinedDateAfter, submitDateBefore, submitDateAfter, processingPaymentDateBefore, processingPaymentDateAfter, paidDateBefore, paidDateAfter, modifiedDateBefore, modifiedDateAfter);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all reports Returns all reports owned by the user based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Starting page offset (optional)</param>
        /// <param name="limit">Number of records to return (default 25) (optional)</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <param name="approvalStatusCode">The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="paymentStatusCode">The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support. (optional)</param>
        /// <param name="currencyCode">The 3-letter ISO 4217 currency code for the report currency. Example: USD. (optional)</param>
        /// <param name="paymentType">The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="reimbursementMethod">The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported. (optional)</param>
        /// <param name="approverLoginID">The login ID for the report approver that is the current approver assigned to the report. (optional)</param>
        /// <param name="expenseTypeCode">The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="attendeeTypeCode">The report contains expense entries that have attendees of the specified type. (optional)</param>
        /// <param name="countryCode">The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US. (optional)</param>
        /// <param name="batchID">The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the \&quot;GET Payment Batch List\&quot; function. (optional)</param>
        /// <param name="vendorName">The Vendor Description that is the vendor for at least one expense entry in the report. (optional)</param>
        /// <param name="hasVAT">Determines if the report has at least one expense entry with VAT details. Format: true or false. (optional)</param>
        /// <param name="hasImages">Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false. (optional)</param>
        /// <param name="hasAttendees">Determines if the report has at least one expense entry with an attendee. Format: true or false. (optional)</param>
        /// <param name="hasBillableExpenses">The IsBillable flag for at least one expense entry in the report. Format: true or false. (optional)</param>
        /// <param name="isTestUser">The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false. (optional)</param>
        /// <param name="expenseGroupConfigID">The unique identifier for the expense group configuration associated to the report&#39;s expense group. Use the ID from the \&quot;GET Expense Group Configurations\&quot; function. (optional)</param>
        /// <param name="entryTransactionDateBefore">The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="entryTransactionDateAfter">The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateBefore">The report create date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="createDateAfter">The report create date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateBefore">The report user defined date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="userDefinedDateAfter">The report user defined date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateBefore">The report submit date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="submitDateAfter">The report submit date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateBefore">The report processing payment date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="processingPaymentDateAfter">The report processing payment date is after this date. Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateBefore">The report paid date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="paidDateAfter">The report paid date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateBefore">The report modified date is before this date.Format: YYYY-MM-DD (optional)</param>
        /// <param name="modifiedDateAfter">The report modified date is after this date.Format: YYYY-MM-DD (optional)</param>
        /// <returns>Task of ApiResponse (ReportCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportCollection>> ExpenseReportsGetAsyncWithHttpInfo(string offset = null, int? limit = null, string user = null, string approvalStatusCode = null, string paymentStatusCode = null, string currencyCode = null, string paymentType = null, string reimbursementMethod = null, string approverLoginID = null, string expenseTypeCode = null, string attendeeTypeCode = null, string countryCode = null, string batchID = null, string vendorName = null, bool? hasVAT = null, bool? hasImages = null, bool? hasAttendees = null, bool? hasBillableExpenses = null, bool? isTestUser = null, string expenseGroupConfigID = null, DateTime? entryTransactionDateBefore = null, DateTime? entryTransactionDateAfter = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? processingPaymentDateBefore = null, DateTime? processingPaymentDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null, DateTime? modifiedDateBefore = null, DateTime? modifiedDateAfter = null)
        {

            var localVarPath = "/expense/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (approvalStatusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approvalStatusCode", approvalStatusCode)); // query parameter
            if (paymentStatusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentStatusCode", paymentStatusCode)); // query parameter
            if (currencyCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currencyCode", currencyCode)); // query parameter
            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (reimbursementMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reimbursementMethod", reimbursementMethod)); // query parameter
            if (approverLoginID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approverLoginID", approverLoginID)); // query parameter
            if (expenseTypeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expenseTypeCode", expenseTypeCode)); // query parameter
            if (attendeeTypeCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attendeeTypeCode", attendeeTypeCode)); // query parameter
            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (batchID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchID", batchID)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorName", vendorName)); // query parameter
            if (hasVAT != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasVAT", hasVAT)); // query parameter
            if (hasImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasImages", hasImages)); // query parameter
            if (hasAttendees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasAttendees", hasAttendees)); // query parameter
            if (hasBillableExpenses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasBillableExpenses", hasBillableExpenses)); // query parameter
            if (isTestUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isTestUser", isTestUser)); // query parameter
            if (expenseGroupConfigID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expenseGroupConfigID", expenseGroupConfigID)); // query parameter
            if (entryTransactionDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryTransactionDateBefore", entryTransactionDateBefore)); // query parameter
            if (entryTransactionDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryTransactionDateAfter", entryTransactionDateAfter)); // query parameter
            if (createDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateBefore", createDateBefore)); // query parameter
            if (createDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateAfter", createDateAfter)); // query parameter
            if (userDefinedDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateBefore", userDefinedDateBefore)); // query parameter
            if (userDefinedDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateAfter", userDefinedDateAfter)); // query parameter
            if (submitDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateBefore", submitDateBefore)); // query parameter
            if (submitDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateAfter", submitDateAfter)); // query parameter
            if (processingPaymentDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processingPaymentDateBefore", processingPaymentDateBefore)); // query parameter
            if (processingPaymentDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "processingPaymentDateAfter", processingPaymentDateAfter)); // query parameter
            if (paidDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateBefore", paidDateBefore)); // query parameter
            if (paidDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateAfter", paidDateAfter)); // query parameter
            if (modifiedDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedDateBefore", modifiedDateBefore)); // query parameter
            if (modifiedDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedDateAfter", modifiedDateAfter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportCollection)));
        }

        /// <summary>
        /// Gets a single report Returns the specified report.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>ReportGet</returns>
        public ReportGet ExpenseReportsIdGet(string id, string user = null)
        {
            ApiResponse<ReportGet> localVarResponse = ExpenseReportsIdGetWithHttpInfo(id, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single report Returns the specified report.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>ApiResponse of ReportGet</returns>
        public ApiResponse<ReportGet> ExpenseReportsIdGetWithHttpInfo(string id, string user = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->ExpenseReportsIdGet");

            var localVarPath = "/expense/reports/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportGet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportGet)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportGet)));
        }

        /// <summary>
        /// Gets a single report Returns the specified report.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>Task of ReportGet</returns>
        public async System.Threading.Tasks.Task<ReportGet> ExpenseReportsIdGetAsync(string id, string user = null)
        {
            ApiResponse<ReportGet> localVarResponse = await ExpenseReportsIdGetAsyncWithHttpInfo(id, user);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single report Returns the specified report.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Report ID</param>
        /// <param name="user">Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter. (optional)</param>
        /// <returns>Task of ApiResponse (ReportGet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportGet>> ExpenseReportsIdGetAsyncWithHttpInfo(string id, string user = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->ExpenseReportsIdGet");

            var localVarPath = "/expense/reports/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportGet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportGet)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportGet)));
        }

        /// <summary>
        /// Update report Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Object</returns>
        public Object ExpenseReportsIdPut(string id, ReportPut content, string user = null)
        {
            ApiResponse<Object> localVarResponse = ExpenseReportsIdPutWithHttpInfo(id, content, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update report Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ExpenseReportsIdPutWithHttpInfo(string id, ReportPut content, string user = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->ExpenseReportsIdPut");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling ResourcesApi->ExpenseReportsIdPut");

            var localVarPath = "/expense/reports/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update report Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ExpenseReportsIdPutAsync(string id, ReportPut content, string user = null)
        {
            ApiResponse<Object> localVarResponse = await ExpenseReportsIdPutAsyncWithHttpInfo(id, content, user);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update report Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier for the report.</param>
        /// <param name="content">The report object to update</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExpenseReportsIdPutAsyncWithHttpInfo(string id, ReportPut content, string user = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->ExpenseReportsIdPut");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling ResourcesApi->ExpenseReportsIdPut");

            var localVarPath = "/expense/reports/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a new report Create an expense report with the supplied data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>CreateResponse</returns>
        public CreateResponse ExpenseReportsPost(ReportPost content, string user = null)
        {
            ApiResponse<CreateResponse> localVarResponse = ExpenseReportsPostWithHttpInfo(content, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new report Create an expense report with the supplied data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        public ApiResponse<CreateResponse> ExpenseReportsPostWithHttpInfo(ReportPost content, string user = null)
        {
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling ResourcesApi->ExpenseReportsPost");

            var localVarPath = "/expense/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

        /// <summary>
        /// Create a new report Create an expense report with the supplied data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of CreateResponse</returns>
        public async System.Threading.Tasks.Task<CreateResponse> ExpenseReportsPostAsync(ReportPost content, string user = null)
        {
            ApiResponse<CreateResponse> localVarResponse = await ExpenseReportsPostAsyncWithHttpInfo(content, user);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new report Create an expense report with the supplied data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="content">Report object to create</param>
        /// <param name="user">Optional. The login ID for the Report Owner. (optional)</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateResponse>> ExpenseReportsPostAsyncWithHttpInfo(ReportPost content, string user = null)
        {
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling ResourcesApi->ExpenseReportsPost");

            var localVarPath = "/expense/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpenseReportsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

    }
}
