/* 
 * Payment Request
 *
 * A payment request is a request for payment (partial or full) of an invoice. This API provides methods to create or update a payment request, or view a payment request by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using RestSharp;
using SapConcurApiClient.Client;
using SapConcurApiClient.PaymentRequestModels;
using System.Collections.ObjectModel;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConcurPaymentRequestApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all relevant information of a Payment Request.
        /// </summary>
        /// <remarks>
        /// This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>PaymentRequest</returns>
        PaymentRequest InvoicePaymentrequestIdGet(string id);

        /// <summary>
        /// Gets all relevant information of a Payment Request.
        /// </summary>
        /// <remarks>
        /// This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        ApiResponse<PaymentRequest> InvoicePaymentrequestIdGetWithHttpInfo(string id);
        /// <summary>
        /// Create a new Payment Request.
        /// </summary>
        /// <remarks>
        /// Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>CreateResponse</returns>
        CreateResponse InvoicePaymentrequestPost(PaymentRequestPost paymentRequest);

        /// <summary>
        /// Create a new Payment Request.
        /// </summary>
        /// <remarks>
        /// Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        ApiResponse<CreateResponse> InvoicePaymentrequestPostWithHttpInfo(PaymentRequestPost paymentRequest);
        /// <summary>
        /// Update a Payment Request.
        /// </summary>
        /// <remarks>
        /// Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>CreateResponse</returns>
        CreateResponse InvoicePaymentrequestPut(PaymentRequestPut paymentRequest);

        /// <summary>
        /// Update a Payment Request.
        /// </summary>
        /// <remarks>
        /// Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        ApiResponse<CreateResponse> InvoicePaymentrequestPutWithHttpInfo(PaymentRequestPut paymentRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all relevant information of a Payment Request.
        /// </summary>
        /// <remarks>
        /// This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>Task of PaymentRequest</returns>
        System.Threading.Tasks.Task<PaymentRequest> InvoicePaymentrequestIdGetAsync(string id);

        /// <summary>
        /// Gets all relevant information of a Payment Request.
        /// </summary>
        /// <remarks>
        /// This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> InvoicePaymentrequestIdGetAsyncWithHttpInfo(string id);
        /// <summary>
        /// Create a new Payment Request.
        /// </summary>
        /// <remarks>
        /// Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of CreateResponse</returns>
        System.Threading.Tasks.Task<CreateResponse> InvoicePaymentrequestPostAsync(PaymentRequestPost paymentRequest);

        /// <summary>
        /// Create a new Payment Request.
        /// </summary>
        /// <remarks>
        /// Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResponse>> InvoicePaymentrequestPostAsyncWithHttpInfo(PaymentRequestPost paymentRequest);
        /// <summary>
        /// Update a Payment Request.
        /// </summary>
        /// <remarks>
        /// Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of CreateResponse</returns>
        System.Threading.Tasks.Task<CreateResponse> InvoicePaymentrequestPutAsync(PaymentRequestPut paymentRequest);

        /// <summary>
        /// Update a Payment Request.
        /// </summary>
        /// <remarks>
        /// Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResponse>> InvoicePaymentrequestPutAsyncWithHttpInfo(PaymentRequestPut paymentRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConcurPaymentRequestApi : IConcurPaymentRequestApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConcurPaymentRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConcurPaymentRequestApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConcurPaymentRequestApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConcurPaymentRequestApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all relevant information of a Payment Request. This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>PaymentRequest</returns>
        public PaymentRequest InvoicePaymentrequestIdGet(string id)
        {
            ApiResponse<PaymentRequest> localVarResponse = InvoicePaymentrequestIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all relevant information of a Payment Request. This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>ApiResponse of PaymentRequest</returns>
        public ApiResponse<PaymentRequest> InvoicePaymentrequestIdGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->InvoicePaymentrequestIdGet");

            var localVarPath = "/invoice/paymentrequest/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
        }

        /// <summary>
        /// Gets all relevant information of a Payment Request. This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>Task of PaymentRequest</returns>
        public async System.Threading.Tasks.Task<PaymentRequest> InvoicePaymentrequestIdGetAsync(string id)
        {
            ApiResponse<PaymentRequest> localVarResponse = await InvoicePaymentrequestIdGetAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all relevant information of a Payment Request. This API Gets all relevant information (Payment Request Header, Payment Request Line Item and Payment Request Allocation) of a Payment Request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Payment Request ID.</param>
        /// <returns>Task of ApiResponse (PaymentRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequest>> InvoicePaymentrequestIdGetAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->InvoicePaymentrequestIdGet");

            var localVarPath = "/invoice/paymentrequest/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequest)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequest)));
        }

        /// <summary>
        /// Create a new Payment Request. Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>CreateResponse</returns>
        public CreateResponse InvoicePaymentrequestPost(PaymentRequestPost paymentRequest)
        {
            ApiResponse<CreateResponse> localVarResponse = InvoicePaymentrequestPostWithHttpInfo(paymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Payment Request. Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        public ApiResponse<CreateResponse> InvoicePaymentrequestPostWithHttpInfo(PaymentRequestPost paymentRequest)
        {
            // verify the required parameter 'paymentRequest' is set
            if (paymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentRequest' when calling ResourcesApi->InvoicePaymentrequestPost");

            var localVarPath = "/invoice/paymentrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentRequest != null && paymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

        /// <summary>
        /// Create a new Payment Request. Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of CreateResponse</returns>
        public async System.Threading.Tasks.Task<CreateResponse> InvoicePaymentrequestPostAsync(PaymentRequestPost paymentRequest)
        {
            ApiResponse<CreateResponse> localVarResponse = await InvoicePaymentrequestPostAsyncWithHttpInfo(paymentRequest);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Payment Request. Creates a new Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateResponse>> InvoicePaymentrequestPostAsyncWithHttpInfo(PaymentRequestPost paymentRequest)
        {
            // verify the required parameter 'paymentRequest' is set
            if (paymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentRequest' when calling ResourcesApi->InvoicePaymentrequestPost");

            var localVarPath = "/invoice/paymentrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentRequest != null && paymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

        /// <summary>
        /// Update a Payment Request. Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>CreateResponse</returns>
        public CreateResponse InvoicePaymentrequestPut(PaymentRequestPut paymentRequest)
        {
            ApiResponse<CreateResponse> localVarResponse = InvoicePaymentrequestPutWithHttpInfo(paymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Payment Request. Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        public ApiResponse<CreateResponse> InvoicePaymentrequestPutWithHttpInfo(PaymentRequestPut paymentRequest)
        {
            // verify the required parameter 'paymentRequest' is set
            if (paymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentRequest' when calling ResourcesApi->InvoicePaymentrequestPut");

            var localVarPath = "/invoice/paymentrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentRequest != null && paymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

        /// <summary>
        /// Update a Payment Request. Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of CreateResponse</returns>
        public async System.Threading.Tasks.Task<CreateResponse> InvoicePaymentrequestPutAsync(PaymentRequestPut paymentRequest)
        {
            ApiResponse<CreateResponse> localVarResponse = await InvoicePaymentrequestPutAsyncWithHttpInfo(paymentRequest);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Payment Request. Updates a Payment Request with all relevant details including line items and associated allocations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest">An XML or JSON representation of a Payment Request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateResponse>> InvoicePaymentrequestPutAsyncWithHttpInfo(PaymentRequestPut paymentRequest)
        {
            // verify the required parameter 'paymentRequest' is set
            if (paymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'paymentRequest' when calling ResourcesApi->InvoicePaymentrequestPut");

            var localVarPath = "/invoice/paymentrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentRequest != null && paymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

    }
}
