/* 
 * Payment Request Digest
 *
 * A payment request digest is a collection of payment requests to invoice vendors. This API provides methods to view all payment requests corresponding to search parameters, or view a payment request digest by ID.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using RestSharp;
using SapConcurApiClient.Client;
using SapConcurApiClient.PaymentRequestDigestModels;
using System.Collections.ObjectModel;

namespace SapConcurApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConcurPaymentRequestDigestApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all payment requests digests based on the search criteria.
        /// </summary>
        /// <remarks>
        /// Returns all payment requests digests based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>PaymentRequestDigestCollection</returns>
        PaymentRequestDigestCollection InvoicePaymentrequestdigestsGet(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null);

        /// <summary>
        /// Get all payment requests digests based on the search criteria.
        /// </summary>
        /// <remarks>
        /// Returns all payment requests digests based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>ApiResponse of PaymentRequestDigestCollection</returns>
        ApiResponse<PaymentRequestDigestCollection> InvoicePaymentrequestdigestsGetWithHttpInfo(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null);
        /// <summary>
        /// Get the payment request digest based on ID. 
        /// </summary>
        /// <remarks>
        /// Returns the payment request digest based on ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>PaymentRequestDigest</returns>
        PaymentRequestDigest InvoicePaymentrequestdigestsIdGet(string id);

        /// <summary>
        /// Get the payment request digest based on ID. 
        /// </summary>
        /// <remarks>
        /// Returns the payment request digest based on ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>ApiResponse of PaymentRequestDigest</returns>
        ApiResponse<PaymentRequestDigest> InvoicePaymentrequestdigestsIdGetWithHttpInfo(string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all payment requests digests based on the search criteria.
        /// </summary>
        /// <remarks>
        /// Returns all payment requests digests based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>Task of PaymentRequestDigestCollection</returns>
        System.Threading.Tasks.Task<PaymentRequestDigestCollection> InvoicePaymentrequestdigestsGetAsync(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null);

        /// <summary>
        /// Get all payment requests digests based on the search criteria.
        /// </summary>
        /// <remarks>
        /// Returns all payment requests digests based on the search criteria.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequestDigestCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequestDigestCollection>> InvoicePaymentrequestdigestsGetAsyncWithHttpInfo(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null);
        /// <summary>
        /// Get the payment request digest based on ID. 
        /// </summary>
        /// <remarks>
        /// Returns the payment request digest based on ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>Task of PaymentRequestDigest</returns>
        System.Threading.Tasks.Task<PaymentRequestDigest> InvoicePaymentrequestdigestsIdGetAsync(string id);

        /// <summary>
        /// Get the payment request digest based on ID. 
        /// </summary>
        /// <remarks>
        /// Returns the payment request digest based on ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>Task of ApiResponse (PaymentRequestDigest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequestDigest>> InvoicePaymentrequestdigestsIdGetAsyncWithHttpInfo(string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConcurPaymentRequestDigestApi : IConcurPaymentRequestDigestApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConcurPaymentRequestDigestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConcurPaymentRequestDigestApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConcurPaymentRequestDigestApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConcurPaymentRequestDigestApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all payment requests digests based on the search criteria. Returns all payment requests digests based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>PaymentRequestDigestCollection</returns>
        public PaymentRequestDigestCollection InvoicePaymentrequestdigestsGet(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null)
        {
            ApiResponse<PaymentRequestDigestCollection> localVarResponse = InvoicePaymentrequestdigestsGetWithHttpInfo(offset, limit, approvalStatus, paymentStatus, vendorInvoiceNumber, createDateBefore, createDateAfter, userDefinedDateBefore, userDefinedDateAfter, submitDateBefore, submitDateAfter, paidDateBefore, paidDateAfter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all payment requests digests based on the search criteria. Returns all payment requests digests based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>ApiResponse of PaymentRequestDigestCollection</returns>
        public ApiResponse<PaymentRequestDigestCollection> InvoicePaymentrequestdigestsGetWithHttpInfo(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null)
        {

            var localVarPath = "/invoice/paymentrequestdigests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (approvalStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approvalStatus", approvalStatus)); // query parameter
            if (paymentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentStatus", paymentStatus)); // query parameter
            if (vendorInvoiceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorInvoiceNumber", vendorInvoiceNumber)); // query parameter
            if (createDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateBefore", createDateBefore)); // query parameter
            if (createDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateAfter", createDateAfter)); // query parameter
            if (userDefinedDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateBefore", userDefinedDateBefore)); // query parameter
            if (userDefinedDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateAfter", userDefinedDateAfter)); // query parameter
            if (submitDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateBefore", submitDateBefore)); // query parameter
            if (submitDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateAfter", submitDateAfter)); // query parameter
            if (paidDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateBefore", paidDateBefore)); // query parameter
            if (paidDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateAfter", paidDateAfter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestdigestsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestDigestCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequestDigestCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestDigestCollection)));
        }

        /// <summary>
        /// Get all payment requests digests based on the search criteria. Returns all payment requests digests based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>Task of PaymentRequestDigestCollection</returns>
        public async System.Threading.Tasks.Task<PaymentRequestDigestCollection> InvoicePaymentrequestdigestsGetAsync(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null)
        {
            ApiResponse<PaymentRequestDigestCollection> localVarResponse = await InvoicePaymentrequestdigestsGetAsyncWithHttpInfo(offset, limit, approvalStatus, paymentStatus, vendorInvoiceNumber, createDateBefore, createDateAfter, userDefinedDateBefore, userDefinedDateAfter, submitDateBefore, submitDateAfter, paidDateBefore, paidDateAfter);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get all payment requests digests based on the search criteria. Returns all payment requests digests based on the search criteria.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start of the page offset. (optional)</param>
        /// <param name="limit">The number of records to return (default 1000). (optional)</param>
        /// <param name="approvalStatus">A code representing a Payment Request Approval Status. Use GET /invoice/localizeddata to get the available approval status codes. (optional)</param>
        /// <param name="paymentStatus">A code representing a Payment Request Payment Status. Use GET /invoice/localizeddata to get the available payment status codes (optional)</param>
        /// <param name="vendorInvoiceNumber">Vendor invoice number tied to invoice. (optional)</param>
        /// <param name="createDateBefore">The payment request create date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="createDateAfter">The payment request create date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateBefore">The payment request user defined date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="userDefinedDateAfter">The payment request user defined date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateBefore">The payment request submit date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="submitDateAfter">The payment request submit date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateBefore">The payment request paid date is before this date.Format: YYYY-MM-DD. (optional)</param>
        /// <param name="paidDateAfter">The payment request paid date is after this date.Format: YYYY-MM-DD. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequestDigestCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequestDigestCollection>> InvoicePaymentrequestdigestsGetAsyncWithHttpInfo(string offset = null, int? limit = null, string approvalStatus = null, string paymentStatus = null, string vendorInvoiceNumber = null, DateTime? createDateBefore = null, DateTime? createDateAfter = null, DateTime? userDefinedDateBefore = null, DateTime? userDefinedDateAfter = null, DateTime? submitDateBefore = null, DateTime? submitDateAfter = null, DateTime? paidDateBefore = null, DateTime? paidDateAfter = null)
        {

            var localVarPath = "/invoice/paymentrequestdigests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (approvalStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approvalStatus", approvalStatus)); // query parameter
            if (paymentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentStatus", paymentStatus)); // query parameter
            if (vendorInvoiceNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorInvoiceNumber", vendorInvoiceNumber)); // query parameter
            if (createDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateBefore", createDateBefore)); // query parameter
            if (createDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createDateAfter", createDateAfter)); // query parameter
            if (userDefinedDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateBefore", userDefinedDateBefore)); // query parameter
            if (userDefinedDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userDefinedDateAfter", userDefinedDateAfter)); // query parameter
            if (submitDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateBefore", submitDateBefore)); // query parameter
            if (submitDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "submitDateAfter", submitDateAfter)); // query parameter
            if (paidDateBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateBefore", paidDateBefore)); // query parameter
            if (paidDateAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paidDateAfter", paidDateAfter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestdigestsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestDigestCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequestDigestCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestDigestCollection)));
        }

        /// <summary>
        /// Get the payment request digest based on ID.  Returns the payment request digest based on ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>PaymentRequestDigest</returns>
        public PaymentRequestDigest InvoicePaymentrequestdigestsIdGet(string id)
        {
            ApiResponse<PaymentRequestDigest> localVarResponse = InvoicePaymentrequestdigestsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the payment request digest based on ID.  Returns the payment request digest based on ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>ApiResponse of PaymentRequestDigest</returns>
        public ApiResponse<PaymentRequestDigest> InvoicePaymentrequestdigestsIdGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->InvoicePaymentrequestdigestsIdGet");

            var localVarPath = "/invoice/paymentrequestdigests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestdigestsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestDigest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequestDigest)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestDigest)));
        }

        /// <summary>
        /// Get the payment request digest based on ID.  Returns the payment request digest based on ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>Task of PaymentRequestDigest</returns>
        public async System.Threading.Tasks.Task<PaymentRequestDigest> InvoicePaymentrequestdigestsIdGetAsync(string id)
        {
            ApiResponse<PaymentRequestDigest> localVarResponse = await InvoicePaymentrequestdigestsIdGetAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get the payment request digest based on ID.  Returns the payment request digest based on ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment request ID</param>
        /// <returns>Task of ApiResponse (PaymentRequestDigest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequestDigest>> InvoicePaymentrequestdigestsIdGetAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ResourcesApi->InvoicePaymentrequestdigestsIdGet");

            var localVarPath = "/invoice/paymentrequestdigests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicePaymentrequestdigestsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestDigest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentRequestDigest)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestDigest)));
        }

    }
}
