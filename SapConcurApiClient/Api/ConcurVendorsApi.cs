/* 
 * Vendors
 *
 * An invoice is a bill of sale for goods or services provided by a vendor. This API provides methods to create, update, or delete invoice vendors.
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using RestSharp;
using SapConcurApiClient.Client;
using SapConcurApiClient.VendorModels;
using System.Collections.ObjectModel;

namespace SapConcurApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConcurVendorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a vendor.
        /// </summary>
        /// <remarks>
        /// Delete a vendor by Vendor Code and Address Code.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>VendorCollection</returns>
        VendorCollection InvoiceVendorsDelete(string vendorCode, string addressCode);

        /// <summary>
        /// Delete a vendor.
        /// </summary>
        /// <remarks>
        /// Delete a vendor by Vendor Code and Address Code.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        ApiResponse<VendorCollection> InvoiceVendorsDeleteWithHttpInfo(string vendorCode, string addressCode);
        /// <summary>
        /// Retrieves an existing vendor.
        /// </summary>
        /// <remarks>
        /// Gets an existing vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>VendorCollection</returns>
        VendorCollection InvoiceVendorsGet(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null);

        /// <summary>
        /// Retrieves an existing vendor.
        /// </summary>
        /// <remarks>
        /// Gets an existing vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        ApiResponse<VendorCollection> InvoiceVendorsGetWithHttpInfo(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null);
        /// <summary>
        /// Create vendor/s.
        /// </summary>
        /// <remarks>
        /// Create vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>VendorCollection</returns>
        VendorCollection InvoiceVendorsPost(VendorCollection vendors);

        /// <summary>
        /// Create vendor/s.
        /// </summary>
        /// <remarks>
        /// Create vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        ApiResponse<VendorCollection> InvoiceVendorsPostWithHttpInfo(VendorCollection vendors);
        /// <summary>
        /// Updates existing vendor/s.
        /// </summary>
        /// <remarks>
        /// Updates existing vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>VendorCollection</returns>
        VendorCollection InvoiceVendorsPut(VendorCollection vendors);

        /// <summary>
        /// Updates existing vendor/s.
        /// </summary>
        /// <remarks>
        /// Updates existing vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        ApiResponse<VendorCollection> InvoiceVendorsPutWithHttpInfo(VendorCollection vendors);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a vendor.
        /// </summary>
        /// <remarks>
        /// Delete a vendor by Vendor Code and Address Code.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>Task of VendorCollection</returns>
        Task<VendorCollection> InvoiceVendorsDeleteAsync(string vendorCode, string addressCode);

        /// <summary>
        /// Delete a vendor.
        /// </summary>
        /// <remarks>
        /// Delete a vendor by Vendor Code and Address Code.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        Task<ApiResponse<VendorCollection>> InvoiceVendorsDeleteAsyncWithHttpInfo(string vendorCode, string addressCode);
        /// <summary>
        /// Retrieves an existing vendor.
        /// </summary>
        /// <remarks>
        /// Gets an existing vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>Task of VendorCollection</returns>
        Task<VendorCollection> InvoiceVendorsGetAsync(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null);

        /// <summary>
        /// Retrieves an existing vendor.
        /// </summary>
        /// <remarks>
        /// Gets an existing vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        Task<ApiResponse<VendorCollection>> InvoiceVendorsGetAsyncWithHttpInfo(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null);
        /// <summary>
        /// Create vendor/s.
        /// </summary>
        /// <remarks>
        /// Create vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of VendorCollection</returns>
        Task<VendorCollection> InvoiceVendorsPostAsync(VendorCollection vendors);

        /// <summary>
        /// Create vendor/s.
        /// </summary>
        /// <remarks>
        /// Create vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        Task<ApiResponse<VendorCollection>> InvoiceVendorsPostAsyncWithHttpInfo(VendorCollection vendors);
        /// <summary>
        /// Updates existing vendor/s.
        /// </summary>
        /// <remarks>
        /// Updates existing vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of VendorCollection</returns>
        Task<VendorCollection> InvoiceVendorsPutAsync(VendorCollection vendors);

        /// <summary>
        /// Updates existing vendor/s.
        /// </summary>
        /// <remarks>
        /// Updates existing vendor/s and returns the status of creation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        Task<ApiResponse<VendorCollection>> InvoiceVendorsPutAsyncWithHttpInfo(VendorCollection vendors);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConcurVendorsApi : IConcurVendorsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConcurVendorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConcurVendorsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConcurVendorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConcurVendorsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a vendor. Delete a vendor by Vendor Code and Address Code.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>VendorCollection</returns>
        public VendorCollection InvoiceVendorsDelete(string vendorCode, string addressCode)
        {
            ApiResponse<VendorCollection> localVarResponse = InvoiceVendorsDeleteWithHttpInfo(vendorCode, addressCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a vendor. Delete a vendor by Vendor Code and Address Code.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        public ApiResponse<VendorCollection> InvoiceVendorsDeleteWithHttpInfo(string vendorCode, string addressCode)
        {
            // verify the required parameter 'vendorCode' is set
            if (vendorCode == null)
                throw new ApiException(400, "Missing required parameter 'vendorCode' when calling ResourcesApi->InvoiceVendorsDelete");
            // verify the required parameter 'addressCode' is set
            if (addressCode == null)
                throw new ApiException(400, "Missing required parameter 'addressCode' when calling ResourcesApi->InvoiceVendorsDelete");

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorCode", vendorCode)); // query parameter
            if (addressCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressCode", addressCode)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

        /// <summary>
        /// Delete a vendor. Delete a vendor by Vendor Code and Address Code.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>Task of VendorCollection</returns>
        public async System.Threading.Tasks.Task<VendorCollection> InvoiceVendorsDeleteAsync(string vendorCode, string addressCode)
        {
            ApiResponse<VendorCollection> localVarResponse = await InvoiceVendorsDeleteAsyncWithHttpInfo(vendorCode, addressCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a vendor. Delete a vendor by Vendor Code and Address Code.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorCode">Vendor Code to be deleted</param>
        /// <param name="addressCode">Address Code to be deleted</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorCollection>> InvoiceVendorsDeleteAsyncWithHttpInfo(string vendorCode, string addressCode)
        {
            // verify the required parameter 'vendorCode' is set
            if (vendorCode == null)
                throw new ApiException(400, "Missing required parameter 'vendorCode' when calling ResourcesApi->InvoiceVendorsDelete");
            // verify the required parameter 'addressCode' is set
            if (addressCode == null)
                throw new ApiException(400, "Missing required parameter 'addressCode' when calling ResourcesApi->InvoiceVendorsDelete");

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorCode", vendorCode)); // query parameter
            if (addressCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressCode", addressCode)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

        /// <summary>
        /// Retrieves an existing vendor. Gets an existing vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>VendorCollection</returns>
        public VendorCollection InvoiceVendorsGet(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null)
        {
            ApiResponse<VendorCollection> localVarResponse = InvoiceVendorsGetWithHttpInfo(limit, offset, sortDirection, sortBy, searchType, vendorCode, vendorName, taxID, buyerAccountNumber, addressCode, address1, address2, address3, city, state, postalCode, approved, country, custom1, custom2, custom3, custom4, custom5, custom6, custom7, custom8, custom9, custom10, custom11, custom12, custom13, custom14, custom15, custom16, custom17, custom18, custom19, custom20);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an existing vendor. Gets an existing vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        public ApiResponse<VendorCollection> InvoiceVendorsGetWithHttpInfo(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null)
        {

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (searchType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchType", searchType)); // query parameter
            if (vendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorCode", vendorCode)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorName", vendorName)); // query parameter
            if (taxID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "taxID", taxID)); // query parameter
            if (buyerAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "buyerAccountNumber", buyerAccountNumber)); // query parameter
            if (addressCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressCode", addressCode)); // query parameter
            if (address1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address1", address1)); // query parameter
            if (address2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address2", address2)); // query parameter
            if (address3 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address3", address3)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postalCode", postalCode)); // query parameter
            if (approved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approved", approved)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (custom1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom1", custom1)); // query parameter
            if (custom2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom2", custom2)); // query parameter
            if (custom3 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom3", custom3)); // query parameter
            if (custom4 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom4", custom4)); // query parameter
            if (custom5 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom5", custom5)); // query parameter
            if (custom6 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom6", custom6)); // query parameter
            if (custom7 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom7", custom7)); // query parameter
            if (custom8 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom8", custom8)); // query parameter
            if (custom9 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom9", custom9)); // query parameter
            if (custom10 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom10", custom10)); // query parameter
            if (custom11 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom11", custom11)); // query parameter
            if (custom12 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom12", custom12)); // query parameter
            if (custom13 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom13", custom13)); // query parameter
            if (custom14 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom14", custom14)); // query parameter
            if (custom15 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom15", custom15)); // query parameter
            if (custom16 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom16", custom16)); // query parameter
            if (custom17 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom17", custom17)); // query parameter
            if (custom18 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom18", custom18)); // query parameter
            if (custom19 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom19", custom19)); // query parameter
            if (custom20 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom20", custom20)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

        /// <summary>
        /// Retrieves an existing vendor. Gets an existing vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>Task of VendorCollection</returns>
        public async System.Threading.Tasks.Task<VendorCollection> InvoiceVendorsGetAsync(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null)
        {
            ApiResponse<VendorCollection> localVarResponse = await InvoiceVendorsGetAsyncWithHttpInfo(limit, offset, sortDirection, sortBy, searchType, vendorCode, vendorName, taxID, buyerAccountNumber, addressCode, address1, address2, address3, city, state, postalCode, approved, country, custom1, custom2, custom3, custom4, custom5, custom6, custom7, custom8, custom9, custom10, custom11, custom12, custom13, custom14, custom15, custom16, custom17, custom18, custom19, custom20);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an existing vendor. Gets an existing vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of items to be returned in a  response. The default is 25 and cannot exceed 1000. (optional)</param>
        /// <param name="offset">Specifies the starting point for the next query when iterating through the collection response.  Use with paged collections of resources. (optional)</param>
        /// <param name="sortDirection">ascending or descending, The default value will be ascending. (optional)</param>
        /// <param name="sortBy">Field you need to the results to be sorted by. Vendor Name will be made default if no value is sent. Only fields that are added to the vendor form can be used here. Fields have to be specified by name as specified in Doc. (optional)</param>
        /// <param name="searchType">Valid Options - exact, begins, contains and ends - Applies for the entire given search parameters. The default value if not sent is exact. (optional)</param>
        /// <param name="vendorCode">Vendor Code to be searched (optional)</param>
        /// <param name="vendorName">Vendor Name to be searched (optional)</param>
        /// <param name="taxID">Tax ID to be searched (optional)</param>
        /// <param name="buyerAccountNumber">Buyer Account Number to be searched (optional)</param>
        /// <param name="addressCode">Address Code to be searched (optional)</param>
        /// <param name="address1">Address 1 to be searched (optional)</param>
        /// <param name="address2">Address 2 to be searched (optional)</param>
        /// <param name="address3">Address 3 to be searched (optional)</param>
        /// <param name="city">City to be searched (optional)</param>
        /// <param name="state">State to be searched (optional)</param>
        /// <param name="postalCode">Postal Code to be searched (optional)</param>
        /// <param name="approved">Find Approved/Un Approved Vendors , True/False (optional)</param>
        /// <param name="country">Country to be searched (optional)</param>
        /// <param name="custom1">Custom 1 to be searched (optional)</param>
        /// <param name="custom2">Custom 2 to be searched (optional)</param>
        /// <param name="custom3">Custom 3 to be searched (optional)</param>
        /// <param name="custom4">Custom 4 to be searched (optional)</param>
        /// <param name="custom5">Custom 5 to be searched (optional)</param>
        /// <param name="custom6">Custom 6 to be searched (optional)</param>
        /// <param name="custom7">Custom 7 to be searched (optional)</param>
        /// <param name="custom8">Custom 8 to be searched (optional)</param>
        /// <param name="custom9">Custom 9 to be searched (optional)</param>
        /// <param name="custom10">Custom 10 to be searched (optional)</param>
        /// <param name="custom11">Custom 11 to be searched (optional)</param>
        /// <param name="custom12">Custom 12 to be searched (optional)</param>
        /// <param name="custom13">Custom 13 to be searched (optional)</param>
        /// <param name="custom14">Custom 14 to be searched (optional)</param>
        /// <param name="custom15">Custom 15 to be searched (optional)</param>
        /// <param name="custom16">Custom 16 to be searched (optional)</param>
        /// <param name="custom17">Custom 17 to be searched (optional)</param>
        /// <param name="custom18">Custom 18 to be searched (optional)</param>
        /// <param name="custom19">Custom 19 to be searched (optional)</param>
        /// <param name="custom20">Custom 20 to be searched (optional)</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorCollection>> InvoiceVendorsGetAsyncWithHttpInfo(int? limit = null, string offset = null, string sortDirection = null, string sortBy = null, string searchType = null, string vendorCode = null, string vendorName = null, string taxID = null, string buyerAccountNumber = null, string addressCode = null, string address1 = null, string address2 = null, string address3 = null, string city = null, string state = null, string postalCode = null, string approved = null, string country = null, string custom1 = null, string custom2 = null, string custom3 = null, string custom4 = null, string custom5 = null, string custom6 = null, string custom7 = null, string custom8 = null, string custom9 = null, string custom10 = null, string custom11 = null, string custom12 = null, string custom13 = null, string custom14 = null, string custom15 = null, string custom16 = null, string custom17 = null, string custom18 = null, string custom19 = null, string custom20 = null)
        {

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortDirection", sortDirection)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (searchType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchType", searchType)); // query parameter
            if (vendorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorCode", vendorCode)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorName", vendorName)); // query parameter
            if (taxID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "taxID", taxID)); // query parameter
            if (buyerAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "buyerAccountNumber", buyerAccountNumber)); // query parameter
            if (addressCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressCode", addressCode)); // query parameter
            if (address1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address1", address1)); // query parameter
            if (address2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address2", address2)); // query parameter
            if (address3 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address3", address3)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (postalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postalCode", postalCode)); // query parameter
            if (approved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approved", approved)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (custom1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom1", custom1)); // query parameter
            if (custom2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom2", custom2)); // query parameter
            if (custom3 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom3", custom3)); // query parameter
            if (custom4 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom4", custom4)); // query parameter
            if (custom5 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom5", custom5)); // query parameter
            if (custom6 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom6", custom6)); // query parameter
            if (custom7 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom7", custom7)); // query parameter
            if (custom8 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom8", custom8)); // query parameter
            if (custom9 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom9", custom9)); // query parameter
            if (custom10 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom10", custom10)); // query parameter
            if (custom11 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom11", custom11)); // query parameter
            if (custom12 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom12", custom12)); // query parameter
            if (custom13 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom13", custom13)); // query parameter
            if (custom14 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom14", custom14)); // query parameter
            if (custom15 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom15", custom15)); // query parameter
            if (custom16 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom16", custom16)); // query parameter
            if (custom17 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom17", custom17)); // query parameter
            if (custom18 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom18", custom18)); // query parameter
            if (custom19 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom19", custom19)); // query parameter
            if (custom20 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom20", custom20)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

        /// <summary>
        /// Create vendor/s. Create vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>VendorCollection</returns>
        public VendorCollection InvoiceVendorsPost(VendorCollection vendors)
        {
            ApiResponse<VendorCollection> localVarResponse = InvoiceVendorsPostWithHttpInfo(vendors);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create vendor/s. Create vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        public ApiResponse<VendorCollection> InvoiceVendorsPostWithHttpInfo(VendorCollection vendors)
        {
            // verify the required parameter 'vendors' is set
            if (vendors == null)
                throw new ApiException(400, "Missing required parameter 'vendors' when calling ResourcesApi->InvoiceVendorsPost");

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vendors != null && vendors.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vendors); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vendors; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

        /// <summary>
        /// Create vendor/s. Create vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of VendorCollection</returns>
        public async System.Threading.Tasks.Task<VendorCollection> InvoiceVendorsPostAsync(VendorCollection vendors)
        {
            ApiResponse<VendorCollection> localVarResponse = await InvoiceVendorsPostAsyncWithHttpInfo(vendors);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create vendor/s. Create vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorCollection>> InvoiceVendorsPostAsyncWithHttpInfo(VendorCollection vendors)
        {
            // verify the required parameter 'vendors' is set
            if (vendors == null)
                throw new ApiException(400, "Missing required parameter 'vendors' when calling ResourcesApi->InvoiceVendorsPost");

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vendors != null && vendors.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vendors); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vendors; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

        /// <summary>
        /// Updates existing vendor/s. Updates existing vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>VendorCollection</returns>
        public VendorCollection InvoiceVendorsPut(VendorCollection vendors)
        {
            ApiResponse<VendorCollection> localVarResponse = InvoiceVendorsPutWithHttpInfo(vendors);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates existing vendor/s. Updates existing vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>ApiResponse of VendorCollection</returns>
        public ApiResponse<VendorCollection> InvoiceVendorsPutWithHttpInfo(VendorCollection vendors)
        {
            // verify the required parameter 'vendors' is set
            if (vendors == null)
                throw new ApiException(400, "Missing required parameter 'vendors' when calling ResourcesApi->InvoiceVendorsPut");

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vendors != null && vendors.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vendors); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vendors; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

        /// <summary>
        /// Updates existing vendor/s. Updates existing vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of VendorCollection</returns>
        public async System.Threading.Tasks.Task<VendorCollection> InvoiceVendorsPutAsync(VendorCollection vendors)
        {
            ApiResponse<VendorCollection> localVarResponse = await InvoiceVendorsPutAsyncWithHttpInfo(vendors);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Updates existing vendor/s. Updates existing vendor/s and returns the status of creation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendors">The vendor details.</param>
        /// <returns>Task of ApiResponse (VendorCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorCollection>> InvoiceVendorsPutAsyncWithHttpInfo(VendorCollection vendors)
        {
            // verify the required parameter 'vendors' is set
            if (vendors == null)
                throw new ApiException(400, "Missing required parameter 'vendors' when calling ResourcesApi->InvoiceVendorsPut");

            var localVarPath = "/invoice/vendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vendors != null && vendors.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vendors); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vendors; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceVendorsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorCollection)));
        }

    }
}
